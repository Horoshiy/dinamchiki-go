// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	models "gitlab.com/dinamchiki/go-graphql/graph/model"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Article() ArticleResolver
	Creator() CreatorResolver
	MoneyCost() MoneyCostResolver
	MoneyMove() MoneyMoveResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Stadium() StadiumResolver
	Staff() StaffResolver
	Student() StudentResolver
	StudentVisit() StudentVisitResolver
	Team() TeamResolver
	Training() TrainingResolver
}

type DirectiveRoot struct {
	HasRole func(ctx context.Context, obj interface{}, next graphql.Resolver, role models.Role) (res interface{}, err error)
}

type ComplexityRoot struct {
	Article struct {
		Author      func(childComplexity int) int
		AuthorID    func(childComplexity int) int
		Description func(childComplexity int) int
		FileName    func(childComplexity int) int
		ID          func(childComplexity int) int
		Published   func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	ArticleConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ArticleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ArticlePayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	AuthResponse struct {
		AuthToken func(childComplexity int) int
		User      func(childComplexity int) int
	}

	AuthToken struct {
		AccessToken func(childComplexity int) int
		ExpiredAt   func(childComplexity int) int
	}

	Cart struct {
		ID        func(childComplexity int) int
		KitIds    func(childComplexity int) int
		Published func(childComplexity int) int
		Student   func(childComplexity int) int
		StudentID func(childComplexity int) int
		Sum       func(childComplexity int) int
	}

	CartConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CartDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	CartEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CartPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	ClubBalance struct {
		Date       func(childComplexity int) int
		ID         func(childComplexity int) int
		OtherCosts func(childComplexity int) int
		Published  func(childComplexity int) int
		Rent       func(childComplexity int) int
		Salary     func(childComplexity int) int
		Sum        func(childComplexity int) int
		Tickets    func(childComplexity int) int
	}

	ClubBalanceConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ClubBalanceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ClubBalancePayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	CoachPaymentByMonth struct {
		Coach     func(childComplexity int) int
		CoachID   func(childComplexity int) int
		Date      func(childComplexity int) int
		ID        func(childComplexity int) int
		Published func(childComplexity int) int
		Sum       func(childComplexity int) int
	}

	CoachPaymentByMonthConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CoachPaymentByMonthEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CoachPaymentByMonthPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	CoachPaymentByTeam struct {
		Coach       func(childComplexity int) int
		CoachID     func(childComplexity int) int
		DateFinish  func(childComplexity int) int
		DateStart   func(childComplexity int) int
		ID          func(childComplexity int) int
		PaymentRule func(childComplexity int) int
		Published   func(childComplexity int) int
		Sum         func(childComplexity int) int
		Team        func(childComplexity int) int
		TeamID      func(childComplexity int) int
	}

	CoachPaymentByTeamConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CoachPaymentByTeamEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CoachPaymentByTeamPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	CoachPaymentByTraining struct {
		Coach      func(childComplexity int) int
		CoachID    func(childComplexity int) int
		ID         func(childComplexity int) int
		Published  func(childComplexity int) int
		Sum        func(childComplexity int) int
		Training   func(childComplexity int) int
		TrainingID func(childComplexity int) int
	}

	CoachPaymentByTrainingConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CoachPaymentByTrainingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CoachPaymentByTrainingPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Creator struct {
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		PassportNum func(childComplexity int) int
		Phone       func(childComplexity int) int
		Published   func(childComplexity int) int
		User        func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	CreatorConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CreatorDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	CreatorEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CreatorPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Kit struct {
		FileName  func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Number    func(childComplexity int) int
		Price     func(childComplexity int) int
		Published func(childComplexity int) int
		Quantity  func(childComplexity int) int
		Size      func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	KitConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	KitDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	KitEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	KitPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Lead struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		NextVisit   func(childComplexity int) int
		NextVisitID func(childComplexity int) int
		Phone       func(childComplexity int) int
		Published   func(childComplexity int) int
		Source      func(childComplexity int) int
		Status      func(childComplexity int) int
		StudentIds  func(childComplexity int) int
		Students    func(childComplexity int) int
		Team        func(childComplexity int) int
		TeamID      func(childComplexity int) int
		YearBorn    func(childComplexity int) int
	}

	LeadConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	LeadDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	LeadEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LeadPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	MoneyCost struct {
		Date        func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		MoneyForm   func(childComplexity int) int
		Published   func(childComplexity int) int
		Staff       func(childComplexity int) int
		StaffID     func(childComplexity int) int
		Sum         func(childComplexity int) int
	}

	MoneyCostConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MoneyCostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MoneyCostPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	MoneyMove struct {
		DateFinish  func(childComplexity int) int
		DatePayment func(childComplexity int) int
		DateStart   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		MoneyForm   func(childComplexity int) int
		Owner       func(childComplexity int) int
		OwnerID     func(childComplexity int) int
		Published   func(childComplexity int) int
		Student     func(childComplexity int) int
		StudentID   func(childComplexity int) int
		Sum         func(childComplexity int) int
		User        func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	MoneyMoveConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MoneyMoveEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MoneyMovePayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Mutation struct {
		ArticleDelete                       func(childComplexity int, id string) int
		ArticlePublishUpdate                func(childComplexity int, id string) int
		ArticleSave                         func(childComplexity int, articleInput models.ArticleInput) int
		ArticleUpdate                       func(childComplexity int, articleInput models.ArticleInputWithID) int
		CartDelete                          func(childComplexity int, id string) int
		CartPublishUpdate                   func(childComplexity int, id string) int
		CartSave                            func(childComplexity int, cartInput models.CartInput) int
		CartUpdate                          func(childComplexity int, cartInput models.CartInputWithID) int
		ClubBalanceDelete                   func(childComplexity int, id string) int
		ClubBalancePublishUpdate            func(childComplexity int, id string) int
		ClubBalanceSave                     func(childComplexity int, clubBalanceInput models.ClubBalanceInput) int
		ClubBalanceUpdate                   func(childComplexity int, clubBalanceInput models.ClubBalanceInputWithID) int
		CoachPaymentByMonthDelete           func(childComplexity int, id string) int
		CoachPaymentByMonthPublishUpdate    func(childComplexity int, id string) int
		CoachPaymentByMonthSave             func(childComplexity int, coachPaymentByMonthInput models.CoachPaymentByMonthInput) int
		CoachPaymentByMonthUpdate           func(childComplexity int, coachPaymentByMonthInput models.CoachPaymentByMonthInputWithID) int
		CoachPaymentByTeamDelete            func(childComplexity int, id string) int
		CoachPaymentByTeamPublishUpdate     func(childComplexity int, id string) int
		CoachPaymentByTeamSave              func(childComplexity int, coachPaymentByTeamInput models.CoachPaymentByTeamInput) int
		CoachPaymentByTeamUpdate            func(childComplexity int, coachPaymentByTeamInput models.CoachPaymentByTeamInputWithID) int
		CoachPaymentByTrainingDelete        func(childComplexity int, id string) int
		CoachPaymentByTrainingPublishUpdate func(childComplexity int, id string) int
		CoachPaymentByTrainingSave          func(childComplexity int, coachPaymentByTrainingInput models.CoachPaymentByTrainingInput) int
		CoachPaymentByTrainingUpdate        func(childComplexity int, coachPaymentByTrainingInput models.CoachPaymentByTrainingInputWithID) int
		CreatorDelete                       func(childComplexity int, id string) int
		CreatorPublishUpdate                func(childComplexity int, id string) int
		CreatorSave                         func(childComplexity int, creatorInput models.CreatorInput) int
		CreatorUpdate                       func(childComplexity int, creatorInput models.CreatorInputWithID) int
		KitDelete                           func(childComplexity int, id string) int
		KitPublishUpdate                    func(childComplexity int, id string) int
		KitSave                             func(childComplexity int, kitInput models.KitInput) int
		KitUpdate                           func(childComplexity int, kitInput models.KitInputWithID) int
		LeadDelete                          func(childComplexity int, id string) int
		LeadPublishUpdate                   func(childComplexity int, id string) int
		LeadSave                            func(childComplexity int, leadInput models.LeadInput) int
		LeadUpdate                          func(childComplexity int, leadInput models.LeadInputWithID) int
		Login                               func(childComplexity int, input models.LoginInput) int
		MoneyCostDelete                     func(childComplexity int, id string) int
		MoneyCostPublishUpdate              func(childComplexity int, id string) int
		MoneyCostSave                       func(childComplexity int, moneyCostInput models.MoneyCostInput) int
		MoneyCostUpdate                     func(childComplexity int, moneyCostInput models.MoneyCostInputWithID) int
		MoneyMoveDelete                     func(childComplexity int, id string) int
		MoneyMovePublishUpdate              func(childComplexity int, id string) int
		MoneyMoveSave                       func(childComplexity int, moneyMoveInput models.MoneyMoveInput) int
		MoneyMoveUpdate                     func(childComplexity int, moneyMoveInput models.MoneyMoveInputWithID) int
		OrderDelete                         func(childComplexity int, id string) int
		OrderPublishUpdate                  func(childComplexity int, id string) int
		OrderSave                           func(childComplexity int, orderInput models.OrderInput) int
		OrderUpdate                         func(childComplexity int, orderInput models.OrderInputWithID) int
		PlaceDelete                         func(childComplexity int, id string) int
		PlacePublishUpdate                  func(childComplexity int, id string) int
		PlaceSave                           func(childComplexity int, placeInput models.PlaceInput) int
		PlaceUpdate                         func(childComplexity int, placeInput models.PlaceInputWithID) int
		Refresh                             func(childComplexity int, phone string, token string) int
		Register                            func(childComplexity int, input models.RegisterInput) int
		RentPaymentByMonthDelete            func(childComplexity int, id string) int
		RentPaymentByMonthPublishUpdate     func(childComplexity int, id string) int
		RentPaymentByMonthSave              func(childComplexity int, rentPaymentInput models.RentPaymentByMonthInput) int
		RentPaymentByMonthUpdate            func(childComplexity int, rentPaymentInput models.RentPaymentByMonthInputWithID) int
		RentPaymentByTrainingDelete         func(childComplexity int, id string) int
		RentPaymentByTrainingPublishUpdate  func(childComplexity int, id string) int
		RentPaymentByTrainingSave           func(childComplexity int, rentPaymentInput models.RentPaymentByTrainingInput) int
		RentPaymentByTrainingUpdate         func(childComplexity int, rentPaymentInput models.RentPaymentByTrainingInputWithID) int
		StadiumDelete                       func(childComplexity int, id string) int
		StadiumPublishUpdate                func(childComplexity int, id string) int
		StadiumSave                         func(childComplexity int, stadiumInput models.StadiumInput) int
		StadiumUpdate                       func(childComplexity int, stadiumInput models.StadiumInputWithID) int
		StaffDelete                         func(childComplexity int, id string) int
		StaffPublishUpdate                  func(childComplexity int, id string) int
		StaffSave                           func(childComplexity int, staffInput models.StaffInput) int
		StaffUpdate                         func(childComplexity int, staffInput models.StaffInputWithID) int
		StudentDelete                       func(childComplexity int, id string) int
		StudentPublishUpdate                func(childComplexity int, id string) int
		StudentSave                         func(childComplexity int, studentInput models.StudentInput) int
		StudentUpdate                       func(childComplexity int, studentInput models.StudentInputWithID) int
		StudentVisitDelete                  func(childComplexity int, id string) int
		StudentVisitPublishUpdate           func(childComplexity int, id string) int
		StudentVisitSave                    func(childComplexity int, studentVisitInput models.StudentVisitInput) int
		StudentVisitUpdate                  func(childComplexity int, studentVisitInput models.StudentVisitInputWithID) int
		TaskDelete                          func(childComplexity int, id string) int
		TaskPublishUpdate                   func(childComplexity int, id string) int
		TaskSave                            func(childComplexity int, taskInput models.TaskInput) int
		TaskUpdate                          func(childComplexity int, taskInput models.TaskInputWithID) int
		TeamBalanceDelete                   func(childComplexity int, id string) int
		TeamBalancePublishUpdate            func(childComplexity int, id string) int
		TeamBalanceSave                     func(childComplexity int, teamBalanceInput models.TeamBalanceInput) int
		TeamBalanceUpdate                   func(childComplexity int, teamBalanceInput models.TeamBalanceInputWithID) int
		TeamDelete                          func(childComplexity int, id string) int
		TeamPublishUpdate                   func(childComplexity int, id string) int
		TeamSave                            func(childComplexity int, teamInput models.TeamInput) int
		TeamUpdate                          func(childComplexity int, teamInput models.TeamInputWithID) int
		TrainingDayDelete                   func(childComplexity int, id string) int
		TrainingDayPublishUpdate            func(childComplexity int, id string) int
		TrainingDaySave                     func(childComplexity int, trainingDayInput models.TrainingDayInput) int
		TrainingDayUpdate                   func(childComplexity int, trainingDayInput models.TrainingDayInputWithID) int
		TrainingDelete                      func(childComplexity int, id string) int
		TrainingPublishUpdate               func(childComplexity int, id string) int
		TrainingSave                        func(childComplexity int, trainingInput models.TrainingInput) int
		TrainingUpdate                      func(childComplexity int, trainingInput models.TrainingInputWithID) int
		UserDelete                          func(childComplexity int, id string) int
		UserPublishUpdate                   func(childComplexity int, id string) int
		UserSave                            func(childComplexity int, userInput models.UserInput) int
		UserUpdate                          func(childComplexity int, userInput models.UserInputWithID) int
	}

	Order struct {
		Cart        func(childComplexity int) int
		CartID      func(childComplexity int) int
		Creator     func(childComplexity int) int
		CreatorID   func(childComplexity int) int
		FileName    func(childComplexity int) int
		ID          func(childComplexity int) int
		OrderStatus func(childComplexity int) int
		Published   func(childComplexity int) int
	}

	OrderConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	OrderEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrderPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor   func(childComplexity int) int
		HasNextPage func(childComplexity int) int
		StartCursor func(childComplexity int) int
	}

	Place struct {
		Address     func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		OrderNumber func(childComplexity int) int
		Published   func(childComplexity int) int
	}

	PlaceConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	PlaceDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	PlaceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PlacePayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Query struct {
		Article                 func(childComplexity int, id string) int
		Articles                func(childComplexity int, after *string, before *string, filter *models.ArticleFilter, first *int, last *int) int
		Cart                    func(childComplexity int, id string) int
		CartAll                 func(childComplexity int) int
		Carts                   func(childComplexity int, after *string, before *string, filter *models.CartFilter, first *int, last *int) int
		ClubBalance             func(childComplexity int, id string) int
		ClubBalances            func(childComplexity int, after *string, before *string, filter *models.ClubBalanceFilter, first *int, last *int) int
		CoachPaymentByMonth     func(childComplexity int, id string) int
		CoachPaymentByTeam      func(childComplexity int, id string) int
		CoachPaymentByTraining  func(childComplexity int, id string) int
		CoachPaymentsByMonth    func(childComplexity int, after *string, before *string, filter *models.CoachPaymentByMonthFilter, first *int, last *int) int
		CoachPaymentsByTeam     func(childComplexity int, after *string, before *string, filter *models.CoachPaymentByTeamFilter, first *int, last *int) int
		CoachPaymentsByTraining func(childComplexity int, after *string, before *string, filter *models.CoachPaymentByTrainingFilter, first *int, last *int) int
		Creator                 func(childComplexity int, id *string) int
		CreatorAll              func(childComplexity int) int
		Creators                func(childComplexity int, after *string, before *string, filter *models.CreatorFilter, first *int, last *int) int
		CurrentTasks            func(childComplexity int, after *string, before *string, filter *models.TaskFilter, first *int, last *int) int
		Kit                     func(childComplexity int, id string) int
		KitAll                  func(childComplexity int) int
		Kits                    func(childComplexity int, after *string, before *string, filter *models.KitFilter, first *int, last *int) int
		Lead                    func(childComplexity int, id string) int
		LeadAll                 func(childComplexity int) int
		Leads                   func(childComplexity int, after *string, before *string, filter *models.LeadFilter, first *int, last *int) int
		MoneyCost               func(childComplexity int, id string) int
		MoneyCosts              func(childComplexity int, after *string, before *string, filter *models.MoneyCostFilter, first *int, last *int) int
		MoneyMove               func(childComplexity int, id string) int
		MoneyMoves              func(childComplexity int, after *string, before *string, filter *models.MoneyMoveFilter, first *int, last *int) int
		NearestStaffBirthdays   func(childComplexity int, after *string, before *string, filter *models.StaffFilter, first *int, last *int) int
		NearestStudentBirthdays func(childComplexity int, after *string, before *string, filter *models.StudentFilter, first *int, last *int) int
		Order                   func(childComplexity int, id string) int
		Orders                  func(childComplexity int, after *string, before *string, filter *models.OrderFilter, first *int, last *int) int
		Place                   func(childComplexity int, id string) int
		PlaceAll                func(childComplexity int) int
		Places                  func(childComplexity int, after *string, before *string, filter *models.PlaceFilter, first *int, last *int) int
		RentPaymentByMonth      func(childComplexity int, id string) int
		RentPaymentByTraining   func(childComplexity int, id string) int
		RentPaymentsByMonth     func(childComplexity int, after *string, before *string, filter *models.RentPaymentByMonthFilter, first *int, last *int) int
		RentPaymentsByTraining  func(childComplexity int, after *string, before *string, filter *models.RentPaymentByTrainingFilter, first *int, last *int) int
		Stadium                 func(childComplexity int, id string) int
		StadiumAll              func(childComplexity int) int
		Stadiums                func(childComplexity int, after *string, before *string, filter *models.StadiumFilter, first *int, last *int) int
		Staff                   func(childComplexity int, after *string, before *string, filter *models.StaffFilter, first *int, last *int) int
		StaffAll                func(childComplexity int) int
		StaffPerson             func(childComplexity int, id string) int
		Student                 func(childComplexity int, id string) int
		StudentAll              func(childComplexity int) int
		StudentVisit            func(childComplexity int, id string) int
		StudentVisits           func(childComplexity int, after *string, before *string, filter *models.StudentVisitFilter, first *int, last *int) int
		Students                func(childComplexity int, after *string, before *string, filter *models.StudentFilter, first *int, last *int) int
		Task                    func(childComplexity int, id string) int
		Tasks                   func(childComplexity int, after *string, before *string, filter *models.TaskFilter, first *int, last *int) int
		Team                    func(childComplexity int, id string) int
		TeamAll                 func(childComplexity int) int
		TeamBalance             func(childComplexity int, id string) int
		TeamBalances            func(childComplexity int, after *string, before *string, filter *models.TeamBalanceFilter, first *int, last *int) int
		Teams                   func(childComplexity int, after *string, before *string, filter *models.TeamFilter, first *int, last *int) int
		TimeTable               func(childComplexity int, after *string, before *string, filter *models.TrainingFilter, first *int, last *int) int
		Training                func(childComplexity int, id string) int
		TrainingAll             func(childComplexity int) int
		TrainingDay             func(childComplexity int, id string) int
		TrainingDays            func(childComplexity int, after *string, before *string, filter *models.TrainingDayFilter, first *int, last *int) int
		Trainings               func(childComplexity int, after *string, before *string, filter *models.TrainingFilter, first *int, last *int) int
		TrainingsByDay          func(childComplexity int, after *string, before *string, filter *models.TrainingFilter, first *int, last *int) int
		UnPayedStudents         func(childComplexity int, after *string, before *string, filter *models.StudentFilter, first *int, last *int) int
		User                    func(childComplexity int, id string) int
		UserAll                 func(childComplexity int) int
		Users                   func(childComplexity int, after *string, before *string, filter *models.UserFilter, first *int, last *int) int
	}

	RentPaymentByMonth struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Month       func(childComplexity int) int
		PaymentDate func(childComplexity int) int
		Published   func(childComplexity int) int
		Stadium     func(childComplexity int) int
		StadiumID   func(childComplexity int) int
		Sum         func(childComplexity int) int
	}

	RentPaymentByMonthConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RentPaymentByMonthEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RentPaymentByMonthPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	RentPaymentByTraining struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Published   func(childComplexity int) int
		Stadium     func(childComplexity int) int
		StadiumID   func(childComplexity int) int
		Sum         func(childComplexity int) int
		TrainingIds func(childComplexity int) int
		Trainings   func(childComplexity int) int
	}

	RentPaymentByTrainingConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RentPaymentByTrainingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RentPaymentByTrainingPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Stadium struct {
		ID        func(childComplexity int) int
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
		Name      func(childComplexity int) int
		Place     func(childComplexity int) int
		PlaceID   func(childComplexity int) int
		Published func(childComplexity int) int
	}

	StadiumConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	StadiumDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	StadiumEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StadiumPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Staff struct {
		Birthday    func(childComplexity int) int
		Department  func(childComplexity int) int
		Description func(childComplexity int) int
		FileName    func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		OrderNumber func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		Published   func(childComplexity int) int
		User        func(childComplexity int) int
		UserId      func(childComplexity int) int
		Work        func(childComplexity int) int
	}

	StaffConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	StaffDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	StaffEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StaffPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Student struct {
		Birthday    func(childComplexity int) int
		CreatorIds  func(childComplexity int) int
		Creators    func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		PassportNum func(childComplexity int) int
		PaymentSum  func(childComplexity int) int
		Published   func(childComplexity int) int
		TeamIds     func(childComplexity int) int
		Teams       func(childComplexity int) int
	}

	StudentConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	StudentDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	StudentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StudentPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	StudentVisit struct {
		ID          func(childComplexity int) int
		Payed       func(childComplexity int) int
		Published   func(childComplexity int) int
		Student     func(childComplexity int) int
		StudentID   func(childComplexity int) int
		Training    func(childComplexity int) int
		TrainingID  func(childComplexity int) int
		VisitStatus func(childComplexity int) int
	}

	StudentVisitConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	StudentVisitEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	StudentVisitPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Task struct {
		Author      func(childComplexity int) int
		AuthorID    func(childComplexity int) int
		Description func(childComplexity int) int
		EndTime     func(childComplexity int) int
		ID          func(childComplexity int) int
		LeadIds     func(childComplexity int) int
		Leads       func(childComplexity int) int
		Priority    func(childComplexity int) int
		Published   func(childComplexity int) int
		Result      func(childComplexity int) int
		StartTime   func(childComplexity int) int
		StudentIds  func(childComplexity int) int
		Students    func(childComplexity int) int
		TaskStatus  func(childComplexity int) int
		Title       func(childComplexity int) int
		WorkerIds   func(childComplexity int) int
		Workers     func(childComplexity int) int
	}

	TaskConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TaskEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TaskPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Team struct {
		Ages        func(childComplexity int) int
		CoachIds    func(childComplexity int) int
		Coaches     func(childComplexity int) int
		HeadCoach   func(childComplexity int) int
		HeadCoachID func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Place       func(childComplexity int) int
		PlaceID     func(childComplexity int) int
		Published   func(childComplexity int) int
		Writable    func(childComplexity int) int
	}

	TeamBalance struct {
		Date      func(childComplexity int) int
		ID        func(childComplexity int) int
		Published func(childComplexity int) int
		Rent      func(childComplexity int) int
		Salary    func(childComplexity int) int
		Sum       func(childComplexity int) int
		Team      func(childComplexity int) int
		TeamID    func(childComplexity int) int
		Tickets   func(childComplexity int) int
	}

	TeamBalanceConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TeamBalanceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TeamBalancePayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	TeamConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TeamDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	TeamEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TeamPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	Token struct {
		AccessToken  func(childComplexity int) int
		Expiration   func(childComplexity int) int
		RefreshToken func(childComplexity int) int
	}

	Training struct {
		CoachIds    func(childComplexity int) int
		Coaches     func(childComplexity int) int
		HeadCoach   func(childComplexity int) int
		HeadCoachID func(childComplexity int) int
		ID          func(childComplexity int) int
		Published   func(childComplexity int) int
		Stadium     func(childComplexity int) int
		StadiumID   func(childComplexity int) int
		Team        func(childComplexity int) int
		TeamID      func(childComplexity int) int
		Time        func(childComplexity int) int
		Visits      func(childComplexity int) int
	}

	TrainingConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TrainingDay struct {
		Day       func(childComplexity int) int
		ID        func(childComplexity int) int
		Published func(childComplexity int) int
		Stadium   func(childComplexity int) int
		StadiumID func(childComplexity int) int
		Team      func(childComplexity int) int
		TeamID    func(childComplexity int) int
		Time      func(childComplexity int) int
	}

	TrainingDayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TrainingDayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrainingDayPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	TrainingDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	TrainingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TrainingPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}

	User struct {
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
		Phone     func(childComplexity int) int
		Roles     func(childComplexity int) int
	}

	UserConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	UserDto struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserPayload struct {
		Record   func(childComplexity int) int
		RecordID func(childComplexity int) int
	}
}

type ArticleResolver interface {
	Author(ctx context.Context, obj *models.Article) (*models.User, error)
}
type CreatorResolver interface {
	User(ctx context.Context, obj *models.Creator) (*models.User, error)
}
type MoneyCostResolver interface {
	Staff(ctx context.Context, obj *models.MoneyCost) (*models.Staff, error)
}
type MoneyMoveResolver interface {
	Owner(ctx context.Context, obj *models.MoneyMove) (*models.Staff, error)

	Student(ctx context.Context, obj *models.MoneyMove) (*models.Student, error)

	User(ctx context.Context, obj *models.MoneyMove) (*models.User, error)
}
type MutationResolver interface {
	ArticleDelete(ctx context.Context, id string) (*models.ArticlePayload, error)
	ArticlePublishUpdate(ctx context.Context, id string) (*models.ArticlePayload, error)
	ArticleSave(ctx context.Context, articleInput models.ArticleInput) (*models.ArticlePayload, error)
	ArticleUpdate(ctx context.Context, articleInput models.ArticleInputWithID) (*models.ArticlePayload, error)
	CartDelete(ctx context.Context, id string) (*models.CartPayload, error)
	CartPublishUpdate(ctx context.Context, id string) (*models.CartPayload, error)
	CartSave(ctx context.Context, cartInput models.CartInput) (*models.CartPayload, error)
	CartUpdate(ctx context.Context, cartInput models.CartInputWithID) (*models.CartPayload, error)
	ClubBalanceDelete(ctx context.Context, id string) (*models.ClubBalancePayload, error)
	ClubBalancePublishUpdate(ctx context.Context, id string) (*models.ClubBalancePayload, error)
	ClubBalanceSave(ctx context.Context, clubBalanceInput models.ClubBalanceInput) (*models.ClubBalancePayload, error)
	ClubBalanceUpdate(ctx context.Context, clubBalanceInput models.ClubBalanceInputWithID) (*models.ClubBalancePayload, error)
	CoachPaymentByMonthDelete(ctx context.Context, id string) (*models.CoachPaymentByMonthPayload, error)
	CoachPaymentByMonthPublishUpdate(ctx context.Context, id string) (*models.CoachPaymentByMonthPayload, error)
	CoachPaymentByMonthSave(ctx context.Context, coachPaymentByMonthInput models.CoachPaymentByMonthInput) (*models.CoachPaymentByMonthPayload, error)
	CoachPaymentByMonthUpdate(ctx context.Context, coachPaymentByMonthInput models.CoachPaymentByMonthInputWithID) (*models.CoachPaymentByMonthPayload, error)
	CoachPaymentByTeamDelete(ctx context.Context, id string) (*models.CoachPaymentByTeamPayload, error)
	CoachPaymentByTeamPublishUpdate(ctx context.Context, id string) (*models.CoachPaymentByTeamPayload, error)
	CoachPaymentByTeamSave(ctx context.Context, coachPaymentByTeamInput models.CoachPaymentByTeamInput) (*models.CoachPaymentByTeamPayload, error)
	CoachPaymentByTeamUpdate(ctx context.Context, coachPaymentByTeamInput models.CoachPaymentByTeamInputWithID) (*models.CoachPaymentByTeamPayload, error)
	CoachPaymentByTrainingDelete(ctx context.Context, id string) (*models.CoachPaymentByTrainingPayload, error)
	CoachPaymentByTrainingPublishUpdate(ctx context.Context, id string) (*models.CoachPaymentByTrainingPayload, error)
	CoachPaymentByTrainingSave(ctx context.Context, coachPaymentByTrainingInput models.CoachPaymentByTrainingInput) (*models.CoachPaymentByTrainingPayload, error)
	CoachPaymentByTrainingUpdate(ctx context.Context, coachPaymentByTrainingInput models.CoachPaymentByTrainingInputWithID) (*models.CoachPaymentByTrainingPayload, error)
	CreatorDelete(ctx context.Context, id string) (*models.CreatorPayload, error)
	CreatorPublishUpdate(ctx context.Context, id string) (*models.CreatorPayload, error)
	CreatorSave(ctx context.Context, creatorInput models.CreatorInput) (*models.CreatorPayload, error)
	CreatorUpdate(ctx context.Context, creatorInput models.CreatorInputWithID) (*models.CreatorPayload, error)
	KitDelete(ctx context.Context, id string) (*models.KitPayload, error)
	KitPublishUpdate(ctx context.Context, id string) (*models.KitPayload, error)
	KitSave(ctx context.Context, kitInput models.KitInput) (*models.KitPayload, error)
	KitUpdate(ctx context.Context, kitInput models.KitInputWithID) (*models.KitPayload, error)
	LeadDelete(ctx context.Context, id string) (*models.LeadPayload, error)
	LeadPublishUpdate(ctx context.Context, id string) (*models.LeadPayload, error)
	LeadSave(ctx context.Context, leadInput models.LeadInput) (*models.LeadPayload, error)
	LeadUpdate(ctx context.Context, leadInput models.LeadInputWithID) (*models.LeadPayload, error)
	Login(ctx context.Context, input models.LoginInput) (*models.AuthResponse, error)
	MoneyCostDelete(ctx context.Context, id string) (*models.MoneyCostPayload, error)
	MoneyCostPublishUpdate(ctx context.Context, id string) (*models.MoneyCostPayload, error)
	MoneyCostSave(ctx context.Context, moneyCostInput models.MoneyCostInput) (*models.MoneyCostPayload, error)
	MoneyCostUpdate(ctx context.Context, moneyCostInput models.MoneyCostInputWithID) (*models.MoneyCostPayload, error)
	MoneyMoveDelete(ctx context.Context, id string) (*models.MoneyMovePayload, error)
	MoneyMovePublishUpdate(ctx context.Context, id string) (*models.MoneyMovePayload, error)
	MoneyMoveSave(ctx context.Context, moneyMoveInput models.MoneyMoveInput) (*models.MoneyMovePayload, error)
	MoneyMoveUpdate(ctx context.Context, moneyMoveInput models.MoneyMoveInputWithID) (*models.MoneyMovePayload, error)
	OrderDelete(ctx context.Context, id string) (*models.OrderPayload, error)
	OrderPublishUpdate(ctx context.Context, id string) (*models.OrderPayload, error)
	OrderSave(ctx context.Context, orderInput models.OrderInput) (*models.OrderPayload, error)
	OrderUpdate(ctx context.Context, orderInput models.OrderInputWithID) (*models.OrderPayload, error)
	PlaceDelete(ctx context.Context, id string) (*models.PlacePayload, error)
	PlacePublishUpdate(ctx context.Context, id string) (*models.PlacePayload, error)
	PlaceSave(ctx context.Context, placeInput models.PlaceInput) (*models.PlacePayload, error)
	PlaceUpdate(ctx context.Context, placeInput models.PlaceInputWithID) (*models.PlacePayload, error)
	Refresh(ctx context.Context, phone string, token string) (*models.Token, error)
	Register(ctx context.Context, input models.RegisterInput) (*models.AuthResponse, error)
	RentPaymentByMonthDelete(ctx context.Context, id string) (*models.RentPaymentByMonthPayload, error)
	RentPaymentByMonthPublishUpdate(ctx context.Context, id string) (*models.RentPaymentByMonthPayload, error)
	RentPaymentByMonthSave(ctx context.Context, rentPaymentInput models.RentPaymentByMonthInput) (*models.RentPaymentByMonthPayload, error)
	RentPaymentByMonthUpdate(ctx context.Context, rentPaymentInput models.RentPaymentByMonthInputWithID) (*models.RentPaymentByMonthPayload, error)
	RentPaymentByTrainingDelete(ctx context.Context, id string) (*models.RentPaymentByTrainingPayload, error)
	RentPaymentByTrainingPublishUpdate(ctx context.Context, id string) (*models.RentPaymentByTrainingPayload, error)
	RentPaymentByTrainingSave(ctx context.Context, rentPaymentInput models.RentPaymentByTrainingInput) (*models.RentPaymentByTrainingPayload, error)
	RentPaymentByTrainingUpdate(ctx context.Context, rentPaymentInput models.RentPaymentByTrainingInputWithID) (*models.RentPaymentByTrainingPayload, error)
	StadiumDelete(ctx context.Context, id string) (*models.StadiumPayload, error)
	StadiumPublishUpdate(ctx context.Context, id string) (*models.StadiumPayload, error)
	StadiumSave(ctx context.Context, stadiumInput models.StadiumInput) (*models.StadiumPayload, error)
	StadiumUpdate(ctx context.Context, stadiumInput models.StadiumInputWithID) (*models.StadiumPayload, error)
	StaffDelete(ctx context.Context, id string) (*models.StaffPayload, error)
	StaffPublishUpdate(ctx context.Context, id string) (*models.StaffPayload, error)
	StaffSave(ctx context.Context, staffInput models.StaffInput) (*models.StaffPayload, error)
	StaffUpdate(ctx context.Context, staffInput models.StaffInputWithID) (*models.StaffPayload, error)
	StudentDelete(ctx context.Context, id string) (*models.StudentPayload, error)
	StudentPublishUpdate(ctx context.Context, id string) (*models.StudentPayload, error)
	StudentSave(ctx context.Context, studentInput models.StudentInput) (*models.StudentPayload, error)
	StudentUpdate(ctx context.Context, studentInput models.StudentInputWithID) (*models.StudentPayload, error)
	StudentVisitDelete(ctx context.Context, id string) (*models.StudentVisitPayload, error)
	StudentVisitPublishUpdate(ctx context.Context, id string) (*models.StudentVisitPayload, error)
	StudentVisitSave(ctx context.Context, studentVisitInput models.StudentVisitInput) (*models.StudentVisitPayload, error)
	StudentVisitUpdate(ctx context.Context, studentVisitInput models.StudentVisitInputWithID) (*models.StudentVisitPayload, error)
	TaskDelete(ctx context.Context, id string) (*models.TaskPayload, error)
	TaskPublishUpdate(ctx context.Context, id string) (*models.TaskPayload, error)
	TaskSave(ctx context.Context, taskInput models.TaskInput) (*models.TaskPayload, error)
	TaskUpdate(ctx context.Context, taskInput models.TaskInputWithID) (*models.TaskPayload, error)
	TeamBalanceDelete(ctx context.Context, id string) (*models.TeamBalancePayload, error)
	TeamBalancePublishUpdate(ctx context.Context, id string) (*models.TeamBalancePayload, error)
	TeamBalanceSave(ctx context.Context, teamBalanceInput models.TeamBalanceInput) (*models.TeamBalancePayload, error)
	TeamBalanceUpdate(ctx context.Context, teamBalanceInput models.TeamBalanceInputWithID) (*models.TeamBalancePayload, error)
	TeamDelete(ctx context.Context, id string) (*models.TeamPayload, error)
	TeamPublishUpdate(ctx context.Context, id string) (*models.TeamPayload, error)
	TeamSave(ctx context.Context, teamInput models.TeamInput) (*models.TeamPayload, error)
	TeamUpdate(ctx context.Context, teamInput models.TeamInputWithID) (*models.TeamPayload, error)
	TrainingDayDelete(ctx context.Context, id string) (*models.TrainingDayPayload, error)
	TrainingDayPublishUpdate(ctx context.Context, id string) (*models.TrainingDayPayload, error)
	TrainingDaySave(ctx context.Context, trainingDayInput models.TrainingDayInput) (*models.TrainingDayPayload, error)
	TrainingDayUpdate(ctx context.Context, trainingDayInput models.TrainingDayInputWithID) (*models.TrainingDayPayload, error)
	TrainingDelete(ctx context.Context, id string) (*models.TrainingPayload, error)
	TrainingPublishUpdate(ctx context.Context, id string) (*models.TrainingPayload, error)
	TrainingSave(ctx context.Context, trainingInput models.TrainingInput) (*models.TrainingPayload, error)
	TrainingUpdate(ctx context.Context, trainingInput models.TrainingInputWithID) (*models.TrainingPayload, error)
	UserDelete(ctx context.Context, id string) (*models.UserPayload, error)
	UserPublishUpdate(ctx context.Context, id string) (*models.UserPayload, error)
	UserSave(ctx context.Context, userInput models.UserInput) (*models.UserPayload, error)
	UserUpdate(ctx context.Context, userInput models.UserInputWithID) (*models.UserPayload, error)
}
type QueryResolver interface {
	Article(ctx context.Context, id string) (*models.Article, error)
	Articles(ctx context.Context, after *string, before *string, filter *models.ArticleFilter, first *int, last *int) (*models.ArticleConnection, error)
	Cart(ctx context.Context, id string) (*models.Cart, error)
	CartAll(ctx context.Context) ([]*models.CartDto, error)
	Carts(ctx context.Context, after *string, before *string, filter *models.CartFilter, first *int, last *int) (*models.CartConnection, error)
	ClubBalance(ctx context.Context, id string) (*models.ClubBalance, error)
	ClubBalances(ctx context.Context, after *string, before *string, filter *models.ClubBalanceFilter, first *int, last *int) (*models.ClubBalanceConnection, error)
	CoachPaymentByMonth(ctx context.Context, id string) (*models.CoachPaymentByMonth, error)
	CoachPaymentByTeam(ctx context.Context, id string) (*models.CoachPaymentByTeam, error)
	CoachPaymentByTraining(ctx context.Context, id string) (*models.CoachPaymentByTraining, error)
	CoachPaymentsByMonth(ctx context.Context, after *string, before *string, filter *models.CoachPaymentByMonthFilter, first *int, last *int) (*models.CoachPaymentByMonthConnection, error)
	CoachPaymentsByTeam(ctx context.Context, after *string, before *string, filter *models.CoachPaymentByTeamFilter, first *int, last *int) (*models.CoachPaymentByTeamConnection, error)
	CoachPaymentsByTraining(ctx context.Context, after *string, before *string, filter *models.CoachPaymentByTrainingFilter, first *int, last *int) (*models.CoachPaymentByTrainingConnection, error)
	Creator(ctx context.Context, id *string) (*models.Creator, error)
	CreatorAll(ctx context.Context) ([]*models.CreatorDto, error)
	Creators(ctx context.Context, after *string, before *string, filter *models.CreatorFilter, first *int, last *int) (*models.CreatorConnection, error)
	CurrentTasks(ctx context.Context, after *string, before *string, filter *models.TaskFilter, first *int, last *int) (*models.TaskConnection, error)
	Kit(ctx context.Context, id string) (*models.Kit, error)
	KitAll(ctx context.Context) ([]*models.KitDto, error)
	Kits(ctx context.Context, after *string, before *string, filter *models.KitFilter, first *int, last *int) (*models.KitConnection, error)
	Lead(ctx context.Context, id string) (*models.Lead, error)
	LeadAll(ctx context.Context) ([]*models.LeadDto, error)
	Leads(ctx context.Context, after *string, before *string, filter *models.LeadFilter, first *int, last *int) (*models.LeadConnection, error)
	MoneyCost(ctx context.Context, id string) (*models.MoneyCost, error)
	MoneyCosts(ctx context.Context, after *string, before *string, filter *models.MoneyCostFilter, first *int, last *int) (*models.MoneyCostConnection, error)
	MoneyMove(ctx context.Context, id string) (*models.MoneyMove, error)
	MoneyMoves(ctx context.Context, after *string, before *string, filter *models.MoneyMoveFilter, first *int, last *int) (*models.MoneyMoveConnection, error)
	NearestStaffBirthdays(ctx context.Context, after *string, before *string, filter *models.StaffFilter, first *int, last *int) (*models.StaffConnection, error)
	NearestStudentBirthdays(ctx context.Context, after *string, before *string, filter *models.StudentFilter, first *int, last *int) (*models.StudentConnection, error)
	Order(ctx context.Context, id string) (*models.Order, error)
	Orders(ctx context.Context, after *string, before *string, filter *models.OrderFilter, first *int, last *int) (*models.OrderConnection, error)
	Place(ctx context.Context, id string) (*models.Place, error)
	PlaceAll(ctx context.Context) ([]*models.PlaceDto, error)
	Places(ctx context.Context, after *string, before *string, filter *models.PlaceFilter, first *int, last *int) (*models.PlaceConnection, error)
	RentPaymentByMonth(ctx context.Context, id string) (*models.RentPaymentByMonth, error)
	RentPaymentByTraining(ctx context.Context, id string) (*models.RentPaymentByTraining, error)
	RentPaymentsByMonth(ctx context.Context, after *string, before *string, filter *models.RentPaymentByMonthFilter, first *int, last *int) (*models.RentPaymentByMonthConnection, error)
	RentPaymentsByTraining(ctx context.Context, after *string, before *string, filter *models.RentPaymentByTrainingFilter, first *int, last *int) (*models.RentPaymentByTrainingConnection, error)
	Stadium(ctx context.Context, id string) (*models.Stadium, error)
	StadiumAll(ctx context.Context) ([]*models.StadiumDto, error)
	Stadiums(ctx context.Context, after *string, before *string, filter *models.StadiumFilter, first *int, last *int) (*models.StadiumConnection, error)
	Staff(ctx context.Context, after *string, before *string, filter *models.StaffFilter, first *int, last *int) (*models.StaffConnection, error)
	StaffAll(ctx context.Context) ([]*models.StaffDto, error)
	StaffPerson(ctx context.Context, id string) (*models.Staff, error)
	Student(ctx context.Context, id string) (*models.Student, error)
	StudentAll(ctx context.Context) ([]*models.StudentDto, error)
	StudentVisit(ctx context.Context, id string) (*models.StudentVisit, error)
	StudentVisits(ctx context.Context, after *string, before *string, filter *models.StudentVisitFilter, first *int, last *int) (*models.StudentVisitConnection, error)
	Students(ctx context.Context, after *string, before *string, filter *models.StudentFilter, first *int, last *int) (*models.StudentConnection, error)
	Task(ctx context.Context, id string) (*models.Task, error)
	Tasks(ctx context.Context, after *string, before *string, filter *models.TaskFilter, first *int, last *int) (*models.TaskConnection, error)
	Team(ctx context.Context, id string) (*models.Team, error)
	TeamAll(ctx context.Context) ([]*models.TeamDto, error)
	TeamBalance(ctx context.Context, id string) (*models.TeamBalance, error)
	TeamBalances(ctx context.Context, after *string, before *string, filter *models.TeamBalanceFilter, first *int, last *int) (*models.TeamBalanceConnection, error)
	Teams(ctx context.Context, after *string, before *string, filter *models.TeamFilter, first *int, last *int) (*models.TeamConnection, error)
	TimeTable(ctx context.Context, after *string, before *string, filter *models.TrainingFilter, first *int, last *int) (*models.TrainingConnection, error)
	Training(ctx context.Context, id string) (*models.Training, error)
	TrainingAll(ctx context.Context) ([]*models.TrainingDto, error)
	TrainingDay(ctx context.Context, id string) (*models.TrainingDay, error)
	TrainingDays(ctx context.Context, after *string, before *string, filter *models.TrainingDayFilter, first *int, last *int) (*models.TrainingDayConnection, error)
	Trainings(ctx context.Context, after *string, before *string, filter *models.TrainingFilter, first *int, last *int) (*models.TrainingConnection, error)
	TrainingsByDay(ctx context.Context, after *string, before *string, filter *models.TrainingFilter, first *int, last *int) (*models.TrainingConnection, error)
	UnPayedStudents(ctx context.Context, after *string, before *string, filter *models.StudentFilter, first *int, last *int) (*models.StudentConnection, error)
	User(ctx context.Context, id string) (*models.User, error)
	UserAll(ctx context.Context) ([]*models.UserDto, error)
	Users(ctx context.Context, after *string, before *string, filter *models.UserFilter, first *int, last *int) (*models.UserConnection, error)
}
type StadiumResolver interface {
	Place(ctx context.Context, obj *models.Stadium) (*models.Place, error)
}
type StaffResolver interface {
	User(ctx context.Context, obj *models.Staff) (*models.User, error)
}
type StudentResolver interface {
	Creators(ctx context.Context, obj *models.Student) ([]*models.Creator, error)

	Teams(ctx context.Context, obj *models.Student) ([]*models.Team, error)
}
type StudentVisitResolver interface {
	Student(ctx context.Context, obj *models.StudentVisit) (*models.Student, error)

	Training(ctx context.Context, obj *models.StudentVisit) (*models.Training, error)
}
type TeamResolver interface {
	Coaches(ctx context.Context, obj *models.Team) ([]*models.Staff, error)
	HeadCoach(ctx context.Context, obj *models.Team) (*models.Staff, error)

	Place(ctx context.Context, obj *models.Team) (*models.Place, error)
}
type TrainingResolver interface {
	Coaches(ctx context.Context, obj *models.Training) ([]*models.Staff, error)
	HeadCoach(ctx context.Context, obj *models.Training) (*models.Staff, error)

	Stadium(ctx context.Context, obj *models.Training) (*models.Stadium, error)

	Team(ctx context.Context, obj *models.Training) (*models.Team, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Article.author":
		if e.complexity.Article.Author == nil {
			break
		}

		return e.complexity.Article.Author(childComplexity), true

	case "Article.authorId":
		if e.complexity.Article.AuthorID == nil {
			break
		}

		return e.complexity.Article.AuthorID(childComplexity), true

	case "Article.description":
		if e.complexity.Article.Description == nil {
			break
		}

		return e.complexity.Article.Description(childComplexity), true

	case "Article.fileName":
		if e.complexity.Article.FileName == nil {
			break
		}

		return e.complexity.Article.FileName(childComplexity), true

	case "Article.id":
		if e.complexity.Article.ID == nil {
			break
		}

		return e.complexity.Article.ID(childComplexity), true

	case "Article.published":
		if e.complexity.Article.Published == nil {
			break
		}

		return e.complexity.Article.Published(childComplexity), true

	case "Article.tags":
		if e.complexity.Article.Tags == nil {
			break
		}

		return e.complexity.Article.Tags(childComplexity), true

	case "Article.title":
		if e.complexity.Article.Title == nil {
			break
		}

		return e.complexity.Article.Title(childComplexity), true

	case "ArticleConnection.edges":
		if e.complexity.ArticleConnection.Edges == nil {
			break
		}

		return e.complexity.ArticleConnection.Edges(childComplexity), true

	case "ArticleConnection.pageInfo":
		if e.complexity.ArticleConnection.PageInfo == nil {
			break
		}

		return e.complexity.ArticleConnection.PageInfo(childComplexity), true

	case "ArticleEdge.cursor":
		if e.complexity.ArticleEdge.Cursor == nil {
			break
		}

		return e.complexity.ArticleEdge.Cursor(childComplexity), true

	case "ArticleEdge.node":
		if e.complexity.ArticleEdge.Node == nil {
			break
		}

		return e.complexity.ArticleEdge.Node(childComplexity), true

	case "ArticlePayload.record":
		if e.complexity.ArticlePayload.Record == nil {
			break
		}

		return e.complexity.ArticlePayload.Record(childComplexity), true

	case "ArticlePayload.recordId":
		if e.complexity.ArticlePayload.RecordID == nil {
			break
		}

		return e.complexity.ArticlePayload.RecordID(childComplexity), true

	case "AuthResponse.authToken":
		if e.complexity.AuthResponse.AuthToken == nil {
			break
		}

		return e.complexity.AuthResponse.AuthToken(childComplexity), true

	case "AuthResponse.user":
		if e.complexity.AuthResponse.User == nil {
			break
		}

		return e.complexity.AuthResponse.User(childComplexity), true

	case "AuthToken.accessToken":
		if e.complexity.AuthToken.AccessToken == nil {
			break
		}

		return e.complexity.AuthToken.AccessToken(childComplexity), true

	case "AuthToken.expiredAt":
		if e.complexity.AuthToken.ExpiredAt == nil {
			break
		}

		return e.complexity.AuthToken.ExpiredAt(childComplexity), true

	case "Cart.id":
		if e.complexity.Cart.ID == nil {
			break
		}

		return e.complexity.Cart.ID(childComplexity), true

	case "Cart.kitIds":
		if e.complexity.Cart.KitIds == nil {
			break
		}

		return e.complexity.Cart.KitIds(childComplexity), true

	case "Cart.published":
		if e.complexity.Cart.Published == nil {
			break
		}

		return e.complexity.Cart.Published(childComplexity), true

	case "Cart.student":
		if e.complexity.Cart.Student == nil {
			break
		}

		return e.complexity.Cart.Student(childComplexity), true

	case "Cart.studentId":
		if e.complexity.Cart.StudentID == nil {
			break
		}

		return e.complexity.Cart.StudentID(childComplexity), true

	case "Cart.sum":
		if e.complexity.Cart.Sum == nil {
			break
		}

		return e.complexity.Cart.Sum(childComplexity), true

	case "CartConnection.edges":
		if e.complexity.CartConnection.Edges == nil {
			break
		}

		return e.complexity.CartConnection.Edges(childComplexity), true

	case "CartConnection.pageInfo":
		if e.complexity.CartConnection.PageInfo == nil {
			break
		}

		return e.complexity.CartConnection.PageInfo(childComplexity), true

	case "CartDto.id":
		if e.complexity.CartDto.ID == nil {
			break
		}

		return e.complexity.CartDto.ID(childComplexity), true

	case "CartDto.name":
		if e.complexity.CartDto.Name == nil {
			break
		}

		return e.complexity.CartDto.Name(childComplexity), true

	case "CartEdge.cursor":
		if e.complexity.CartEdge.Cursor == nil {
			break
		}

		return e.complexity.CartEdge.Cursor(childComplexity), true

	case "CartEdge.node":
		if e.complexity.CartEdge.Node == nil {
			break
		}

		return e.complexity.CartEdge.Node(childComplexity), true

	case "CartPayload.record":
		if e.complexity.CartPayload.Record == nil {
			break
		}

		return e.complexity.CartPayload.Record(childComplexity), true

	case "CartPayload.recordId":
		if e.complexity.CartPayload.RecordID == nil {
			break
		}

		return e.complexity.CartPayload.RecordID(childComplexity), true

	case "ClubBalance.date":
		if e.complexity.ClubBalance.Date == nil {
			break
		}

		return e.complexity.ClubBalance.Date(childComplexity), true

	case "ClubBalance.id":
		if e.complexity.ClubBalance.ID == nil {
			break
		}

		return e.complexity.ClubBalance.ID(childComplexity), true

	case "ClubBalance.otherCosts":
		if e.complexity.ClubBalance.OtherCosts == nil {
			break
		}

		return e.complexity.ClubBalance.OtherCosts(childComplexity), true

	case "ClubBalance.published":
		if e.complexity.ClubBalance.Published == nil {
			break
		}

		return e.complexity.ClubBalance.Published(childComplexity), true

	case "ClubBalance.rent":
		if e.complexity.ClubBalance.Rent == nil {
			break
		}

		return e.complexity.ClubBalance.Rent(childComplexity), true

	case "ClubBalance.salary":
		if e.complexity.ClubBalance.Salary == nil {
			break
		}

		return e.complexity.ClubBalance.Salary(childComplexity), true

	case "ClubBalance.sum":
		if e.complexity.ClubBalance.Sum == nil {
			break
		}

		return e.complexity.ClubBalance.Sum(childComplexity), true

	case "ClubBalance.tickets":
		if e.complexity.ClubBalance.Tickets == nil {
			break
		}

		return e.complexity.ClubBalance.Tickets(childComplexity), true

	case "ClubBalanceConnection.edges":
		if e.complexity.ClubBalanceConnection.Edges == nil {
			break
		}

		return e.complexity.ClubBalanceConnection.Edges(childComplexity), true

	case "ClubBalanceConnection.pageInfo":
		if e.complexity.ClubBalanceConnection.PageInfo == nil {
			break
		}

		return e.complexity.ClubBalanceConnection.PageInfo(childComplexity), true

	case "ClubBalanceEdge.cursor":
		if e.complexity.ClubBalanceEdge.Cursor == nil {
			break
		}

		return e.complexity.ClubBalanceEdge.Cursor(childComplexity), true

	case "ClubBalanceEdge.node":
		if e.complexity.ClubBalanceEdge.Node == nil {
			break
		}

		return e.complexity.ClubBalanceEdge.Node(childComplexity), true

	case "ClubBalancePayload.record":
		if e.complexity.ClubBalancePayload.Record == nil {
			break
		}

		return e.complexity.ClubBalancePayload.Record(childComplexity), true

	case "ClubBalancePayload.recordId":
		if e.complexity.ClubBalancePayload.RecordID == nil {
			break
		}

		return e.complexity.ClubBalancePayload.RecordID(childComplexity), true

	case "CoachPaymentByMonth.coach":
		if e.complexity.CoachPaymentByMonth.Coach == nil {
			break
		}

		return e.complexity.CoachPaymentByMonth.Coach(childComplexity), true

	case "CoachPaymentByMonth.coachId":
		if e.complexity.CoachPaymentByMonth.CoachID == nil {
			break
		}

		return e.complexity.CoachPaymentByMonth.CoachID(childComplexity), true

	case "CoachPaymentByMonth.date":
		if e.complexity.CoachPaymentByMonth.Date == nil {
			break
		}

		return e.complexity.CoachPaymentByMonth.Date(childComplexity), true

	case "CoachPaymentByMonth.id":
		if e.complexity.CoachPaymentByMonth.ID == nil {
			break
		}

		return e.complexity.CoachPaymentByMonth.ID(childComplexity), true

	case "CoachPaymentByMonth.published":
		if e.complexity.CoachPaymentByMonth.Published == nil {
			break
		}

		return e.complexity.CoachPaymentByMonth.Published(childComplexity), true

	case "CoachPaymentByMonth.sum":
		if e.complexity.CoachPaymentByMonth.Sum == nil {
			break
		}

		return e.complexity.CoachPaymentByMonth.Sum(childComplexity), true

	case "CoachPaymentByMonthConnection.edges":
		if e.complexity.CoachPaymentByMonthConnection.Edges == nil {
			break
		}

		return e.complexity.CoachPaymentByMonthConnection.Edges(childComplexity), true

	case "CoachPaymentByMonthConnection.pageInfo":
		if e.complexity.CoachPaymentByMonthConnection.PageInfo == nil {
			break
		}

		return e.complexity.CoachPaymentByMonthConnection.PageInfo(childComplexity), true

	case "CoachPaymentByMonthEdge.cursor":
		if e.complexity.CoachPaymentByMonthEdge.Cursor == nil {
			break
		}

		return e.complexity.CoachPaymentByMonthEdge.Cursor(childComplexity), true

	case "CoachPaymentByMonthEdge.node":
		if e.complexity.CoachPaymentByMonthEdge.Node == nil {
			break
		}

		return e.complexity.CoachPaymentByMonthEdge.Node(childComplexity), true

	case "CoachPaymentByMonthPayload.record":
		if e.complexity.CoachPaymentByMonthPayload.Record == nil {
			break
		}

		return e.complexity.CoachPaymentByMonthPayload.Record(childComplexity), true

	case "CoachPaymentByMonthPayload.recordId":
		if e.complexity.CoachPaymentByMonthPayload.RecordID == nil {
			break
		}

		return e.complexity.CoachPaymentByMonthPayload.RecordID(childComplexity), true

	case "CoachPaymentByTeam.coach":
		if e.complexity.CoachPaymentByTeam.Coach == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.Coach(childComplexity), true

	case "CoachPaymentByTeam.coachId":
		if e.complexity.CoachPaymentByTeam.CoachID == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.CoachID(childComplexity), true

	case "CoachPaymentByTeam.dateFinish":
		if e.complexity.CoachPaymentByTeam.DateFinish == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.DateFinish(childComplexity), true

	case "CoachPaymentByTeam.dateStart":
		if e.complexity.CoachPaymentByTeam.DateStart == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.DateStart(childComplexity), true

	case "CoachPaymentByTeam.id":
		if e.complexity.CoachPaymentByTeam.ID == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.ID(childComplexity), true

	case "CoachPaymentByTeam.paymentRule":
		if e.complexity.CoachPaymentByTeam.PaymentRule == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.PaymentRule(childComplexity), true

	case "CoachPaymentByTeam.published":
		if e.complexity.CoachPaymentByTeam.Published == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.Published(childComplexity), true

	case "CoachPaymentByTeam.sum":
		if e.complexity.CoachPaymentByTeam.Sum == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.Sum(childComplexity), true

	case "CoachPaymentByTeam.team":
		if e.complexity.CoachPaymentByTeam.Team == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.Team(childComplexity), true

	case "CoachPaymentByTeam.teamId":
		if e.complexity.CoachPaymentByTeam.TeamID == nil {
			break
		}

		return e.complexity.CoachPaymentByTeam.TeamID(childComplexity), true

	case "CoachPaymentByTeamConnection.edges":
		if e.complexity.CoachPaymentByTeamConnection.Edges == nil {
			break
		}

		return e.complexity.CoachPaymentByTeamConnection.Edges(childComplexity), true

	case "CoachPaymentByTeamConnection.pageInfo":
		if e.complexity.CoachPaymentByTeamConnection.PageInfo == nil {
			break
		}

		return e.complexity.CoachPaymentByTeamConnection.PageInfo(childComplexity), true

	case "CoachPaymentByTeamEdge.cursor":
		if e.complexity.CoachPaymentByTeamEdge.Cursor == nil {
			break
		}

		return e.complexity.CoachPaymentByTeamEdge.Cursor(childComplexity), true

	case "CoachPaymentByTeamEdge.node":
		if e.complexity.CoachPaymentByTeamEdge.Node == nil {
			break
		}

		return e.complexity.CoachPaymentByTeamEdge.Node(childComplexity), true

	case "CoachPaymentByTeamPayload.record":
		if e.complexity.CoachPaymentByTeamPayload.Record == nil {
			break
		}

		return e.complexity.CoachPaymentByTeamPayload.Record(childComplexity), true

	case "CoachPaymentByTeamPayload.recordId":
		if e.complexity.CoachPaymentByTeamPayload.RecordID == nil {
			break
		}

		return e.complexity.CoachPaymentByTeamPayload.RecordID(childComplexity), true

	case "CoachPaymentByTraining.coach":
		if e.complexity.CoachPaymentByTraining.Coach == nil {
			break
		}

		return e.complexity.CoachPaymentByTraining.Coach(childComplexity), true

	case "CoachPaymentByTraining.coachId":
		if e.complexity.CoachPaymentByTraining.CoachID == nil {
			break
		}

		return e.complexity.CoachPaymentByTraining.CoachID(childComplexity), true

	case "CoachPaymentByTraining.id":
		if e.complexity.CoachPaymentByTraining.ID == nil {
			break
		}

		return e.complexity.CoachPaymentByTraining.ID(childComplexity), true

	case "CoachPaymentByTraining.published":
		if e.complexity.CoachPaymentByTraining.Published == nil {
			break
		}

		return e.complexity.CoachPaymentByTraining.Published(childComplexity), true

	case "CoachPaymentByTraining.sum":
		if e.complexity.CoachPaymentByTraining.Sum == nil {
			break
		}

		return e.complexity.CoachPaymentByTraining.Sum(childComplexity), true

	case "CoachPaymentByTraining.training":
		if e.complexity.CoachPaymentByTraining.Training == nil {
			break
		}

		return e.complexity.CoachPaymentByTraining.Training(childComplexity), true

	case "CoachPaymentByTraining.trainingId":
		if e.complexity.CoachPaymentByTraining.TrainingID == nil {
			break
		}

		return e.complexity.CoachPaymentByTraining.TrainingID(childComplexity), true

	case "CoachPaymentByTrainingConnection.edges":
		if e.complexity.CoachPaymentByTrainingConnection.Edges == nil {
			break
		}

		return e.complexity.CoachPaymentByTrainingConnection.Edges(childComplexity), true

	case "CoachPaymentByTrainingConnection.pageInfo":
		if e.complexity.CoachPaymentByTrainingConnection.PageInfo == nil {
			break
		}

		return e.complexity.CoachPaymentByTrainingConnection.PageInfo(childComplexity), true

	case "CoachPaymentByTrainingEdge.cursor":
		if e.complexity.CoachPaymentByTrainingEdge.Cursor == nil {
			break
		}

		return e.complexity.CoachPaymentByTrainingEdge.Cursor(childComplexity), true

	case "CoachPaymentByTrainingEdge.node":
		if e.complexity.CoachPaymentByTrainingEdge.Node == nil {
			break
		}

		return e.complexity.CoachPaymentByTrainingEdge.Node(childComplexity), true

	case "CoachPaymentByTrainingPayload.record":
		if e.complexity.CoachPaymentByTrainingPayload.Record == nil {
			break
		}

		return e.complexity.CoachPaymentByTrainingPayload.Record(childComplexity), true

	case "CoachPaymentByTrainingPayload.recordId":
		if e.complexity.CoachPaymentByTrainingPayload.RecordID == nil {
			break
		}

		return e.complexity.CoachPaymentByTrainingPayload.RecordID(childComplexity), true

	case "Creator.id":
		if e.complexity.Creator.ID == nil {
			break
		}

		return e.complexity.Creator.ID(childComplexity), true

	case "Creator.name":
		if e.complexity.Creator.Name == nil {
			break
		}

		return e.complexity.Creator.Name(childComplexity), true

	case "Creator.passportNum":
		if e.complexity.Creator.PassportNum == nil {
			break
		}

		return e.complexity.Creator.PassportNum(childComplexity), true

	case "Creator.phone":
		if e.complexity.Creator.Phone == nil {
			break
		}

		return e.complexity.Creator.Phone(childComplexity), true

	case "Creator.published":
		if e.complexity.Creator.Published == nil {
			break
		}

		return e.complexity.Creator.Published(childComplexity), true

	case "Creator.user":
		if e.complexity.Creator.User == nil {
			break
		}

		return e.complexity.Creator.User(childComplexity), true

	case "Creator.userId":
		if e.complexity.Creator.UserID == nil {
			break
		}

		return e.complexity.Creator.UserID(childComplexity), true

	case "CreatorConnection.edges":
		if e.complexity.CreatorConnection.Edges == nil {
			break
		}

		return e.complexity.CreatorConnection.Edges(childComplexity), true

	case "CreatorConnection.pageInfo":
		if e.complexity.CreatorConnection.PageInfo == nil {
			break
		}

		return e.complexity.CreatorConnection.PageInfo(childComplexity), true

	case "CreatorDto.id":
		if e.complexity.CreatorDto.ID == nil {
			break
		}

		return e.complexity.CreatorDto.ID(childComplexity), true

	case "CreatorDto.name":
		if e.complexity.CreatorDto.Name == nil {
			break
		}

		return e.complexity.CreatorDto.Name(childComplexity), true

	case "CreatorEdge.cursor":
		if e.complexity.CreatorEdge.Cursor == nil {
			break
		}

		return e.complexity.CreatorEdge.Cursor(childComplexity), true

	case "CreatorEdge.node":
		if e.complexity.CreatorEdge.Node == nil {
			break
		}

		return e.complexity.CreatorEdge.Node(childComplexity), true

	case "CreatorPayload.record":
		if e.complexity.CreatorPayload.Record == nil {
			break
		}

		return e.complexity.CreatorPayload.Record(childComplexity), true

	case "CreatorPayload.recordId":
		if e.complexity.CreatorPayload.RecordID == nil {
			break
		}

		return e.complexity.CreatorPayload.RecordID(childComplexity), true

	case "Kit.fileName":
		if e.complexity.Kit.FileName == nil {
			break
		}

		return e.complexity.Kit.FileName(childComplexity), true

	case "Kit.id":
		if e.complexity.Kit.ID == nil {
			break
		}

		return e.complexity.Kit.ID(childComplexity), true

	case "Kit.name":
		if e.complexity.Kit.Name == nil {
			break
		}

		return e.complexity.Kit.Name(childComplexity), true

	case "Kit.number":
		if e.complexity.Kit.Number == nil {
			break
		}

		return e.complexity.Kit.Number(childComplexity), true

	case "Kit.price":
		if e.complexity.Kit.Price == nil {
			break
		}

		return e.complexity.Kit.Price(childComplexity), true

	case "Kit.published":
		if e.complexity.Kit.Published == nil {
			break
		}

		return e.complexity.Kit.Published(childComplexity), true

	case "Kit.quantity":
		if e.complexity.Kit.Quantity == nil {
			break
		}

		return e.complexity.Kit.Quantity(childComplexity), true

	case "Kit.size":
		if e.complexity.Kit.Size == nil {
			break
		}

		return e.complexity.Kit.Size(childComplexity), true

	case "Kit.title":
		if e.complexity.Kit.Title == nil {
			break
		}

		return e.complexity.Kit.Title(childComplexity), true

	case "KitConnection.edges":
		if e.complexity.KitConnection.Edges == nil {
			break
		}

		return e.complexity.KitConnection.Edges(childComplexity), true

	case "KitConnection.pageInfo":
		if e.complexity.KitConnection.PageInfo == nil {
			break
		}

		return e.complexity.KitConnection.PageInfo(childComplexity), true

	case "KitDto.id":
		if e.complexity.KitDto.ID == nil {
			break
		}

		return e.complexity.KitDto.ID(childComplexity), true

	case "KitDto.name":
		if e.complexity.KitDto.Name == nil {
			break
		}

		return e.complexity.KitDto.Name(childComplexity), true

	case "KitEdge.cursor":
		if e.complexity.KitEdge.Cursor == nil {
			break
		}

		return e.complexity.KitEdge.Cursor(childComplexity), true

	case "KitEdge.node":
		if e.complexity.KitEdge.Node == nil {
			break
		}

		return e.complexity.KitEdge.Node(childComplexity), true

	case "KitPayload.record":
		if e.complexity.KitPayload.Record == nil {
			break
		}

		return e.complexity.KitPayload.Record(childComplexity), true

	case "KitPayload.recordId":
		if e.complexity.KitPayload.RecordID == nil {
			break
		}

		return e.complexity.KitPayload.RecordID(childComplexity), true

	case "Lead.description":
		if e.complexity.Lead.Description == nil {
			break
		}

		return e.complexity.Lead.Description(childComplexity), true

	case "Lead.id":
		if e.complexity.Lead.ID == nil {
			break
		}

		return e.complexity.Lead.ID(childComplexity), true

	case "Lead.name":
		if e.complexity.Lead.Name == nil {
			break
		}

		return e.complexity.Lead.Name(childComplexity), true

	case "Lead.nextVisit":
		if e.complexity.Lead.NextVisit == nil {
			break
		}

		return e.complexity.Lead.NextVisit(childComplexity), true

	case "Lead.nextVisitId":
		if e.complexity.Lead.NextVisitID == nil {
			break
		}

		return e.complexity.Lead.NextVisitID(childComplexity), true

	case "Lead.phone":
		if e.complexity.Lead.Phone == nil {
			break
		}

		return e.complexity.Lead.Phone(childComplexity), true

	case "Lead.published":
		if e.complexity.Lead.Published == nil {
			break
		}

		return e.complexity.Lead.Published(childComplexity), true

	case "Lead.source":
		if e.complexity.Lead.Source == nil {
			break
		}

		return e.complexity.Lead.Source(childComplexity), true

	case "Lead.status":
		if e.complexity.Lead.Status == nil {
			break
		}

		return e.complexity.Lead.Status(childComplexity), true

	case "Lead.studentIds":
		if e.complexity.Lead.StudentIds == nil {
			break
		}

		return e.complexity.Lead.StudentIds(childComplexity), true

	case "Lead.students":
		if e.complexity.Lead.Students == nil {
			break
		}

		return e.complexity.Lead.Students(childComplexity), true

	case "Lead.team":
		if e.complexity.Lead.Team == nil {
			break
		}

		return e.complexity.Lead.Team(childComplexity), true

	case "Lead.teamId":
		if e.complexity.Lead.TeamID == nil {
			break
		}

		return e.complexity.Lead.TeamID(childComplexity), true

	case "Lead.yearBorn":
		if e.complexity.Lead.YearBorn == nil {
			break
		}

		return e.complexity.Lead.YearBorn(childComplexity), true

	case "LeadConnection.edges":
		if e.complexity.LeadConnection.Edges == nil {
			break
		}

		return e.complexity.LeadConnection.Edges(childComplexity), true

	case "LeadConnection.pageInfo":
		if e.complexity.LeadConnection.PageInfo == nil {
			break
		}

		return e.complexity.LeadConnection.PageInfo(childComplexity), true

	case "LeadDto.id":
		if e.complexity.LeadDto.ID == nil {
			break
		}

		return e.complexity.LeadDto.ID(childComplexity), true

	case "LeadDto.name":
		if e.complexity.LeadDto.Name == nil {
			break
		}

		return e.complexity.LeadDto.Name(childComplexity), true

	case "LeadEdge.cursor":
		if e.complexity.LeadEdge.Cursor == nil {
			break
		}

		return e.complexity.LeadEdge.Cursor(childComplexity), true

	case "LeadEdge.node":
		if e.complexity.LeadEdge.Node == nil {
			break
		}

		return e.complexity.LeadEdge.Node(childComplexity), true

	case "LeadPayload.record":
		if e.complexity.LeadPayload.Record == nil {
			break
		}

		return e.complexity.LeadPayload.Record(childComplexity), true

	case "LeadPayload.recordId":
		if e.complexity.LeadPayload.RecordID == nil {
			break
		}

		return e.complexity.LeadPayload.RecordID(childComplexity), true

	case "MoneyCost.date":
		if e.complexity.MoneyCost.Date == nil {
			break
		}

		return e.complexity.MoneyCost.Date(childComplexity), true

	case "MoneyCost.description":
		if e.complexity.MoneyCost.Description == nil {
			break
		}

		return e.complexity.MoneyCost.Description(childComplexity), true

	case "MoneyCost.id":
		if e.complexity.MoneyCost.ID == nil {
			break
		}

		return e.complexity.MoneyCost.ID(childComplexity), true

	case "MoneyCost.moneyForm":
		if e.complexity.MoneyCost.MoneyForm == nil {
			break
		}

		return e.complexity.MoneyCost.MoneyForm(childComplexity), true

	case "MoneyCost.published":
		if e.complexity.MoneyCost.Published == nil {
			break
		}

		return e.complexity.MoneyCost.Published(childComplexity), true

	case "MoneyCost.staff":
		if e.complexity.MoneyCost.Staff == nil {
			break
		}

		return e.complexity.MoneyCost.Staff(childComplexity), true

	case "MoneyCost.staffId":
		if e.complexity.MoneyCost.StaffID == nil {
			break
		}

		return e.complexity.MoneyCost.StaffID(childComplexity), true

	case "MoneyCost.sum":
		if e.complexity.MoneyCost.Sum == nil {
			break
		}

		return e.complexity.MoneyCost.Sum(childComplexity), true

	case "MoneyCostConnection.edges":
		if e.complexity.MoneyCostConnection.Edges == nil {
			break
		}

		return e.complexity.MoneyCostConnection.Edges(childComplexity), true

	case "MoneyCostConnection.pageInfo":
		if e.complexity.MoneyCostConnection.PageInfo == nil {
			break
		}

		return e.complexity.MoneyCostConnection.PageInfo(childComplexity), true

	case "MoneyCostEdge.cursor":
		if e.complexity.MoneyCostEdge.Cursor == nil {
			break
		}

		return e.complexity.MoneyCostEdge.Cursor(childComplexity), true

	case "MoneyCostEdge.node":
		if e.complexity.MoneyCostEdge.Node == nil {
			break
		}

		return e.complexity.MoneyCostEdge.Node(childComplexity), true

	case "MoneyCostPayload.record":
		if e.complexity.MoneyCostPayload.Record == nil {
			break
		}

		return e.complexity.MoneyCostPayload.Record(childComplexity), true

	case "MoneyCostPayload.recordId":
		if e.complexity.MoneyCostPayload.RecordID == nil {
			break
		}

		return e.complexity.MoneyCostPayload.RecordID(childComplexity), true

	case "MoneyMove.dateFinish":
		if e.complexity.MoneyMove.DateFinish == nil {
			break
		}

		return e.complexity.MoneyMove.DateFinish(childComplexity), true

	case "MoneyMove.datePayment":
		if e.complexity.MoneyMove.DatePayment == nil {
			break
		}

		return e.complexity.MoneyMove.DatePayment(childComplexity), true

	case "MoneyMove.dateStart":
		if e.complexity.MoneyMove.DateStart == nil {
			break
		}

		return e.complexity.MoneyMove.DateStart(childComplexity), true

	case "MoneyMove.description":
		if e.complexity.MoneyMove.Description == nil {
			break
		}

		return e.complexity.MoneyMove.Description(childComplexity), true

	case "MoneyMove.id":
		if e.complexity.MoneyMove.ID == nil {
			break
		}

		return e.complexity.MoneyMove.ID(childComplexity), true

	case "MoneyMove.moneyForm":
		if e.complexity.MoneyMove.MoneyForm == nil {
			break
		}

		return e.complexity.MoneyMove.MoneyForm(childComplexity), true

	case "MoneyMove.owner":
		if e.complexity.MoneyMove.Owner == nil {
			break
		}

		return e.complexity.MoneyMove.Owner(childComplexity), true

	case "MoneyMove.ownerId":
		if e.complexity.MoneyMove.OwnerID == nil {
			break
		}

		return e.complexity.MoneyMove.OwnerID(childComplexity), true

	case "MoneyMove.published":
		if e.complexity.MoneyMove.Published == nil {
			break
		}

		return e.complexity.MoneyMove.Published(childComplexity), true

	case "MoneyMove.student":
		if e.complexity.MoneyMove.Student == nil {
			break
		}

		return e.complexity.MoneyMove.Student(childComplexity), true

	case "MoneyMove.studentId":
		if e.complexity.MoneyMove.StudentID == nil {
			break
		}

		return e.complexity.MoneyMove.StudentID(childComplexity), true

	case "MoneyMove.sum":
		if e.complexity.MoneyMove.Sum == nil {
			break
		}

		return e.complexity.MoneyMove.Sum(childComplexity), true

	case "MoneyMove.user":
		if e.complexity.MoneyMove.User == nil {
			break
		}

		return e.complexity.MoneyMove.User(childComplexity), true

	case "MoneyMove.userId":
		if e.complexity.MoneyMove.UserID == nil {
			break
		}

		return e.complexity.MoneyMove.UserID(childComplexity), true

	case "MoneyMoveConnection.edges":
		if e.complexity.MoneyMoveConnection.Edges == nil {
			break
		}

		return e.complexity.MoneyMoveConnection.Edges(childComplexity), true

	case "MoneyMoveConnection.pageInfo":
		if e.complexity.MoneyMoveConnection.PageInfo == nil {
			break
		}

		return e.complexity.MoneyMoveConnection.PageInfo(childComplexity), true

	case "MoneyMoveEdge.cursor":
		if e.complexity.MoneyMoveEdge.Cursor == nil {
			break
		}

		return e.complexity.MoneyMoveEdge.Cursor(childComplexity), true

	case "MoneyMoveEdge.node":
		if e.complexity.MoneyMoveEdge.Node == nil {
			break
		}

		return e.complexity.MoneyMoveEdge.Node(childComplexity), true

	case "MoneyMovePayload.record":
		if e.complexity.MoneyMovePayload.Record == nil {
			break
		}

		return e.complexity.MoneyMovePayload.Record(childComplexity), true

	case "MoneyMovePayload.recordId":
		if e.complexity.MoneyMovePayload.RecordID == nil {
			break
		}

		return e.complexity.MoneyMovePayload.RecordID(childComplexity), true

	case "Mutation.articleDelete":
		if e.complexity.Mutation.ArticleDelete == nil {
			break
		}

		args, err := ec.field_Mutation_articleDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArticleDelete(childComplexity, args["id"].(string)), true

	case "Mutation.articlePublishUpdate":
		if e.complexity.Mutation.ArticlePublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_articlePublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArticlePublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.articleSave":
		if e.complexity.Mutation.ArticleSave == nil {
			break
		}

		args, err := ec.field_Mutation_articleSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArticleSave(childComplexity, args["articleInput"].(models.ArticleInput)), true

	case "Mutation.articleUpdate":
		if e.complexity.Mutation.ArticleUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_articleUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArticleUpdate(childComplexity, args["articleInput"].(models.ArticleInputWithID)), true

	case "Mutation.cartDelete":
		if e.complexity.Mutation.CartDelete == nil {
			break
		}

		args, err := ec.field_Mutation_cartDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartDelete(childComplexity, args["id"].(string)), true

	case "Mutation.cartPublishUpdate":
		if e.complexity.Mutation.CartPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.cartSave":
		if e.complexity.Mutation.CartSave == nil {
			break
		}

		args, err := ec.field_Mutation_cartSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartSave(childComplexity, args["cartInput"].(models.CartInput)), true

	case "Mutation.cartUpdate":
		if e.complexity.Mutation.CartUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_cartUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CartUpdate(childComplexity, args["cartInput"].(models.CartInputWithID)), true

	case "Mutation.clubBalanceDelete":
		if e.complexity.Mutation.ClubBalanceDelete == nil {
			break
		}

		args, err := ec.field_Mutation_clubBalanceDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClubBalanceDelete(childComplexity, args["id"].(string)), true

	case "Mutation.clubBalancePublishUpdate":
		if e.complexity.Mutation.ClubBalancePublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_clubBalancePublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClubBalancePublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.clubBalanceSave":
		if e.complexity.Mutation.ClubBalanceSave == nil {
			break
		}

		args, err := ec.field_Mutation_clubBalanceSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClubBalanceSave(childComplexity, args["clubBalanceInput"].(models.ClubBalanceInput)), true

	case "Mutation.clubBalanceUpdate":
		if e.complexity.Mutation.ClubBalanceUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_clubBalanceUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClubBalanceUpdate(childComplexity, args["clubBalanceInput"].(models.ClubBalanceInputWithID)), true

	case "Mutation.coachPaymentByMonthDelete":
		if e.complexity.Mutation.CoachPaymentByMonthDelete == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByMonthDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByMonthDelete(childComplexity, args["id"].(string)), true

	case "Mutation.coachPaymentByMonthPublishUpdate":
		if e.complexity.Mutation.CoachPaymentByMonthPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByMonthPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByMonthPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.coachPaymentByMonthSave":
		if e.complexity.Mutation.CoachPaymentByMonthSave == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByMonthSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByMonthSave(childComplexity, args["coachPaymentByMonthInput"].(models.CoachPaymentByMonthInput)), true

	case "Mutation.coachPaymentByMonthUpdate":
		if e.complexity.Mutation.CoachPaymentByMonthUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByMonthUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByMonthUpdate(childComplexity, args["coachPaymentByMonthInput"].(models.CoachPaymentByMonthInputWithID)), true

	case "Mutation.coachPaymentByTeamDelete":
		if e.complexity.Mutation.CoachPaymentByTeamDelete == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTeamDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTeamDelete(childComplexity, args["id"].(string)), true

	case "Mutation.coachPaymentByTeamPublishUpdate":
		if e.complexity.Mutation.CoachPaymentByTeamPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTeamPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTeamPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.coachPaymentByTeamSave":
		if e.complexity.Mutation.CoachPaymentByTeamSave == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTeamSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTeamSave(childComplexity, args["coachPaymentByTeamInput"].(models.CoachPaymentByTeamInput)), true

	case "Mutation.coachPaymentByTeamUpdate":
		if e.complexity.Mutation.CoachPaymentByTeamUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTeamUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTeamUpdate(childComplexity, args["coachPaymentByTeamInput"].(models.CoachPaymentByTeamInputWithID)), true

	case "Mutation.coachPaymentByTrainingDelete":
		if e.complexity.Mutation.CoachPaymentByTrainingDelete == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTrainingDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTrainingDelete(childComplexity, args["id"].(string)), true

	case "Mutation.coachPaymentByTrainingPublishUpdate":
		if e.complexity.Mutation.CoachPaymentByTrainingPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTrainingPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTrainingPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.coachPaymentByTrainingSave":
		if e.complexity.Mutation.CoachPaymentByTrainingSave == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTrainingSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTrainingSave(childComplexity, args["coachPaymentByTrainingInput"].(models.CoachPaymentByTrainingInput)), true

	case "Mutation.coachPaymentByTrainingUpdate":
		if e.complexity.Mutation.CoachPaymentByTrainingUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_coachPaymentByTrainingUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CoachPaymentByTrainingUpdate(childComplexity, args["coachPaymentByTrainingInput"].(models.CoachPaymentByTrainingInputWithID)), true

	case "Mutation.creatorDelete":
		if e.complexity.Mutation.CreatorDelete == nil {
			break
		}

		args, err := ec.field_Mutation_creatorDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatorDelete(childComplexity, args["id"].(string)), true

	case "Mutation.creatorPublishUpdate":
		if e.complexity.Mutation.CreatorPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_creatorPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatorPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.creatorSave":
		if e.complexity.Mutation.CreatorSave == nil {
			break
		}

		args, err := ec.field_Mutation_creatorSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatorSave(childComplexity, args["creatorInput"].(models.CreatorInput)), true

	case "Mutation.creatorUpdate":
		if e.complexity.Mutation.CreatorUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_creatorUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatorUpdate(childComplexity, args["creatorInput"].(models.CreatorInputWithID)), true

	case "Mutation.kitDelete":
		if e.complexity.Mutation.KitDelete == nil {
			break
		}

		args, err := ec.field_Mutation_kitDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.KitDelete(childComplexity, args["id"].(string)), true

	case "Mutation.kitPublishUpdate":
		if e.complexity.Mutation.KitPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_kitPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.KitPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.kitSave":
		if e.complexity.Mutation.KitSave == nil {
			break
		}

		args, err := ec.field_Mutation_kitSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.KitSave(childComplexity, args["kitInput"].(models.KitInput)), true

	case "Mutation.kitUpdate":
		if e.complexity.Mutation.KitUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_kitUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.KitUpdate(childComplexity, args["kitInput"].(models.KitInputWithID)), true

	case "Mutation.leadDelete":
		if e.complexity.Mutation.LeadDelete == nil {
			break
		}

		args, err := ec.field_Mutation_leadDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeadDelete(childComplexity, args["id"].(string)), true

	case "Mutation.leadPublishUpdate":
		if e.complexity.Mutation.LeadPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_leadPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeadPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.leadSave":
		if e.complexity.Mutation.LeadSave == nil {
			break
		}

		args, err := ec.field_Mutation_leadSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeadSave(childComplexity, args["leadInput"].(models.LeadInput)), true

	case "Mutation.leadUpdate":
		if e.complexity.Mutation.LeadUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_leadUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LeadUpdate(childComplexity, args["leadInput"].(models.LeadInputWithID)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(models.LoginInput)), true

	case "Mutation.moneyCostDelete":
		if e.complexity.Mutation.MoneyCostDelete == nil {
			break
		}

		args, err := ec.field_Mutation_moneyCostDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyCostDelete(childComplexity, args["id"].(string)), true

	case "Mutation.moneyCostPublishUpdate":
		if e.complexity.Mutation.MoneyCostPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_moneyCostPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyCostPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.moneyCostSave":
		if e.complexity.Mutation.MoneyCostSave == nil {
			break
		}

		args, err := ec.field_Mutation_moneyCostSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyCostSave(childComplexity, args["moneyCostInput"].(models.MoneyCostInput)), true

	case "Mutation.moneyCostUpdate":
		if e.complexity.Mutation.MoneyCostUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_moneyCostUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyCostUpdate(childComplexity, args["moneyCostInput"].(models.MoneyCostInputWithID)), true

	case "Mutation.moneyMoveDelete":
		if e.complexity.Mutation.MoneyMoveDelete == nil {
			break
		}

		args, err := ec.field_Mutation_moneyMoveDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyMoveDelete(childComplexity, args["id"].(string)), true

	case "Mutation.moneyMovePublishUpdate":
		if e.complexity.Mutation.MoneyMovePublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_moneyMovePublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyMovePublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.moneyMoveSave":
		if e.complexity.Mutation.MoneyMoveSave == nil {
			break
		}

		args, err := ec.field_Mutation_moneyMoveSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyMoveSave(childComplexity, args["moneyMoveInput"].(models.MoneyMoveInput)), true

	case "Mutation.moneyMoveUpdate":
		if e.complexity.Mutation.MoneyMoveUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_moneyMoveUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoneyMoveUpdate(childComplexity, args["moneyMoveInput"].(models.MoneyMoveInputWithID)), true

	case "Mutation.orderDelete":
		if e.complexity.Mutation.OrderDelete == nil {
			break
		}

		args, err := ec.field_Mutation_orderDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrderDelete(childComplexity, args["id"].(string)), true

	case "Mutation.orderPublishUpdate":
		if e.complexity.Mutation.OrderPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_orderPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrderPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.orderSave":
		if e.complexity.Mutation.OrderSave == nil {
			break
		}

		args, err := ec.field_Mutation_orderSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrderSave(childComplexity, args["orderInput"].(models.OrderInput)), true

	case "Mutation.orderUpdate":
		if e.complexity.Mutation.OrderUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_orderUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrderUpdate(childComplexity, args["orderInput"].(models.OrderInputWithID)), true

	case "Mutation.placeDelete":
		if e.complexity.Mutation.PlaceDelete == nil {
			break
		}

		args, err := ec.field_Mutation_placeDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PlaceDelete(childComplexity, args["id"].(string)), true

	case "Mutation.placePublishUpdate":
		if e.complexity.Mutation.PlacePublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_placePublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PlacePublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.placeSave":
		if e.complexity.Mutation.PlaceSave == nil {
			break
		}

		args, err := ec.field_Mutation_placeSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PlaceSave(childComplexity, args["placeInput"].(models.PlaceInput)), true

	case "Mutation.placeUpdate":
		if e.complexity.Mutation.PlaceUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_placeUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PlaceUpdate(childComplexity, args["placeInput"].(models.PlaceInputWithID)), true

	case "Mutation.refresh":
		if e.complexity.Mutation.Refresh == nil {
			break
		}

		args, err := ec.field_Mutation_refresh_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Refresh(childComplexity, args["phone"].(string), args["token"].(string)), true

	case "Mutation.register":
		if e.complexity.Mutation.Register == nil {
			break
		}

		args, err := ec.field_Mutation_register_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Register(childComplexity, args["input"].(models.RegisterInput)), true

	case "Mutation.rentPaymentByMonthDelete":
		if e.complexity.Mutation.RentPaymentByMonthDelete == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByMonthDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByMonthDelete(childComplexity, args["id"].(string)), true

	case "Mutation.rentPaymentByMonthPublishUpdate":
		if e.complexity.Mutation.RentPaymentByMonthPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByMonthPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByMonthPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.rentPaymentByMonthSave":
		if e.complexity.Mutation.RentPaymentByMonthSave == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByMonthSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByMonthSave(childComplexity, args["rentPaymentInput"].(models.RentPaymentByMonthInput)), true

	case "Mutation.rentPaymentByMonthUpdate":
		if e.complexity.Mutation.RentPaymentByMonthUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByMonthUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByMonthUpdate(childComplexity, args["rentPaymentInput"].(models.RentPaymentByMonthInputWithID)), true

	case "Mutation.rentPaymentByTrainingDelete":
		if e.complexity.Mutation.RentPaymentByTrainingDelete == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByTrainingDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByTrainingDelete(childComplexity, args["id"].(string)), true

	case "Mutation.rentPaymentByTrainingPublishUpdate":
		if e.complexity.Mutation.RentPaymentByTrainingPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByTrainingPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByTrainingPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.rentPaymentByTrainingSave":
		if e.complexity.Mutation.RentPaymentByTrainingSave == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByTrainingSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByTrainingSave(childComplexity, args["rentPaymentInput"].(models.RentPaymentByTrainingInput)), true

	case "Mutation.rentPaymentByTrainingUpdate":
		if e.complexity.Mutation.RentPaymentByTrainingUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_rentPaymentByTrainingUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RentPaymentByTrainingUpdate(childComplexity, args["rentPaymentInput"].(models.RentPaymentByTrainingInputWithID)), true

	case "Mutation.stadiumDelete":
		if e.complexity.Mutation.StadiumDelete == nil {
			break
		}

		args, err := ec.field_Mutation_stadiumDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StadiumDelete(childComplexity, args["id"].(string)), true

	case "Mutation.stadiumPublishUpdate":
		if e.complexity.Mutation.StadiumPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_stadiumPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StadiumPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.stadiumSave":
		if e.complexity.Mutation.StadiumSave == nil {
			break
		}

		args, err := ec.field_Mutation_stadiumSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StadiumSave(childComplexity, args["stadiumInput"].(models.StadiumInput)), true

	case "Mutation.stadiumUpdate":
		if e.complexity.Mutation.StadiumUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_stadiumUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StadiumUpdate(childComplexity, args["stadiumInput"].(models.StadiumInputWithID)), true

	case "Mutation.staffDelete":
		if e.complexity.Mutation.StaffDelete == nil {
			break
		}

		args, err := ec.field_Mutation_staffDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffDelete(childComplexity, args["id"].(string)), true

	case "Mutation.staffPublishUpdate":
		if e.complexity.Mutation.StaffPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_staffPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.staffSave":
		if e.complexity.Mutation.StaffSave == nil {
			break
		}

		args, err := ec.field_Mutation_staffSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffSave(childComplexity, args["staffInput"].(models.StaffInput)), true

	case "Mutation.staffUpdate":
		if e.complexity.Mutation.StaffUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_staffUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StaffUpdate(childComplexity, args["staffInput"].(models.StaffInputWithID)), true

	case "Mutation.studentDelete":
		if e.complexity.Mutation.StudentDelete == nil {
			break
		}

		args, err := ec.field_Mutation_studentDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentDelete(childComplexity, args["id"].(string)), true

	case "Mutation.studentPublishUpdate":
		if e.complexity.Mutation.StudentPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_studentPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.studentSave":
		if e.complexity.Mutation.StudentSave == nil {
			break
		}

		args, err := ec.field_Mutation_studentSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentSave(childComplexity, args["studentInput"].(models.StudentInput)), true

	case "Mutation.studentUpdate":
		if e.complexity.Mutation.StudentUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_studentUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentUpdate(childComplexity, args["studentInput"].(models.StudentInputWithID)), true

	case "Mutation.studentVisitDelete":
		if e.complexity.Mutation.StudentVisitDelete == nil {
			break
		}

		args, err := ec.field_Mutation_studentVisitDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentVisitDelete(childComplexity, args["id"].(string)), true

	case "Mutation.studentVisitPublishUpdate":
		if e.complexity.Mutation.StudentVisitPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_studentVisitPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentVisitPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.studentVisitSave":
		if e.complexity.Mutation.StudentVisitSave == nil {
			break
		}

		args, err := ec.field_Mutation_studentVisitSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentVisitSave(childComplexity, args["studentVisitInput"].(models.StudentVisitInput)), true

	case "Mutation.studentVisitUpdate":
		if e.complexity.Mutation.StudentVisitUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_studentVisitUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudentVisitUpdate(childComplexity, args["studentVisitInput"].(models.StudentVisitInputWithID)), true

	case "Mutation.taskDelete":
		if e.complexity.Mutation.TaskDelete == nil {
			break
		}

		args, err := ec.field_Mutation_taskDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TaskDelete(childComplexity, args["id"].(string)), true

	case "Mutation.taskPublishUpdate":
		if e.complexity.Mutation.TaskPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_taskPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TaskPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.taskSave":
		if e.complexity.Mutation.TaskSave == nil {
			break
		}

		args, err := ec.field_Mutation_taskSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TaskSave(childComplexity, args["taskInput"].(models.TaskInput)), true

	case "Mutation.taskUpdate":
		if e.complexity.Mutation.TaskUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_taskUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TaskUpdate(childComplexity, args["taskInput"].(models.TaskInputWithID)), true

	case "Mutation.teamBalanceDelete":
		if e.complexity.Mutation.TeamBalanceDelete == nil {
			break
		}

		args, err := ec.field_Mutation_teamBalanceDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamBalanceDelete(childComplexity, args["id"].(string)), true

	case "Mutation.teamBalancePublishUpdate":
		if e.complexity.Mutation.TeamBalancePublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_teamBalancePublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamBalancePublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.teamBalanceSave":
		if e.complexity.Mutation.TeamBalanceSave == nil {
			break
		}

		args, err := ec.field_Mutation_teamBalanceSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamBalanceSave(childComplexity, args["teamBalanceInput"].(models.TeamBalanceInput)), true

	case "Mutation.teamBalanceUpdate":
		if e.complexity.Mutation.TeamBalanceUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_teamBalanceUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamBalanceUpdate(childComplexity, args["teamBalanceInput"].(models.TeamBalanceInputWithID)), true

	case "Mutation.teamDelete":
		if e.complexity.Mutation.TeamDelete == nil {
			break
		}

		args, err := ec.field_Mutation_teamDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamDelete(childComplexity, args["id"].(string)), true

	case "Mutation.teamPublishUpdate":
		if e.complexity.Mutation.TeamPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_teamPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.teamSave":
		if e.complexity.Mutation.TeamSave == nil {
			break
		}

		args, err := ec.field_Mutation_teamSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamSave(childComplexity, args["teamInput"].(models.TeamInput)), true

	case "Mutation.teamUpdate":
		if e.complexity.Mutation.TeamUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_teamUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TeamUpdate(childComplexity, args["teamInput"].(models.TeamInputWithID)), true

	case "Mutation.trainingDayDelete":
		if e.complexity.Mutation.TrainingDayDelete == nil {
			break
		}

		args, err := ec.field_Mutation_trainingDayDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingDayDelete(childComplexity, args["id"].(string)), true

	case "Mutation.trainingDayPublishUpdate":
		if e.complexity.Mutation.TrainingDayPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_trainingDayPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingDayPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.trainingDaySave":
		if e.complexity.Mutation.TrainingDaySave == nil {
			break
		}

		args, err := ec.field_Mutation_trainingDaySave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingDaySave(childComplexity, args["trainingDayInput"].(models.TrainingDayInput)), true

	case "Mutation.trainingDayUpdate":
		if e.complexity.Mutation.TrainingDayUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_trainingDayUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingDayUpdate(childComplexity, args["trainingDayInput"].(models.TrainingDayInputWithID)), true

	case "Mutation.trainingDelete":
		if e.complexity.Mutation.TrainingDelete == nil {
			break
		}

		args, err := ec.field_Mutation_trainingDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingDelete(childComplexity, args["id"].(string)), true

	case "Mutation.trainingPublishUpdate":
		if e.complexity.Mutation.TrainingPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_trainingPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.trainingSave":
		if e.complexity.Mutation.TrainingSave == nil {
			break
		}

		args, err := ec.field_Mutation_trainingSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingSave(childComplexity, args["trainingInput"].(models.TrainingInput)), true

	case "Mutation.trainingUpdate":
		if e.complexity.Mutation.TrainingUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_trainingUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrainingUpdate(childComplexity, args["trainingInput"].(models.TrainingInputWithID)), true

	case "Mutation.userDelete":
		if e.complexity.Mutation.UserDelete == nil {
			break
		}

		args, err := ec.field_Mutation_userDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserDelete(childComplexity, args["id"].(string)), true

	case "Mutation.userPublishUpdate":
		if e.complexity.Mutation.UserPublishUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_userPublishUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserPublishUpdate(childComplexity, args["id"].(string)), true

	case "Mutation.userSave":
		if e.complexity.Mutation.UserSave == nil {
			break
		}

		args, err := ec.field_Mutation_userSave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserSave(childComplexity, args["userInput"].(models.UserInput)), true

	case "Mutation.userUpdate":
		if e.complexity.Mutation.UserUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_userUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserUpdate(childComplexity, args["userInput"].(models.UserInputWithID)), true

	case "Order.cart":
		if e.complexity.Order.Cart == nil {
			break
		}

		return e.complexity.Order.Cart(childComplexity), true

	case "Order.cartId":
		if e.complexity.Order.CartID == nil {
			break
		}

		return e.complexity.Order.CartID(childComplexity), true

	case "Order.creator":
		if e.complexity.Order.Creator == nil {
			break
		}

		return e.complexity.Order.Creator(childComplexity), true

	case "Order.creatorId":
		if e.complexity.Order.CreatorID == nil {
			break
		}

		return e.complexity.Order.CreatorID(childComplexity), true

	case "Order.fileName":
		if e.complexity.Order.FileName == nil {
			break
		}

		return e.complexity.Order.FileName(childComplexity), true

	case "Order.id":
		if e.complexity.Order.ID == nil {
			break
		}

		return e.complexity.Order.ID(childComplexity), true

	case "Order.orderStatus":
		if e.complexity.Order.OrderStatus == nil {
			break
		}

		return e.complexity.Order.OrderStatus(childComplexity), true

	case "Order.published":
		if e.complexity.Order.Published == nil {
			break
		}

		return e.complexity.Order.Published(childComplexity), true

	case "OrderConnection.edges":
		if e.complexity.OrderConnection.Edges == nil {
			break
		}

		return e.complexity.OrderConnection.Edges(childComplexity), true

	case "OrderConnection.pageInfo":
		if e.complexity.OrderConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrderConnection.PageInfo(childComplexity), true

	case "OrderEdge.cursor":
		if e.complexity.OrderEdge.Cursor == nil {
			break
		}

		return e.complexity.OrderEdge.Cursor(childComplexity), true

	case "OrderEdge.node":
		if e.complexity.OrderEdge.Node == nil {
			break
		}

		return e.complexity.OrderEdge.Node(childComplexity), true

	case "OrderPayload.record":
		if e.complexity.OrderPayload.Record == nil {
			break
		}

		return e.complexity.OrderPayload.Record(childComplexity), true

	case "OrderPayload.recordId":
		if e.complexity.OrderPayload.RecordID == nil {
			break
		}

		return e.complexity.OrderPayload.RecordID(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Place.address":
		if e.complexity.Place.Address == nil {
			break
		}

		return e.complexity.Place.Address(childComplexity), true

	case "Place.description":
		if e.complexity.Place.Description == nil {
			break
		}

		return e.complexity.Place.Description(childComplexity), true

	case "Place.id":
		if e.complexity.Place.ID == nil {
			break
		}

		return e.complexity.Place.ID(childComplexity), true

	case "Place.name":
		if e.complexity.Place.Name == nil {
			break
		}

		return e.complexity.Place.Name(childComplexity), true

	case "Place.orderNumber":
		if e.complexity.Place.OrderNumber == nil {
			break
		}

		return e.complexity.Place.OrderNumber(childComplexity), true

	case "Place.published":
		if e.complexity.Place.Published == nil {
			break
		}

		return e.complexity.Place.Published(childComplexity), true

	case "PlaceConnection.edges":
		if e.complexity.PlaceConnection.Edges == nil {
			break
		}

		return e.complexity.PlaceConnection.Edges(childComplexity), true

	case "PlaceConnection.pageInfo":
		if e.complexity.PlaceConnection.PageInfo == nil {
			break
		}

		return e.complexity.PlaceConnection.PageInfo(childComplexity), true

	case "PlaceDto.id":
		if e.complexity.PlaceDto.ID == nil {
			break
		}

		return e.complexity.PlaceDto.ID(childComplexity), true

	case "PlaceDto.name":
		if e.complexity.PlaceDto.Name == nil {
			break
		}

		return e.complexity.PlaceDto.Name(childComplexity), true

	case "PlaceEdge.cursor":
		if e.complexity.PlaceEdge.Cursor == nil {
			break
		}

		return e.complexity.PlaceEdge.Cursor(childComplexity), true

	case "PlaceEdge.node":
		if e.complexity.PlaceEdge.Node == nil {
			break
		}

		return e.complexity.PlaceEdge.Node(childComplexity), true

	case "PlacePayload.record":
		if e.complexity.PlacePayload.Record == nil {
			break
		}

		return e.complexity.PlacePayload.Record(childComplexity), true

	case "PlacePayload.recordId":
		if e.complexity.PlacePayload.RecordID == nil {
			break
		}

		return e.complexity.PlacePayload.RecordID(childComplexity), true

	case "Query.article":
		if e.complexity.Query.Article == nil {
			break
		}

		args, err := ec.field_Query_article_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Article(childComplexity, args["id"].(string)), true

	case "Query.articles":
		if e.complexity.Query.Articles == nil {
			break
		}

		args, err := ec.field_Query_articles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Articles(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.ArticleFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.cart":
		if e.complexity.Query.Cart == nil {
			break
		}

		args, err := ec.field_Query_cart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cart(childComplexity, args["id"].(string)), true

	case "Query.cartAll":
		if e.complexity.Query.CartAll == nil {
			break
		}

		return e.complexity.Query.CartAll(childComplexity), true

	case "Query.carts":
		if e.complexity.Query.Carts == nil {
			break
		}

		args, err := ec.field_Query_carts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Carts(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.CartFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.clubBalance":
		if e.complexity.Query.ClubBalance == nil {
			break
		}

		args, err := ec.field_Query_clubBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ClubBalance(childComplexity, args["id"].(string)), true

	case "Query.clubBalances":
		if e.complexity.Query.ClubBalances == nil {
			break
		}

		args, err := ec.field_Query_clubBalances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ClubBalances(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.ClubBalanceFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.coachPaymentByMonth":
		if e.complexity.Query.CoachPaymentByMonth == nil {
			break
		}

		args, err := ec.field_Query_coachPaymentByMonth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CoachPaymentByMonth(childComplexity, args["id"].(string)), true

	case "Query.coachPaymentByTeam":
		if e.complexity.Query.CoachPaymentByTeam == nil {
			break
		}

		args, err := ec.field_Query_coachPaymentByTeam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CoachPaymentByTeam(childComplexity, args["id"].(string)), true

	case "Query.coachPaymentByTraining":
		if e.complexity.Query.CoachPaymentByTraining == nil {
			break
		}

		args, err := ec.field_Query_coachPaymentByTraining_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CoachPaymentByTraining(childComplexity, args["id"].(string)), true

	case "Query.coachPaymentsByMonth":
		if e.complexity.Query.CoachPaymentsByMonth == nil {
			break
		}

		args, err := ec.field_Query_coachPaymentsByMonth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CoachPaymentsByMonth(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.CoachPaymentByMonthFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.coachPaymentsByTeam":
		if e.complexity.Query.CoachPaymentsByTeam == nil {
			break
		}

		args, err := ec.field_Query_coachPaymentsByTeam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CoachPaymentsByTeam(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.CoachPaymentByTeamFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.coachPaymentsByTraining":
		if e.complexity.Query.CoachPaymentsByTraining == nil {
			break
		}

		args, err := ec.field_Query_coachPaymentsByTraining_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CoachPaymentsByTraining(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.CoachPaymentByTrainingFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.creator":
		if e.complexity.Query.Creator == nil {
			break
		}

		args, err := ec.field_Query_creator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Creator(childComplexity, args["Id"].(*string)), true

	case "Query.creatorAll":
		if e.complexity.Query.CreatorAll == nil {
			break
		}

		return e.complexity.Query.CreatorAll(childComplexity), true

	case "Query.creators":
		if e.complexity.Query.Creators == nil {
			break
		}

		args, err := ec.field_Query_creators_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Creators(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.CreatorFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.currentTasks":
		if e.complexity.Query.CurrentTasks == nil {
			break
		}

		args, err := ec.field_Query_currentTasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CurrentTasks(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TaskFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.kit":
		if e.complexity.Query.Kit == nil {
			break
		}

		args, err := ec.field_Query_kit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Kit(childComplexity, args["id"].(string)), true

	case "Query.kitAll":
		if e.complexity.Query.KitAll == nil {
			break
		}

		return e.complexity.Query.KitAll(childComplexity), true

	case "Query.kits":
		if e.complexity.Query.Kits == nil {
			break
		}

		args, err := ec.field_Query_kits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Kits(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.KitFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.lead":
		if e.complexity.Query.Lead == nil {
			break
		}

		args, err := ec.field_Query_lead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lead(childComplexity, args["id"].(string)), true

	case "Query.leadAll":
		if e.complexity.Query.LeadAll == nil {
			break
		}

		return e.complexity.Query.LeadAll(childComplexity), true

	case "Query.leads":
		if e.complexity.Query.Leads == nil {
			break
		}

		args, err := ec.field_Query_leads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Leads(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.LeadFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.moneyCost":
		if e.complexity.Query.MoneyCost == nil {
			break
		}

		args, err := ec.field_Query_moneyCost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MoneyCost(childComplexity, args["id"].(string)), true

	case "Query.moneyCosts":
		if e.complexity.Query.MoneyCosts == nil {
			break
		}

		args, err := ec.field_Query_moneyCosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MoneyCosts(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.MoneyCostFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.moneyMove":
		if e.complexity.Query.MoneyMove == nil {
			break
		}

		args, err := ec.field_Query_moneyMove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MoneyMove(childComplexity, args["id"].(string)), true

	case "Query.moneyMoves":
		if e.complexity.Query.MoneyMoves == nil {
			break
		}

		args, err := ec.field_Query_moneyMoves_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MoneyMoves(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.MoneyMoveFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.nearestStaffBirthdays":
		if e.complexity.Query.NearestStaffBirthdays == nil {
			break
		}

		args, err := ec.field_Query_nearestStaffBirthdays_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NearestStaffBirthdays(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.StaffFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.nearestStudentBirthdays":
		if e.complexity.Query.NearestStudentBirthdays == nil {
			break
		}

		args, err := ec.field_Query_nearestStudentBirthdays_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NearestStudentBirthdays(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.StudentFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.order":
		if e.complexity.Query.Order == nil {
			break
		}

		args, err := ec.field_Query_order_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Order(childComplexity, args["id"].(string)), true

	case "Query.orders":
		if e.complexity.Query.Orders == nil {
			break
		}

		args, err := ec.field_Query_orders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Orders(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.OrderFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.place":
		if e.complexity.Query.Place == nil {
			break
		}

		args, err := ec.field_Query_place_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Place(childComplexity, args["id"].(string)), true

	case "Query.placeAll":
		if e.complexity.Query.PlaceAll == nil {
			break
		}

		return e.complexity.Query.PlaceAll(childComplexity), true

	case "Query.places":
		if e.complexity.Query.Places == nil {
			break
		}

		args, err := ec.field_Query_places_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Places(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.PlaceFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.rentPaymentByMonth":
		if e.complexity.Query.RentPaymentByMonth == nil {
			break
		}

		args, err := ec.field_Query_rentPaymentByMonth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RentPaymentByMonth(childComplexity, args["id"].(string)), true

	case "Query.rentPaymentByTraining":
		if e.complexity.Query.RentPaymentByTraining == nil {
			break
		}

		args, err := ec.field_Query_rentPaymentByTraining_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RentPaymentByTraining(childComplexity, args["id"].(string)), true

	case "Query.rentPaymentsByMonth":
		if e.complexity.Query.RentPaymentsByMonth == nil {
			break
		}

		args, err := ec.field_Query_rentPaymentsByMonth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RentPaymentsByMonth(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.RentPaymentByMonthFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.rentPaymentsByTraining":
		if e.complexity.Query.RentPaymentsByTraining == nil {
			break
		}

		args, err := ec.field_Query_rentPaymentsByTraining_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RentPaymentsByTraining(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.RentPaymentByTrainingFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.stadium":
		if e.complexity.Query.Stadium == nil {
			break
		}

		args, err := ec.field_Query_stadium_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Stadium(childComplexity, args["id"].(string)), true

	case "Query.stadiumAll":
		if e.complexity.Query.StadiumAll == nil {
			break
		}

		return e.complexity.Query.StadiumAll(childComplexity), true

	case "Query.stadiums":
		if e.complexity.Query.Stadiums == nil {
			break
		}

		args, err := ec.field_Query_stadiums_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Stadiums(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.StadiumFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.staff":
		if e.complexity.Query.Staff == nil {
			break
		}

		args, err := ec.field_Query_staff_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Staff(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.StaffFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.staffAll":
		if e.complexity.Query.StaffAll == nil {
			break
		}

		return e.complexity.Query.StaffAll(childComplexity), true

	case "Query.staffPerson":
		if e.complexity.Query.StaffPerson == nil {
			break
		}

		args, err := ec.field_Query_staffPerson_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StaffPerson(childComplexity, args["id"].(string)), true

	case "Query.student":
		if e.complexity.Query.Student == nil {
			break
		}

		args, err := ec.field_Query_student_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Student(childComplexity, args["id"].(string)), true

	case "Query.studentAll":
		if e.complexity.Query.StudentAll == nil {
			break
		}

		return e.complexity.Query.StudentAll(childComplexity), true

	case "Query.studentVisit":
		if e.complexity.Query.StudentVisit == nil {
			break
		}

		args, err := ec.field_Query_studentVisit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StudentVisit(childComplexity, args["id"].(string)), true

	case "Query.studentVisits":
		if e.complexity.Query.StudentVisits == nil {
			break
		}

		args, err := ec.field_Query_studentVisits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StudentVisits(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.StudentVisitFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.students":
		if e.complexity.Query.Students == nil {
			break
		}

		args, err := ec.field_Query_students_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Students(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.StudentFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.task":
		if e.complexity.Query.Task == nil {
			break
		}

		args, err := ec.field_Query_task_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Task(childComplexity, args["id"].(string)), true

	case "Query.tasks":
		if e.complexity.Query.Tasks == nil {
			break
		}

		args, err := ec.field_Query_tasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tasks(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TaskFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.team":
		if e.complexity.Query.Team == nil {
			break
		}

		args, err := ec.field_Query_team_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Team(childComplexity, args["id"].(string)), true

	case "Query.teamAll":
		if e.complexity.Query.TeamAll == nil {
			break
		}

		return e.complexity.Query.TeamAll(childComplexity), true

	case "Query.teamBalance":
		if e.complexity.Query.TeamBalance == nil {
			break
		}

		args, err := ec.field_Query_teamBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TeamBalance(childComplexity, args["id"].(string)), true

	case "Query.teamBalances":
		if e.complexity.Query.TeamBalances == nil {
			break
		}

		args, err := ec.field_Query_teamBalances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TeamBalances(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TeamBalanceFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.teams":
		if e.complexity.Query.Teams == nil {
			break
		}

		args, err := ec.field_Query_teams_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Teams(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TeamFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.timeTable":
		if e.complexity.Query.TimeTable == nil {
			break
		}

		args, err := ec.field_Query_timeTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TimeTable(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TrainingFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.training":
		if e.complexity.Query.Training == nil {
			break
		}

		args, err := ec.field_Query_training_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Training(childComplexity, args["id"].(string)), true

	case "Query.trainingAll":
		if e.complexity.Query.TrainingAll == nil {
			break
		}

		return e.complexity.Query.TrainingAll(childComplexity), true

	case "Query.trainingDay":
		if e.complexity.Query.TrainingDay == nil {
			break
		}

		args, err := ec.field_Query_trainingDay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingDay(childComplexity, args["id"].(string)), true

	case "Query.trainingDays":
		if e.complexity.Query.TrainingDays == nil {
			break
		}

		args, err := ec.field_Query_trainingDays_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingDays(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TrainingDayFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.trainings":
		if e.complexity.Query.Trainings == nil {
			break
		}

		args, err := ec.field_Query_trainings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Trainings(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TrainingFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.trainingsByDay":
		if e.complexity.Query.TrainingsByDay == nil {
			break
		}

		args, err := ec.field_Query_trainingsByDay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingsByDay(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.TrainingFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.unPayedStudents":
		if e.complexity.Query.UnPayedStudents == nil {
			break
		}

		args, err := ec.field_Query_unPayedStudents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UnPayedStudents(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.StudentFilter), args["first"].(*int), args["last"].(*int)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.userAll":
		if e.complexity.Query.UserAll == nil {
			break
		}

		return e.complexity.Query.UserAll(childComplexity), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*string), args["before"].(*string), args["filter"].(*models.UserFilter), args["first"].(*int), args["last"].(*int)), true

	case "RentPaymentByMonth.description":
		if e.complexity.RentPaymentByMonth.Description == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.Description(childComplexity), true

	case "RentPaymentByMonth.id":
		if e.complexity.RentPaymentByMonth.ID == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.ID(childComplexity), true

	case "RentPaymentByMonth.month":
		if e.complexity.RentPaymentByMonth.Month == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.Month(childComplexity), true

	case "RentPaymentByMonth.paymentDate":
		if e.complexity.RentPaymentByMonth.PaymentDate == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.PaymentDate(childComplexity), true

	case "RentPaymentByMonth.published":
		if e.complexity.RentPaymentByMonth.Published == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.Published(childComplexity), true

	case "RentPaymentByMonth.stadium":
		if e.complexity.RentPaymentByMonth.Stadium == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.Stadium(childComplexity), true

	case "RentPaymentByMonth.stadiumId":
		if e.complexity.RentPaymentByMonth.StadiumID == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.StadiumID(childComplexity), true

	case "RentPaymentByMonth.sum":
		if e.complexity.RentPaymentByMonth.Sum == nil {
			break
		}

		return e.complexity.RentPaymentByMonth.Sum(childComplexity), true

	case "RentPaymentByMonthConnection.edges":
		if e.complexity.RentPaymentByMonthConnection.Edges == nil {
			break
		}

		return e.complexity.RentPaymentByMonthConnection.Edges(childComplexity), true

	case "RentPaymentByMonthConnection.pageInfo":
		if e.complexity.RentPaymentByMonthConnection.PageInfo == nil {
			break
		}

		return e.complexity.RentPaymentByMonthConnection.PageInfo(childComplexity), true

	case "RentPaymentByMonthEdge.cursor":
		if e.complexity.RentPaymentByMonthEdge.Cursor == nil {
			break
		}

		return e.complexity.RentPaymentByMonthEdge.Cursor(childComplexity), true

	case "RentPaymentByMonthEdge.node":
		if e.complexity.RentPaymentByMonthEdge.Node == nil {
			break
		}

		return e.complexity.RentPaymentByMonthEdge.Node(childComplexity), true

	case "RentPaymentByMonthPayload.record":
		if e.complexity.RentPaymentByMonthPayload.Record == nil {
			break
		}

		return e.complexity.RentPaymentByMonthPayload.Record(childComplexity), true

	case "RentPaymentByMonthPayload.recordId":
		if e.complexity.RentPaymentByMonthPayload.RecordID == nil {
			break
		}

		return e.complexity.RentPaymentByMonthPayload.RecordID(childComplexity), true

	case "RentPaymentByTraining.description":
		if e.complexity.RentPaymentByTraining.Description == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.Description(childComplexity), true

	case "RentPaymentByTraining.id":
		if e.complexity.RentPaymentByTraining.ID == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.ID(childComplexity), true

	case "RentPaymentByTraining.published":
		if e.complexity.RentPaymentByTraining.Published == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.Published(childComplexity), true

	case "RentPaymentByTraining.stadium":
		if e.complexity.RentPaymentByTraining.Stadium == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.Stadium(childComplexity), true

	case "RentPaymentByTraining.stadiumId":
		if e.complexity.RentPaymentByTraining.StadiumID == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.StadiumID(childComplexity), true

	case "RentPaymentByTraining.sum":
		if e.complexity.RentPaymentByTraining.Sum == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.Sum(childComplexity), true

	case "RentPaymentByTraining.trainingIds":
		if e.complexity.RentPaymentByTraining.TrainingIds == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.TrainingIds(childComplexity), true

	case "RentPaymentByTraining.trainings":
		if e.complexity.RentPaymentByTraining.Trainings == nil {
			break
		}

		return e.complexity.RentPaymentByTraining.Trainings(childComplexity), true

	case "RentPaymentByTrainingConnection.edges":
		if e.complexity.RentPaymentByTrainingConnection.Edges == nil {
			break
		}

		return e.complexity.RentPaymentByTrainingConnection.Edges(childComplexity), true

	case "RentPaymentByTrainingConnection.pageInfo":
		if e.complexity.RentPaymentByTrainingConnection.PageInfo == nil {
			break
		}

		return e.complexity.RentPaymentByTrainingConnection.PageInfo(childComplexity), true

	case "RentPaymentByTrainingEdge.cursor":
		if e.complexity.RentPaymentByTrainingEdge.Cursor == nil {
			break
		}

		return e.complexity.RentPaymentByTrainingEdge.Cursor(childComplexity), true

	case "RentPaymentByTrainingEdge.node":
		if e.complexity.RentPaymentByTrainingEdge.Node == nil {
			break
		}

		return e.complexity.RentPaymentByTrainingEdge.Node(childComplexity), true

	case "RentPaymentByTrainingPayload.record":
		if e.complexity.RentPaymentByTrainingPayload.Record == nil {
			break
		}

		return e.complexity.RentPaymentByTrainingPayload.Record(childComplexity), true

	case "RentPaymentByTrainingPayload.recordId":
		if e.complexity.RentPaymentByTrainingPayload.RecordID == nil {
			break
		}

		return e.complexity.RentPaymentByTrainingPayload.RecordID(childComplexity), true

	case "Stadium.id":
		if e.complexity.Stadium.ID == nil {
			break
		}

		return e.complexity.Stadium.ID(childComplexity), true

	case "Stadium.latitude":
		if e.complexity.Stadium.Latitude == nil {
			break
		}

		return e.complexity.Stadium.Latitude(childComplexity), true

	case "Stadium.longitude":
		if e.complexity.Stadium.Longitude == nil {
			break
		}

		return e.complexity.Stadium.Longitude(childComplexity), true

	case "Stadium.name":
		if e.complexity.Stadium.Name == nil {
			break
		}

		return e.complexity.Stadium.Name(childComplexity), true

	case "Stadium.place":
		if e.complexity.Stadium.Place == nil {
			break
		}

		return e.complexity.Stadium.Place(childComplexity), true

	case "Stadium.placeId":
		if e.complexity.Stadium.PlaceID == nil {
			break
		}

		return e.complexity.Stadium.PlaceID(childComplexity), true

	case "Stadium.published":
		if e.complexity.Stadium.Published == nil {
			break
		}

		return e.complexity.Stadium.Published(childComplexity), true

	case "StadiumConnection.edges":
		if e.complexity.StadiumConnection.Edges == nil {
			break
		}

		return e.complexity.StadiumConnection.Edges(childComplexity), true

	case "StadiumConnection.pageInfo":
		if e.complexity.StadiumConnection.PageInfo == nil {
			break
		}

		return e.complexity.StadiumConnection.PageInfo(childComplexity), true

	case "StadiumDto.id":
		if e.complexity.StadiumDto.ID == nil {
			break
		}

		return e.complexity.StadiumDto.ID(childComplexity), true

	case "StadiumDto.name":
		if e.complexity.StadiumDto.Name == nil {
			break
		}

		return e.complexity.StadiumDto.Name(childComplexity), true

	case "StadiumEdge.cursor":
		if e.complexity.StadiumEdge.Cursor == nil {
			break
		}

		return e.complexity.StadiumEdge.Cursor(childComplexity), true

	case "StadiumEdge.node":
		if e.complexity.StadiumEdge.Node == nil {
			break
		}

		return e.complexity.StadiumEdge.Node(childComplexity), true

	case "StadiumPayload.record":
		if e.complexity.StadiumPayload.Record == nil {
			break
		}

		return e.complexity.StadiumPayload.Record(childComplexity), true

	case "StadiumPayload.recordId":
		if e.complexity.StadiumPayload.RecordID == nil {
			break
		}

		return e.complexity.StadiumPayload.RecordID(childComplexity), true

	case "Staff.birthday":
		if e.complexity.Staff.Birthday == nil {
			break
		}

		return e.complexity.Staff.Birthday(childComplexity), true

	case "Staff.department":
		if e.complexity.Staff.Department == nil {
			break
		}

		return e.complexity.Staff.Department(childComplexity), true

	case "Staff.description":
		if e.complexity.Staff.Description == nil {
			break
		}

		return e.complexity.Staff.Description(childComplexity), true

	case "Staff.fileName":
		if e.complexity.Staff.FileName == nil {
			break
		}

		return e.complexity.Staff.FileName(childComplexity), true

	case "Staff.id":
		if e.complexity.Staff.ID == nil {
			break
		}

		return e.complexity.Staff.ID(childComplexity), true

	case "Staff.name":
		if e.complexity.Staff.Name == nil {
			break
		}

		return e.complexity.Staff.Name(childComplexity), true

	case "Staff.orderNumber":
		if e.complexity.Staff.OrderNumber == nil {
			break
		}

		return e.complexity.Staff.OrderNumber(childComplexity), true

	case "Staff.phoneNumber":
		if e.complexity.Staff.PhoneNumber == nil {
			break
		}

		return e.complexity.Staff.PhoneNumber(childComplexity), true

	case "Staff.published":
		if e.complexity.Staff.Published == nil {
			break
		}

		return e.complexity.Staff.Published(childComplexity), true

	case "Staff.user":
		if e.complexity.Staff.User == nil {
			break
		}

		return e.complexity.Staff.User(childComplexity), true

	case "Staff.userId":
		if e.complexity.Staff.UserId == nil {
			break
		}

		return e.complexity.Staff.UserId(childComplexity), true

	case "Staff.work":
		if e.complexity.Staff.Work == nil {
			break
		}

		return e.complexity.Staff.Work(childComplexity), true

	case "StaffConnection.edges":
		if e.complexity.StaffConnection.Edges == nil {
			break
		}

		return e.complexity.StaffConnection.Edges(childComplexity), true

	case "StaffConnection.pageInfo":
		if e.complexity.StaffConnection.PageInfo == nil {
			break
		}

		return e.complexity.StaffConnection.PageInfo(childComplexity), true

	case "StaffDto.id":
		if e.complexity.StaffDto.ID == nil {
			break
		}

		return e.complexity.StaffDto.ID(childComplexity), true

	case "StaffDto.name":
		if e.complexity.StaffDto.Name == nil {
			break
		}

		return e.complexity.StaffDto.Name(childComplexity), true

	case "StaffEdge.cursor":
		if e.complexity.StaffEdge.Cursor == nil {
			break
		}

		return e.complexity.StaffEdge.Cursor(childComplexity), true

	case "StaffEdge.node":
		if e.complexity.StaffEdge.Node == nil {
			break
		}

		return e.complexity.StaffEdge.Node(childComplexity), true

	case "StaffPayload.record":
		if e.complexity.StaffPayload.Record == nil {
			break
		}

		return e.complexity.StaffPayload.Record(childComplexity), true

	case "StaffPayload.recordId":
		if e.complexity.StaffPayload.RecordID == nil {
			break
		}

		return e.complexity.StaffPayload.RecordID(childComplexity), true

	case "Student.birthday":
		if e.complexity.Student.Birthday == nil {
			break
		}

		return e.complexity.Student.Birthday(childComplexity), true

	case "Student.creatorIds":
		if e.complexity.Student.CreatorIds == nil {
			break
		}

		return e.complexity.Student.CreatorIds(childComplexity), true

	case "Student.creators":
		if e.complexity.Student.Creators == nil {
			break
		}

		return e.complexity.Student.Creators(childComplexity), true

	case "Student.id":
		if e.complexity.Student.ID == nil {
			break
		}

		return e.complexity.Student.ID(childComplexity), true

	case "Student.name":
		if e.complexity.Student.Name == nil {
			break
		}

		return e.complexity.Student.Name(childComplexity), true

	case "Student.passportNum":
		if e.complexity.Student.PassportNum == nil {
			break
		}

		return e.complexity.Student.PassportNum(childComplexity), true

	case "Student.paymentSum":
		if e.complexity.Student.PaymentSum == nil {
			break
		}

		return e.complexity.Student.PaymentSum(childComplexity), true

	case "Student.published":
		if e.complexity.Student.Published == nil {
			break
		}

		return e.complexity.Student.Published(childComplexity), true

	case "Student.teamIds":
		if e.complexity.Student.TeamIds == nil {
			break
		}

		return e.complexity.Student.TeamIds(childComplexity), true

	case "Student.teams":
		if e.complexity.Student.Teams == nil {
			break
		}

		return e.complexity.Student.Teams(childComplexity), true

	case "StudentConnection.edges":
		if e.complexity.StudentConnection.Edges == nil {
			break
		}

		return e.complexity.StudentConnection.Edges(childComplexity), true

	case "StudentConnection.pageInfo":
		if e.complexity.StudentConnection.PageInfo == nil {
			break
		}

		return e.complexity.StudentConnection.PageInfo(childComplexity), true

	case "StudentDto.id":
		if e.complexity.StudentDto.ID == nil {
			break
		}

		return e.complexity.StudentDto.ID(childComplexity), true

	case "StudentDto.name":
		if e.complexity.StudentDto.Name == nil {
			break
		}

		return e.complexity.StudentDto.Name(childComplexity), true

	case "StudentEdge.cursor":
		if e.complexity.StudentEdge.Cursor == nil {
			break
		}

		return e.complexity.StudentEdge.Cursor(childComplexity), true

	case "StudentEdge.node":
		if e.complexity.StudentEdge.Node == nil {
			break
		}

		return e.complexity.StudentEdge.Node(childComplexity), true

	case "StudentPayload.record":
		if e.complexity.StudentPayload.Record == nil {
			break
		}

		return e.complexity.StudentPayload.Record(childComplexity), true

	case "StudentPayload.recordId":
		if e.complexity.StudentPayload.RecordID == nil {
			break
		}

		return e.complexity.StudentPayload.RecordID(childComplexity), true

	case "StudentVisit.id":
		if e.complexity.StudentVisit.ID == nil {
			break
		}

		return e.complexity.StudentVisit.ID(childComplexity), true

	case "StudentVisit.payed":
		if e.complexity.StudentVisit.Payed == nil {
			break
		}

		return e.complexity.StudentVisit.Payed(childComplexity), true

	case "StudentVisit.published":
		if e.complexity.StudentVisit.Published == nil {
			break
		}

		return e.complexity.StudentVisit.Published(childComplexity), true

	case "StudentVisit.student":
		if e.complexity.StudentVisit.Student == nil {
			break
		}

		return e.complexity.StudentVisit.Student(childComplexity), true

	case "StudentVisit.studentId":
		if e.complexity.StudentVisit.StudentID == nil {
			break
		}

		return e.complexity.StudentVisit.StudentID(childComplexity), true

	case "StudentVisit.training":
		if e.complexity.StudentVisit.Training == nil {
			break
		}

		return e.complexity.StudentVisit.Training(childComplexity), true

	case "StudentVisit.trainingId":
		if e.complexity.StudentVisit.TrainingID == nil {
			break
		}

		return e.complexity.StudentVisit.TrainingID(childComplexity), true

	case "StudentVisit.visitStatus":
		if e.complexity.StudentVisit.VisitStatus == nil {
			break
		}

		return e.complexity.StudentVisit.VisitStatus(childComplexity), true

	case "StudentVisitConnection.edges":
		if e.complexity.StudentVisitConnection.Edges == nil {
			break
		}

		return e.complexity.StudentVisitConnection.Edges(childComplexity), true

	case "StudentVisitConnection.pageInfo":
		if e.complexity.StudentVisitConnection.PageInfo == nil {
			break
		}

		return e.complexity.StudentVisitConnection.PageInfo(childComplexity), true

	case "StudentVisitEdge.cursor":
		if e.complexity.StudentVisitEdge.Cursor == nil {
			break
		}

		return e.complexity.StudentVisitEdge.Cursor(childComplexity), true

	case "StudentVisitEdge.node":
		if e.complexity.StudentVisitEdge.Node == nil {
			break
		}

		return e.complexity.StudentVisitEdge.Node(childComplexity), true

	case "StudentVisitPayload.record":
		if e.complexity.StudentVisitPayload.Record == nil {
			break
		}

		return e.complexity.StudentVisitPayload.Record(childComplexity), true

	case "StudentVisitPayload.recordId":
		if e.complexity.StudentVisitPayload.RecordID == nil {
			break
		}

		return e.complexity.StudentVisitPayload.RecordID(childComplexity), true

	case "Task.author":
		if e.complexity.Task.Author == nil {
			break
		}

		return e.complexity.Task.Author(childComplexity), true

	case "Task.authorId":
		if e.complexity.Task.AuthorID == nil {
			break
		}

		return e.complexity.Task.AuthorID(childComplexity), true

	case "Task.description":
		if e.complexity.Task.Description == nil {
			break
		}

		return e.complexity.Task.Description(childComplexity), true

	case "Task.endTime":
		if e.complexity.Task.EndTime == nil {
			break
		}

		return e.complexity.Task.EndTime(childComplexity), true

	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true

	case "Task.leadIds":
		if e.complexity.Task.LeadIds == nil {
			break
		}

		return e.complexity.Task.LeadIds(childComplexity), true

	case "Task.leads":
		if e.complexity.Task.Leads == nil {
			break
		}

		return e.complexity.Task.Leads(childComplexity), true

	case "Task.priority":
		if e.complexity.Task.Priority == nil {
			break
		}

		return e.complexity.Task.Priority(childComplexity), true

	case "Task.published":
		if e.complexity.Task.Published == nil {
			break
		}

		return e.complexity.Task.Published(childComplexity), true

	case "Task.result":
		if e.complexity.Task.Result == nil {
			break
		}

		return e.complexity.Task.Result(childComplexity), true

	case "Task.startTime":
		if e.complexity.Task.StartTime == nil {
			break
		}

		return e.complexity.Task.StartTime(childComplexity), true

	case "Task.studentIds":
		if e.complexity.Task.StudentIds == nil {
			break
		}

		return e.complexity.Task.StudentIds(childComplexity), true

	case "Task.students":
		if e.complexity.Task.Students == nil {
			break
		}

		return e.complexity.Task.Students(childComplexity), true

	case "Task.taskStatus":
		if e.complexity.Task.TaskStatus == nil {
			break
		}

		return e.complexity.Task.TaskStatus(childComplexity), true

	case "Task.title":
		if e.complexity.Task.Title == nil {
			break
		}

		return e.complexity.Task.Title(childComplexity), true

	case "Task.workerIds":
		if e.complexity.Task.WorkerIds == nil {
			break
		}

		return e.complexity.Task.WorkerIds(childComplexity), true

	case "Task.workers":
		if e.complexity.Task.Workers == nil {
			break
		}

		return e.complexity.Task.Workers(childComplexity), true

	case "TaskConnection.edges":
		if e.complexity.TaskConnection.Edges == nil {
			break
		}

		return e.complexity.TaskConnection.Edges(childComplexity), true

	case "TaskConnection.pageInfo":
		if e.complexity.TaskConnection.PageInfo == nil {
			break
		}

		return e.complexity.TaskConnection.PageInfo(childComplexity), true

	case "TaskEdge.cursor":
		if e.complexity.TaskEdge.Cursor == nil {
			break
		}

		return e.complexity.TaskEdge.Cursor(childComplexity), true

	case "TaskEdge.node":
		if e.complexity.TaskEdge.Node == nil {
			break
		}

		return e.complexity.TaskEdge.Node(childComplexity), true

	case "TaskPayload.record":
		if e.complexity.TaskPayload.Record == nil {
			break
		}

		return e.complexity.TaskPayload.Record(childComplexity), true

	case "TaskPayload.recordId":
		if e.complexity.TaskPayload.RecordID == nil {
			break
		}

		return e.complexity.TaskPayload.RecordID(childComplexity), true

	case "Team.ages":
		if e.complexity.Team.Ages == nil {
			break
		}

		return e.complexity.Team.Ages(childComplexity), true

	case "Team.coachIds":
		if e.complexity.Team.CoachIds == nil {
			break
		}

		return e.complexity.Team.CoachIds(childComplexity), true

	case "Team.coaches":
		if e.complexity.Team.Coaches == nil {
			break
		}

		return e.complexity.Team.Coaches(childComplexity), true

	case "Team.headCoach":
		if e.complexity.Team.HeadCoach == nil {
			break
		}

		return e.complexity.Team.HeadCoach(childComplexity), true

	case "Team.headCoachId":
		if e.complexity.Team.HeadCoachID == nil {
			break
		}

		return e.complexity.Team.HeadCoachID(childComplexity), true

	case "Team.id":
		if e.complexity.Team.ID == nil {
			break
		}

		return e.complexity.Team.ID(childComplexity), true

	case "Team.name":
		if e.complexity.Team.Name == nil {
			break
		}

		return e.complexity.Team.Name(childComplexity), true

	case "Team.place":
		if e.complexity.Team.Place == nil {
			break
		}

		return e.complexity.Team.Place(childComplexity), true

	case "Team.placeId":
		if e.complexity.Team.PlaceID == nil {
			break
		}

		return e.complexity.Team.PlaceID(childComplexity), true

	case "Team.published":
		if e.complexity.Team.Published == nil {
			break
		}

		return e.complexity.Team.Published(childComplexity), true

	case "Team.writable":
		if e.complexity.Team.Writable == nil {
			break
		}

		return e.complexity.Team.Writable(childComplexity), true

	case "TeamBalance.date":
		if e.complexity.TeamBalance.Date == nil {
			break
		}

		return e.complexity.TeamBalance.Date(childComplexity), true

	case "TeamBalance.id":
		if e.complexity.TeamBalance.ID == nil {
			break
		}

		return e.complexity.TeamBalance.ID(childComplexity), true

	case "TeamBalance.published":
		if e.complexity.TeamBalance.Published == nil {
			break
		}

		return e.complexity.TeamBalance.Published(childComplexity), true

	case "TeamBalance.rent":
		if e.complexity.TeamBalance.Rent == nil {
			break
		}

		return e.complexity.TeamBalance.Rent(childComplexity), true

	case "TeamBalance.salary":
		if e.complexity.TeamBalance.Salary == nil {
			break
		}

		return e.complexity.TeamBalance.Salary(childComplexity), true

	case "TeamBalance.sum":
		if e.complexity.TeamBalance.Sum == nil {
			break
		}

		return e.complexity.TeamBalance.Sum(childComplexity), true

	case "TeamBalance.team":
		if e.complexity.TeamBalance.Team == nil {
			break
		}

		return e.complexity.TeamBalance.Team(childComplexity), true

	case "TeamBalance.teamId":
		if e.complexity.TeamBalance.TeamID == nil {
			break
		}

		return e.complexity.TeamBalance.TeamID(childComplexity), true

	case "TeamBalance.tickets":
		if e.complexity.TeamBalance.Tickets == nil {
			break
		}

		return e.complexity.TeamBalance.Tickets(childComplexity), true

	case "TeamBalanceConnection.edges":
		if e.complexity.TeamBalanceConnection.Edges == nil {
			break
		}

		return e.complexity.TeamBalanceConnection.Edges(childComplexity), true

	case "TeamBalanceConnection.pageInfo":
		if e.complexity.TeamBalanceConnection.PageInfo == nil {
			break
		}

		return e.complexity.TeamBalanceConnection.PageInfo(childComplexity), true

	case "TeamBalanceEdge.cursor":
		if e.complexity.TeamBalanceEdge.Cursor == nil {
			break
		}

		return e.complexity.TeamBalanceEdge.Cursor(childComplexity), true

	case "TeamBalanceEdge.node":
		if e.complexity.TeamBalanceEdge.Node == nil {
			break
		}

		return e.complexity.TeamBalanceEdge.Node(childComplexity), true

	case "TeamBalancePayload.record":
		if e.complexity.TeamBalancePayload.Record == nil {
			break
		}

		return e.complexity.TeamBalancePayload.Record(childComplexity), true

	case "TeamBalancePayload.recordId":
		if e.complexity.TeamBalancePayload.RecordID == nil {
			break
		}

		return e.complexity.TeamBalancePayload.RecordID(childComplexity), true

	case "TeamConnection.edges":
		if e.complexity.TeamConnection.Edges == nil {
			break
		}

		return e.complexity.TeamConnection.Edges(childComplexity), true

	case "TeamConnection.pageInfo":
		if e.complexity.TeamConnection.PageInfo == nil {
			break
		}

		return e.complexity.TeamConnection.PageInfo(childComplexity), true

	case "TeamDto.id":
		if e.complexity.TeamDto.ID == nil {
			break
		}

		return e.complexity.TeamDto.ID(childComplexity), true

	case "TeamDto.name":
		if e.complexity.TeamDto.Name == nil {
			break
		}

		return e.complexity.TeamDto.Name(childComplexity), true

	case "TeamEdge.cursor":
		if e.complexity.TeamEdge.Cursor == nil {
			break
		}

		return e.complexity.TeamEdge.Cursor(childComplexity), true

	case "TeamEdge.node":
		if e.complexity.TeamEdge.Node == nil {
			break
		}

		return e.complexity.TeamEdge.Node(childComplexity), true

	case "TeamPayload.record":
		if e.complexity.TeamPayload.Record == nil {
			break
		}

		return e.complexity.TeamPayload.Record(childComplexity), true

	case "TeamPayload.recordId":
		if e.complexity.TeamPayload.RecordID == nil {
			break
		}

		return e.complexity.TeamPayload.RecordID(childComplexity), true

	case "Token.accessToken":
		if e.complexity.Token.AccessToken == nil {
			break
		}

		return e.complexity.Token.AccessToken(childComplexity), true

	case "Token.expiration":
		if e.complexity.Token.Expiration == nil {
			break
		}

		return e.complexity.Token.Expiration(childComplexity), true

	case "Token.refreshToken":
		if e.complexity.Token.RefreshToken == nil {
			break
		}

		return e.complexity.Token.RefreshToken(childComplexity), true

	case "Training.coachIds":
		if e.complexity.Training.CoachIds == nil {
			break
		}

		return e.complexity.Training.CoachIds(childComplexity), true

	case "Training.coaches":
		if e.complexity.Training.Coaches == nil {
			break
		}

		return e.complexity.Training.Coaches(childComplexity), true

	case "Training.headCoach":
		if e.complexity.Training.HeadCoach == nil {
			break
		}

		return e.complexity.Training.HeadCoach(childComplexity), true

	case "Training.headCoachId":
		if e.complexity.Training.HeadCoachID == nil {
			break
		}

		return e.complexity.Training.HeadCoachID(childComplexity), true

	case "Training.id":
		if e.complexity.Training.ID == nil {
			break
		}

		return e.complexity.Training.ID(childComplexity), true

	case "Training.published":
		if e.complexity.Training.Published == nil {
			break
		}

		return e.complexity.Training.Published(childComplexity), true

	case "Training.stadium":
		if e.complexity.Training.Stadium == nil {
			break
		}

		return e.complexity.Training.Stadium(childComplexity), true

	case "Training.stadiumId":
		if e.complexity.Training.StadiumID == nil {
			break
		}

		return e.complexity.Training.StadiumID(childComplexity), true

	case "Training.team":
		if e.complexity.Training.Team == nil {
			break
		}

		return e.complexity.Training.Team(childComplexity), true

	case "Training.teamId":
		if e.complexity.Training.TeamID == nil {
			break
		}

		return e.complexity.Training.TeamID(childComplexity), true

	case "Training.time":
		if e.complexity.Training.Time == nil {
			break
		}

		return e.complexity.Training.Time(childComplexity), true

	case "Training.visits":
		if e.complexity.Training.Visits == nil {
			break
		}

		return e.complexity.Training.Visits(childComplexity), true

	case "TrainingConnection.edges":
		if e.complexity.TrainingConnection.Edges == nil {
			break
		}

		return e.complexity.TrainingConnection.Edges(childComplexity), true

	case "TrainingConnection.pageInfo":
		if e.complexity.TrainingConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrainingConnection.PageInfo(childComplexity), true

	case "TrainingDay.day":
		if e.complexity.TrainingDay.Day == nil {
			break
		}

		return e.complexity.TrainingDay.Day(childComplexity), true

	case "TrainingDay.id":
		if e.complexity.TrainingDay.ID == nil {
			break
		}

		return e.complexity.TrainingDay.ID(childComplexity), true

	case "TrainingDay.published":
		if e.complexity.TrainingDay.Published == nil {
			break
		}

		return e.complexity.TrainingDay.Published(childComplexity), true

	case "TrainingDay.stadium":
		if e.complexity.TrainingDay.Stadium == nil {
			break
		}

		return e.complexity.TrainingDay.Stadium(childComplexity), true

	case "TrainingDay.stadiumId":
		if e.complexity.TrainingDay.StadiumID == nil {
			break
		}

		return e.complexity.TrainingDay.StadiumID(childComplexity), true

	case "TrainingDay.team":
		if e.complexity.TrainingDay.Team == nil {
			break
		}

		return e.complexity.TrainingDay.Team(childComplexity), true

	case "TrainingDay.teamId":
		if e.complexity.TrainingDay.TeamID == nil {
			break
		}

		return e.complexity.TrainingDay.TeamID(childComplexity), true

	case "TrainingDay.time":
		if e.complexity.TrainingDay.Time == nil {
			break
		}

		return e.complexity.TrainingDay.Time(childComplexity), true

	case "TrainingDayConnection.edges":
		if e.complexity.TrainingDayConnection.Edges == nil {
			break
		}

		return e.complexity.TrainingDayConnection.Edges(childComplexity), true

	case "TrainingDayConnection.pageInfo":
		if e.complexity.TrainingDayConnection.PageInfo == nil {
			break
		}

		return e.complexity.TrainingDayConnection.PageInfo(childComplexity), true

	case "TrainingDayEdge.cursor":
		if e.complexity.TrainingDayEdge.Cursor == nil {
			break
		}

		return e.complexity.TrainingDayEdge.Cursor(childComplexity), true

	case "TrainingDayEdge.node":
		if e.complexity.TrainingDayEdge.Node == nil {
			break
		}

		return e.complexity.TrainingDayEdge.Node(childComplexity), true

	case "TrainingDayPayload.record":
		if e.complexity.TrainingDayPayload.Record == nil {
			break
		}

		return e.complexity.TrainingDayPayload.Record(childComplexity), true

	case "TrainingDayPayload.recordId":
		if e.complexity.TrainingDayPayload.RecordID == nil {
			break
		}

		return e.complexity.TrainingDayPayload.RecordID(childComplexity), true

	case "TrainingDto.id":
		if e.complexity.TrainingDto.ID == nil {
			break
		}

		return e.complexity.TrainingDto.ID(childComplexity), true

	case "TrainingDto.name":
		if e.complexity.TrainingDto.Name == nil {
			break
		}

		return e.complexity.TrainingDto.Name(childComplexity), true

	case "TrainingEdge.cursor":
		if e.complexity.TrainingEdge.Cursor == nil {
			break
		}

		return e.complexity.TrainingEdge.Cursor(childComplexity), true

	case "TrainingEdge.node":
		if e.complexity.TrainingEdge.Node == nil {
			break
		}

		return e.complexity.TrainingEdge.Node(childComplexity), true

	case "TrainingPayload.record":
		if e.complexity.TrainingPayload.Record == nil {
			break
		}

		return e.complexity.TrainingPayload.Record(childComplexity), true

	case "TrainingPayload.recordId":
		if e.complexity.TrainingPayload.RecordID == nil {
			break
		}

		return e.complexity.TrainingPayload.RecordID(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserDto.id":
		if e.complexity.UserDto.ID == nil {
			break
		}

		return e.complexity.UserDto.ID(childComplexity), true

	case "UserDto.name":
		if e.complexity.UserDto.Name == nil {
			break
		}

		return e.complexity.UserDto.Name(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserPayload.record":
		if e.complexity.UserPayload.Record == nil {
			break
		}

		return e.complexity.UserPayload.Record(childComplexity), true

	case "UserPayload.recordId":
		if e.complexity.UserPayload.RecordID == nil {
			break
		}

		return e.complexity.UserPayload.RecordID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputArticleFilter,
		ec.unmarshalInputArticleInput,
		ec.unmarshalInputArticleInputWithId,
		ec.unmarshalInputCartFilter,
		ec.unmarshalInputCartInput,
		ec.unmarshalInputCartInputWithId,
		ec.unmarshalInputClubBalanceFilter,
		ec.unmarshalInputClubBalanceInput,
		ec.unmarshalInputClubBalanceInputWithId,
		ec.unmarshalInputCoachPaymentByMonthFilter,
		ec.unmarshalInputCoachPaymentByMonthInput,
		ec.unmarshalInputCoachPaymentByMonthInputWithId,
		ec.unmarshalInputCoachPaymentByTeamFilter,
		ec.unmarshalInputCoachPaymentByTeamInput,
		ec.unmarshalInputCoachPaymentByTeamInputWithId,
		ec.unmarshalInputCoachPaymentByTrainingFilter,
		ec.unmarshalInputCoachPaymentByTrainingInput,
		ec.unmarshalInputCoachPaymentByTrainingInputWithId,
		ec.unmarshalInputCreatorFilter,
		ec.unmarshalInputCreatorInput,
		ec.unmarshalInputCreatorInputWithId,
		ec.unmarshalInputKitFilter,
		ec.unmarshalInputKitInput,
		ec.unmarshalInputKitInputWithId,
		ec.unmarshalInputLeadFilter,
		ec.unmarshalInputLeadInput,
		ec.unmarshalInputLeadInputWithId,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputMoneyCostFilter,
		ec.unmarshalInputMoneyCostInput,
		ec.unmarshalInputMoneyCostInputWithId,
		ec.unmarshalInputMoneyMoveFilter,
		ec.unmarshalInputMoneyMoveInput,
		ec.unmarshalInputMoneyMoveInputWithId,
		ec.unmarshalInputOrderFilter,
		ec.unmarshalInputOrderInput,
		ec.unmarshalInputOrderInputWithId,
		ec.unmarshalInputPlaceFilter,
		ec.unmarshalInputPlaceInput,
		ec.unmarshalInputPlaceInputWithId,
		ec.unmarshalInputRegisterInput,
		ec.unmarshalInputRentPaymentByMonthFilter,
		ec.unmarshalInputRentPaymentByMonthInput,
		ec.unmarshalInputRentPaymentByMonthInputWithId,
		ec.unmarshalInputRentPaymentByTrainingFilter,
		ec.unmarshalInputRentPaymentByTrainingInput,
		ec.unmarshalInputRentPaymentByTrainingInputWithId,
		ec.unmarshalInputStadiumFilter,
		ec.unmarshalInputStadiumInput,
		ec.unmarshalInputStadiumInputWithId,
		ec.unmarshalInputStaffFilter,
		ec.unmarshalInputStaffInput,
		ec.unmarshalInputStaffInputWithId,
		ec.unmarshalInputStudentFilter,
		ec.unmarshalInputStudentInput,
		ec.unmarshalInputStudentInputWithId,
		ec.unmarshalInputStudentVisitFilter,
		ec.unmarshalInputStudentVisitInput,
		ec.unmarshalInputStudentVisitInputWithId,
		ec.unmarshalInputTaskFilter,
		ec.unmarshalInputTaskInput,
		ec.unmarshalInputTaskInputWithId,
		ec.unmarshalInputTeamBalanceFilter,
		ec.unmarshalInputTeamBalanceInput,
		ec.unmarshalInputTeamBalanceInputWithId,
		ec.unmarshalInputTeamFilter,
		ec.unmarshalInputTeamInput,
		ec.unmarshalInputTeamInputWithId,
		ec.unmarshalInputTrainingDayFilter,
		ec.unmarshalInputTrainingDayInput,
		ec.unmarshalInputTrainingDayInputWithId,
		ec.unmarshalInputTrainingFilter,
		ec.unmarshalInputTrainingInput,
		ec.unmarshalInputTrainingInputWithId,
		ec.unmarshalInputUserFilter,
		ec.unmarshalInputUserInput,
		ec.unmarshalInputUserInputWithId,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../schema/schema.graphql", Input: `# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

type Article {
    author: User
    authorId: ID!
    description: String!
    fileName: String
    id: ID!
    published: Boolean!
    tags: [String!]
    title: String!
}

type ArticleConnection {
    edges: [ArticleEdge!]!
    pageInfo: PageInfo!
}

type ArticleEdge {
    cursor: ID!
    node: Article
}

type ArticlePayload {
    record: Article
    recordId: ID!
}

type AuthResponse {
    authToken: AuthToken!
    user: User!
}

type AuthToken {
    accessToken: String!
    expiredAt: Time!
}

type Cart {
    id: ID!
    kitIds: [ID!]!
    published: Boolean!
    student: Student
    studentId: ID!
    sum: Int!
}

type CartConnection {
    edges: [CartEdge!]!
    pageInfo: PageInfo
}

type CartDto {
    id: ID!
    name: String!
}

type CartEdge {
    cursor: ID!
    node: Cart
}

type CartPayload {
    record: Cart
    recordId: ID!
}

type ClubBalance {
    date: Time!
    id: ID!
    otherCosts: Int!
    published: Boolean!
    rent: Int!
    salary: Int!
    sum: Int!
    tickets: Int!
}

type ClubBalanceConnection {
    edges: [ClubBalanceEdge!]!
    pageInfo: PageInfo
}

type ClubBalanceEdge {
    cursor: ID!
    node: ClubBalance
}

type ClubBalancePayload {
    record: ClubBalance
    recordId: ID!
}

type CoachPaymentByMonth {
    coach: Staff
    coachId: ID!
    date: Time
    id: ID!
    published: Boolean!
    sum: Int!
}

type CoachPaymentByMonthConnection {
    edges: [CoachPaymentByMonthEdge!]!
    pageInfo: PageInfo
}

type CoachPaymentByMonthEdge {
    cursor: ID!
    node: CoachPaymentByMonth
}

type CoachPaymentByMonthPayload {
    record: CoachPaymentByMonth
    recordId: ID!
}

type CoachPaymentByTeam {
    coach: Staff
    coachId: ID!
    dateFinish: Time
    dateStart: Time
    id: ID!
    paymentRule: CoachPaymentRule
    published: Boolean!
    sum: Int
    team: Team
    teamId: ID
}

type CoachPaymentByTeamConnection {
    edges: [CoachPaymentByTeamEdge!]!
    pageInfo: PageInfo
}

type CoachPaymentByTeamEdge {
    cursor: ID!
    node: CoachPaymentByTeam
}

type CoachPaymentByTeamPayload {
    record: CoachPaymentByTeam
    recordId: ID!
}

type CoachPaymentByTraining {
    coach: Staff
    coachId: ID!
    id: ID!
    published: Boolean!
    sum: Int
    training: Training
    trainingId: ID
}

type CoachPaymentByTrainingConnection {
    edges: [CoachPaymentByTrainingEdge!]!
    pageInfo: PageInfo
}

type CoachPaymentByTrainingEdge {
    cursor: ID!
    node: CoachPaymentByTraining
}

type CoachPaymentByTrainingPayload {
    record: CoachPaymentByTraining
    recordId: ID!
}

type Creator {
    id: ID!
    name: String!
    passportNum: String
    phone: String!
    published: Boolean!
    user: User
    userId: ID
}

type CreatorConnection {
    edges: [CreatorEdge!]!
    pageInfo: PageInfo
}

type CreatorDto {
    id: ID!
    name: String!
}

type CreatorEdge {
    cursor: ID!
    node: Creator
}

type CreatorPayload {
    record: Creator
    recordId: ID!
}

type Kit {
    fileName: String
    id: ID!
    name: String!
    number: Int
    price: Int!
    published: Boolean!
    quantity: Int
    size: String!
    title: String
}

type KitConnection {
    edges: [KitEdge!]!
    pageInfo: PageInfo
}

type KitDto {
    id: ID!
    name: String!
}

type KitEdge {
    cursor: ID!
    node: Kit
}

type KitPayload {
    record: Kit
    recordId: ID!
}

type Lead {
    description: String
    id: ID!
    name: String
    nextVisit: Training
    nextVisitId: ID
    phone: String!
    published: Boolean!
    source: LeadSource
    status: LeadStatus
    studentIds: [ID!]
    students: [Student!]
    team: Team
    teamId: ID
    yearBorn: Int
}

type LeadConnection {
    edges: [LeadEdge!]!
    pageInfo: PageInfo
}

type LeadDto {
    id: ID!
    name: String!
}

type LeadEdge {
    cursor: ID!
    node: Lead
}

type LeadPayload {
    record: Lead
    recordId: ID!
}

type MoneyCost {
    date: Time!
    description: String!
    id: ID!
    moneyForm: MoneyForm!
    published: Boolean!
    staff: Staff
    staffId: ID!
    sum: Int!
}

type MoneyCostConnection {
    edges: [MoneyCostEdge!]!
    pageInfo: PageInfo
}

type MoneyCostEdge {
    cursor: ID!
    node: MoneyCost
}

type MoneyCostPayload {
    record: MoneyCost
    recordId: ID!
}

type MoneyMove {
    dateFinish: Time
    datePayment: Time
    dateStart: Time
    description: String
    id: ID!
    moneyForm: MoneyForm
    owner: Staff
    ownerId: ID!
    published: Boolean!
    student: Student
    studentId: ID!
    sum: Int
    user: User
    userId: ID!
}

type MoneyMoveConnection {
    edges: [MoneyMoveEdge!]!
    pageInfo: PageInfo
}

type MoneyMoveEdge {
    cursor: ID!
    node: MoneyMove
}

type MoneyMovePayload {
    record: MoneyMove
    recordId: ID!
}

type Mutation {
    articleDelete(id: ID!): ArticlePayload!
    articlePublishUpdate(id: ID!): ArticlePayload!
    articleSave(articleInput: ArticleInput!): ArticlePayload!
    articleUpdate(articleInput: ArticleInputWithId!): ArticlePayload!
    cartDelete(id: ID!): CartPayload!
    cartPublishUpdate(id: ID!): CartPayload!
    cartSave(cartInput: CartInput!): CartPayload!
    cartUpdate(cartInput: CartInputWithId!): CartPayload!
    clubBalanceDelete(id: ID!): ClubBalancePayload!
    clubBalancePublishUpdate(id: ID!): ClubBalancePayload!
    clubBalanceSave(clubBalanceInput: ClubBalanceInput!): ClubBalancePayload!
    clubBalanceUpdate(clubBalanceInput: ClubBalanceInputWithId!): ClubBalancePayload!
    coachPaymentByMonthDelete(id: ID!): CoachPaymentByMonthPayload!
    coachPaymentByMonthPublishUpdate(id: ID!): CoachPaymentByMonthPayload!
    coachPaymentByMonthSave(coachPaymentByMonthInput: CoachPaymentByMonthInput!): CoachPaymentByMonthPayload!
    coachPaymentByMonthUpdate(coachPaymentByMonthInput: CoachPaymentByMonthInputWithId!): CoachPaymentByMonthPayload!
    coachPaymentByTeamDelete(id: ID!): CoachPaymentByTeamPayload!
    coachPaymentByTeamPublishUpdate(id: ID!): CoachPaymentByTeamPayload!
    coachPaymentByTeamSave(coachPaymentByTeamInput: CoachPaymentByTeamInput!): CoachPaymentByTeamPayload!
    coachPaymentByTeamUpdate(coachPaymentByTeamInput: CoachPaymentByTeamInputWithId!): CoachPaymentByTeamPayload!
    coachPaymentByTrainingDelete(id: ID!): CoachPaymentByTrainingPayload!
    coachPaymentByTrainingPublishUpdate(id: ID!): CoachPaymentByTrainingPayload!
    coachPaymentByTrainingSave(coachPaymentByTrainingInput: CoachPaymentByTrainingInput!): CoachPaymentByTrainingPayload!
    coachPaymentByTrainingUpdate(coachPaymentByTrainingInput: CoachPaymentByTrainingInputWithId!): CoachPaymentByTrainingPayload!
    creatorDelete(id: ID!): CreatorPayload!
    creatorPublishUpdate(id: ID!): CreatorPayload!
    creatorSave(creatorInput: CreatorInput!): CreatorPayload!
    creatorUpdate(creatorInput: CreatorInputWithId!): CreatorPayload!
    kitDelete(id: ID!): KitPayload!
    kitPublishUpdate(id: ID!): KitPayload!
    kitSave(kitInput: KitInput!): KitPayload!
    kitUpdate(kitInput: KitInputWithId!): KitPayload!
    leadDelete(id: ID!): LeadPayload!
    leadPublishUpdate(id: ID!): LeadPayload!
    leadSave(leadInput: LeadInput!): LeadPayload
    leadUpdate(leadInput: LeadInputWithId!): LeadPayload!
    login(input: LoginInput!): AuthResponse!
    moneyCostDelete(id: ID!): MoneyCostPayload!
    moneyCostPublishUpdate(id: ID!): MoneyCostPayload!
    moneyCostSave(moneyCostInput: MoneyCostInput!): MoneyCostPayload!
    moneyCostUpdate(moneyCostInput: MoneyCostInputWithId!): MoneyCostPayload!
    moneyMoveDelete(id: ID!): MoneyMovePayload!
    moneyMovePublishUpdate(id: ID!): MoneyMovePayload!
    moneyMoveSave(moneyMoveInput: MoneyMoveInput!): MoneyMovePayload!
    moneyMoveUpdate(moneyMoveInput: MoneyMoveInputWithId!): MoneyMovePayload!
    orderDelete(id: ID!): OrderPayload!
    orderPublishUpdate(id: ID!): OrderPayload!
    orderSave(orderInput: OrderInput!): OrderPayload!
    orderUpdate(orderInput: OrderInputWithId!): OrderPayload!
    placeDelete(id: ID!): PlacePayload!
    placePublishUpdate(id: ID!): PlacePayload!
    placeSave(placeInput: PlaceInput!): PlacePayload!
    placeUpdate(placeInput: PlaceInputWithId!): PlacePayload!
    refresh(phone: String!, token: String!): Token!
    register(input: RegisterInput!): AuthResponse!
    rentPaymentByMonthDelete(id: ID!): RentPaymentByMonthPayload!
    rentPaymentByMonthPublishUpdate(id: ID!): RentPaymentByMonthPayload!
    rentPaymentByMonthSave(rentPaymentInput: RentPaymentByMonthInput!): RentPaymentByMonthPayload!
    rentPaymentByMonthUpdate(rentPaymentInput: RentPaymentByMonthInputWithId!): RentPaymentByMonthPayload!
    rentPaymentByTrainingDelete(id: ID!): RentPaymentByTrainingPayload!
    rentPaymentByTrainingPublishUpdate(id: ID!): RentPaymentByTrainingPayload!
    rentPaymentByTrainingSave(rentPaymentInput: RentPaymentByTrainingInput!): RentPaymentByTrainingPayload!
    rentPaymentByTrainingUpdate(rentPaymentInput: RentPaymentByTrainingInputWithId!): RentPaymentByTrainingPayload!
    stadiumDelete(id: ID!): StadiumPayload!
    stadiumPublishUpdate(id: ID!): StadiumPayload!
    stadiumSave(stadiumInput: StadiumInput!): StadiumPayload!
    stadiumUpdate(stadiumInput: StadiumInputWithId!): StadiumPayload!
    staffDelete(id: ID!): StaffPayload!
    staffPublishUpdate(id: ID!): StaffPayload!
    staffSave(staffInput: StaffInput!): StaffPayload!
    staffUpdate(staffInput: StaffInputWithId!): StaffPayload!
    studentDelete(id: ID!): StudentPayload!
    studentPublishUpdate(id: ID!): StudentPayload!
    studentSave(studentInput: StudentInput!): StudentPayload!
    studentUpdate(studentInput: StudentInputWithId!): StudentPayload!
    studentVisitDelete(id: ID!): StudentVisitPayload!
    studentVisitPublishUpdate(id: ID!): StudentVisitPayload!
    studentVisitSave(studentVisitInput: StudentVisitInput!): StudentVisitPayload!
    studentVisitUpdate(studentVisitInput: StudentVisitInputWithId!): StudentVisitPayload!
    taskDelete(id: ID!): TaskPayload!
    taskPublishUpdate(id: ID!): TaskPayload!
    taskSave(taskInput: TaskInput!): TaskPayload!
    taskUpdate(taskInput: TaskInputWithId!): TaskPayload!
    teamBalanceDelete(id: ID!): TeamBalancePayload!
    teamBalancePublishUpdate(id: ID!): TeamBalancePayload!
    teamBalanceSave(teamBalanceInput: TeamBalanceInput!): TeamBalancePayload!
    teamBalanceUpdate(teamBalanceInput: TeamBalanceInputWithId!): TeamBalancePayload!
    teamDelete(id: ID!): TeamPayload!
    teamPublishUpdate(id: ID!): TeamPayload!
    teamSave(teamInput: TeamInput!): TeamPayload!
    teamUpdate(teamInput: TeamInputWithId!): TeamPayload!
    trainingDayDelete(id: ID!): TrainingDayPayload!
    trainingDayPublishUpdate(id: ID!): TrainingDayPayload!
    trainingDaySave(trainingDayInput: TrainingDayInput!): TrainingDayPayload!
    trainingDayUpdate(trainingDayInput: TrainingDayInputWithId!): TrainingDayPayload!
    trainingDelete(id: ID!): TrainingPayload!
    trainingPublishUpdate(id: ID!): TrainingPayload!
    trainingSave(trainingInput: TrainingInput!): TrainingPayload!
    trainingUpdate(trainingInput: TrainingInputWithId!): TrainingPayload!
    userDelete(id: ID!): UserPayload!
    userPublishUpdate(id: ID!): UserPayload!
    userSave(userInput: UserInput!): UserPayload!
    userUpdate(userInput: UserInputWithId!): UserPayload!
}

type Order {
    cart: Cart
    cartId: ID!
    creator: Creator
    creatorId: ID!
    fileName: String
    id: ID!
    orderStatus: OrderStatus!
    published: Boolean!
}

type OrderConnection {
    edges: [OrderEdge!]!
    pageInfo: PageInfo
}

type OrderEdge {
    cursor: ID!
    node: Order
}

type OrderPayload {
    record: Order
    recordId: ID!
}

type PageInfo {
    endCursor: ID!
    hasNextPage: Boolean
    startCursor: ID!
}

type Place {
    address: String!
    description: String!
    id: ID!
    name: String!
    orderNumber: Int!
    published: Boolean!
}

type PlaceConnection {
    edges: [PlaceEdge!]!
    pageInfo: PageInfo!
}

type PlaceDto {
    id: ID!
    name: String!
}

type PlaceEdge {
    cursor: ID!
    node: Place
}

type PlacePayload {
    record: Place!
    recordId: ID!
}

type Query {
    article(id: ID!): Article
    articles(after: ID, before: ID, filter: ArticleFilter, first: Int, last: Int): ArticleConnection
    cart(id: ID!): Cart
    cartAll: [CartDto!]
    carts(after: ID, before: ID, filter: CartFilter, first: Int, last: Int): CartConnection
    clubBalance(id: ID!): ClubBalance
    clubBalances(after: ID, before: ID, filter: ClubBalanceFilter, first: Int, last: Int): ClubBalanceConnection
    coachPaymentByMonth(id: ID!): CoachPaymentByMonth
    coachPaymentByTeam(id: ID!): CoachPaymentByTeam
    coachPaymentByTraining(id: ID!): CoachPaymentByTraining
    coachPaymentsByMonth(after: ID, before: ID, filter: CoachPaymentByMonthFilter, first: Int, last: Int): CoachPaymentByMonthConnection
    coachPaymentsByTeam(after: ID, before: ID, filter: CoachPaymentByTeamFilter, first: Int, last: Int): CoachPaymentByTeamConnection
    coachPaymentsByTraining(after: ID, before: ID, filter: CoachPaymentByTrainingFilter, first: Int, last: Int): CoachPaymentByTrainingConnection
    creator(Id: ID): Creator
    creatorAll: [CreatorDto!]
    creators(after: ID, before: ID, filter: CreatorFilter, first: Int, last: Int): CreatorConnection
    currentTasks(after: ID, before: ID, filter: TaskFilter, first: Int, last: Int): TaskConnection
    kit(id: ID!): Kit
    kitAll: [KitDto!]
    kits(after: ID, before: ID, filter: KitFilter, first: Int, last: Int): KitConnection
    lead(id: ID!): Lead
    leadAll: [LeadDto!]
    leads(after: ID, before: ID, filter: LeadFilter, first: Int, last: Int): LeadConnection
    moneyCost(id: ID!): MoneyCost
    moneyCosts(after: ID, before: ID, filter: MoneyCostFilter, first: Int, last: Int): MoneyCostConnection
    moneyMove(id: ID!): MoneyMove
    moneyMoves(after: ID, before: ID, filter: MoneyMoveFilter, first: Int, last: Int): MoneyMoveConnection
    nearestStaffBirthdays(after: ID, before: ID, filter: StaffFilter, first: Int, last: Int): StaffConnection
    nearestStudentBirthdays(after: ID, before: ID, filter: StudentFilter, first: Int, last: Int): StudentConnection
    order(id: ID!): Order
    orders(after: ID, before: ID, filter: OrderFilter, first: Int, last: Int): OrderConnection
    place(id: ID!): Place
    placeAll: [PlaceDto!]
    places(after: ID, before: ID, filter: PlaceFilter, first: Int, last: Int): PlaceConnection!
    rentPaymentByMonth(id: ID!): RentPaymentByMonth
    rentPaymentByTraining(id: ID!): RentPaymentByTraining
    rentPaymentsByMonth(after: ID, before: ID, filter: RentPaymentByMonthFilter, first: Int, last: Int): RentPaymentByMonthConnection
    rentPaymentsByTraining(after: ID, before: ID, filter: RentPaymentByTrainingFilter, first: Int, last: Int): RentPaymentByTrainingConnection
    stadium(id: ID!): Stadium
    stadiumAll: [StadiumDto!]
    stadiums(after: ID, before: ID, filter: StadiumFilter, first: Int, last: Int): StadiumConnection
    staff(after: ID, before: ID, filter: StaffFilter, first: Int, last: Int): StaffConnection
    staffAll: [StaffDto!]
    staffPerson(id: ID!): Staff
    student(id: ID!): Student
    studentAll: [StudentDto!]
    studentVisit(id: ID!): StudentVisit
    studentVisits(after: ID, before: ID, filter: StudentVisitFilter, first: Int, last: Int): StudentVisitConnection
    students(after: ID, before: ID, filter: StudentFilter, first: Int, last: Int): StudentConnection
    task(id: ID!): Task
    tasks(after: ID, before: ID, filter: TaskFilter, first: Int, last: Int): TaskConnection
    team(id: ID!): Team
    teamAll: [TeamDto!]
    teamBalance(id: ID!): TeamBalance
    teamBalances(after: ID, before: ID, filter: TeamBalanceFilter, first: Int, last: Int): TeamBalanceConnection
    teams(after: ID, before: ID, filter: TeamFilter, first: Int, last: Int): TeamConnection
    timeTable(after: ID, before: ID, filter: TrainingFilter, first: Int, last: Int): TrainingConnection
    training(id: ID!): Training
    trainingAll: [TrainingDto!]
    trainingDay(id: ID!): TrainingDay
    trainingDays(after: ID, before: ID, filter: TrainingDayFilter, first: Int, last: Int): TrainingDayConnection
    trainings(after: ID, before: ID, filter: TrainingFilter, first: Int, last: Int): TrainingConnection
    trainingsByDay(after: ID, before: ID, filter: TrainingFilter, first: Int, last: Int): TrainingConnection
    unPayedStudents(after: ID, before: ID, filter: StudentFilter, first: Int, last: Int): StudentConnection
    user(id: ID!): User!
    userAll: [UserDto!]
    users(after: ID, before: ID, filter: UserFilter, first: Int, last: Int): UserConnection
}

type RentPaymentByMonth {
    description: String
    id: ID!
    month: Time!
    paymentDate: Time
    published: Boolean!
    stadium: Stadium
    stadiumId: ID!
    sum: Int!
}

type RentPaymentByMonthConnection {
    edges: [RentPaymentByMonthEdge!]!
    pageInfo: PageInfo
}

type RentPaymentByMonthEdge {
    cursor: ID!
    node: RentPaymentByMonth
}

type RentPaymentByMonthPayload {
    record: RentPaymentByMonth
    recordId: ID!
}

type RentPaymentByTraining {
    description: String
    id: ID!
    published: Boolean!
    stadium: Stadium
    stadiumId: ID!
    sum: Int!
    trainingIds: [ID!]!
    trainings: [Training!]
}

type RentPaymentByTrainingConnection {
    edges: [RentPaymentByTrainingEdge!]!
    pageInfo: PageInfo
}

type RentPaymentByTrainingEdge {
    cursor: ID!
    node: RentPaymentByTraining
}

type RentPaymentByTrainingPayload {
    record: RentPaymentByTraining
    recordId: ID!
}

type Stadium {
    id: ID!
    latitude: Float!
    longitude: Float!
    name: String!
    place: Place
    placeId: ID!
    published: Boolean!
}

type StadiumConnection {
    edges: [StadiumEdge!]!
    pageInfo: PageInfo
}

type StadiumDto {
    id: ID!
    name: String!
}

type StadiumEdge {
    cursor: ID!
    node: Stadium
}

type StadiumPayload {
    record: Stadium
    recordId: ID!
}

type Staff {
    birthday: Time
    department: Department!
    description: String
    fileName: String
    id: ID!
    name: String!
    orderNumber: Int!
    phoneNumber: String
    published: Boolean!
    user: User
    userId: ID!
    work: String!
}

type StaffConnection {
    edges: [StaffEdge!]!
    pageInfo: PageInfo
}

type StaffDto {
    id: ID!
    name: String!
}

type StaffEdge {
    cursor: ID!
    node: Staff
}

type StaffPayload {
    record: Staff
    recordId: ID!
}

type Student {
    birthday: Time
    creatorIds: [ID!]!
    creators: [Creator!]
    id: ID!
    name: String!
    passportNum: String
    paymentSum: Int
    published: Boolean!
    teamIds: [ID!]!
    teams: [Team!]
}

type StudentConnection {
    edges: [StudentEdge!]!
    pageInfo: PageInfo
}

type StudentDto {
    id: ID!
    name: String!
}

type StudentEdge {
    cursor: ID!
    node: Student
}

type StudentPayload {
    record: Student
    recordId: ID!
}

type StudentVisit {
    id: ID!
    payed: Boolean!
    published: Boolean!
    student: Student
    studentId: ID!
    training: Training
    trainingId: ID!
    visitStatus: VisitStatus!
}

type StudentVisitConnection {
    edges: [StudentVisitEdge!]!
    pageInfo: PageInfo
}

type StudentVisitEdge {
    cursor: ID!
    node: StudentVisit
}

type StudentVisitPayload {
    record: StudentVisit
    recordId: ID!
}

type Task {
    author: User
    authorId: ID
    description: String
    endTime: Time
    id: ID!
    leadIds: [ID!]
    leads: [Lead!]
    priority: Priority
    published: Boolean!
    result: String
    startTime: Time
    studentIds: [ID!]
    students: [Student!]
    taskStatus: TaskStatus
    title: String!
    workerIds: [ID!]
    workers: [Staff]
}

type TaskConnection {
    edges: [TaskEdge!]!
    pageInfo: PageInfo
}

type TaskEdge {
    cursor: ID!
    node: Task
}

type TaskPayload {
    record: Task
    recordId: ID!
}

type Team {
    ages: [Age!]
    coachIds: [ID!]
    coaches: [Staff!]
    headCoach: Staff
    headCoachId: ID
    id: ID!
    name: String!
    place: Place
    placeId: ID!
    published: Boolean!
    writable: Boolean!
}

type TeamBalance {
    date: Time!
    id: ID!
    published: Boolean!
    rent: Int!
    salary: Int!
    sum: Int!
    team: Team
    teamId: ID!
    tickets: Int!
}

type TeamBalanceConnection {
    edges: [TeamBalanceEdge!]!
    pageInfo: PageInfo
}

type TeamBalanceEdge {
    cursor: ID!
    node: TeamBalance
}

type TeamBalancePayload {
    record: TeamBalance
    recordId: ID!
}

type TeamConnection {
    edges: [TeamEdge!]!
    pageInfo: PageInfo
}

type TeamDto {
    id: ID!
    name: String!
}

type TeamEdge {
    cursor: ID!
    node: Team
}

type TeamPayload {
    record: Team
    recordId: ID!
}

type Token {
    accessToken: String!
    expiration: Time!
    refreshToken: String!
}

type Training {
    coachIds: [ID!]
    coaches: [Staff!]
    headCoach: Staff
    headCoachId: ID
    id: ID!
    published: Boolean!
    stadium: Stadium
    stadiumId: ID
    team: Team
    teamId: ID!
    time: Time
    visits: Int!
}

type TrainingConnection {
    edges: [TrainingEdge!]!
    pageInfo: PageInfo
}

type TrainingDay {
    day: DayOfWeek
    id: ID!
    published: Boolean!
    stadium: Stadium
    stadiumId: ID
    team: Team
    teamId: ID!
    time: Time
}

type TrainingDayConnection {
    edges: [TrainingDayEdge!]!
    pageInfo: PageInfo
}

type TrainingDayEdge {
    cursor: ID!
    node: TrainingDay
}

type TrainingDayPayload {
    record: TrainingDay
    recordId: ID!
}

type TrainingDto {
    id: ID!
    name: String!
}

type TrainingEdge {
    cursor: ID!
    node: Training
}

type TrainingPayload {
    record: Training
    recordId: ID!
}

type User {
    firstName: String!
    id: ID!
    lastName: String!
    phone: String!
    roles: [Role!]!
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo
}

type UserDto {
    id: ID!
    name: String!
}

type UserEdge {
    cursor: ID!
    node: User
}

type UserPayload {
    record: User
    recordId: ID!
}

enum Age {
    PRESCHOOL
    SCHOOL
}

enum CoachPaymentRule {
    BY_TEAM
    BY_TRAINING
}

enum DayOfWeek {
    FRIDAY
    MONDAY
    SATURDAY
    SUNDAY
    THURSDAY
    TUESDAY
    WEDNESDAY
}

enum Department {
    COACH
    HEAD
}

enum LeadSource {
    BROTHER
    FRIENDS
    GIS
    GOOGLE
    INSTAGRAM
    LIFT
    OTHER_PARENTS
    PAPER
    RETURNED
    TELEGRAM
    VKONTAKTE
    YANDEX
    YANDEX_MAP
}

enum LeadStatus {
    APPROVE_FIRST_TRAINING
    CANCEL_AFTER_APPROVE_FIRST_TRAINING
    CANCEL_AFTER_FIRST_TRAINING
    CANCEL_AFTER_WRITE
    CONTRACTED
    FIRST_TRAINING
    FIRST_TRAINING_ADD
    WANT_CONTRACT
    WRITE
}

enum MoneyForm {
    BANK_TRANSFER
    CARD_TRANSFER
    CASH
}

enum OrderStatus {
    CANCELED
    CREATED
    FINISHED
    IN_DELIVERY
    PAYED
    READY_TO_GET
}

enum Priority {
    HIGH
    HIGHEST
    LOW
    MIDDLE
}

enum Role {
    ADMIN
    COACH
    DIRECTOR
    ECONOMIST
    EDITOR
    USER
}

enum TaskStatus {
    CANCEL
    DONE
    NEW
    WORK
}

enum VisitStatus {
    ABSENT
    HOLIDAY
    ILL
    VISITED
}

scalar Time

input ArticleFilter {
    title: String
}

input ArticleInput {
    description: String!
    fileName: String
    published: Boolean!
    tags: [String!]
    title: String!
}

input ArticleInputWithId {
    id: ID!
    input: ArticleInput!
}

input CartFilter {
    name: String
}

input CartInput {
    kitIds: [ID!]!
    published: Boolean!
    studentId: ID!
    sum: Int!
}

input CartInputWithId {
    id: ID!
    input: CartInput!
}

input ClubBalanceFilter {
    name: String
}

input ClubBalanceInput {
    date: Time!
    otherCosts: Int!
    published: Boolean!
    rent: Int!
    salary: Int!
    tickets: Int!
}

input ClubBalanceInputWithId {
    id: ID!
    input: ClubBalanceInput!
}

input CoachPaymentByMonthFilter {
    name: String
}

input CoachPaymentByMonthInput {
    coachId: ID!
    date: Time!
    published: Boolean!
    sum: Int!
}

input CoachPaymentByMonthInputWithId {
    id: ID!
    input: CoachPaymentByMonthInput!
}

input CoachPaymentByTeamFilter {
    name: String
}

input CoachPaymentByTeamInput {
    coachId: ID!
    dateFinish: Time!
    dateStart: Time!
    paymentRule: CoachPaymentRule!
    published: Boolean!
    sum: Int!
    teamID: ID!
}

input CoachPaymentByTeamInputWithId {
    id: ID!
    input: CoachPaymentByTeamInput!
}

input CoachPaymentByTrainingFilter {
    name: String
}

input CoachPaymentByTrainingInput {
    coachId: ID!
    published: Boolean!
    sum: Int!
    trainingID: ID!
}

input CoachPaymentByTrainingInputWithId {
    id: ID!
    input: CoachPaymentByTrainingInput!
}

input CreatorFilter {
    name: String
}

input CreatorInput {
    name: String!
    passportNum: String
    phone: String!
    published: Boolean!
    userId: ID
}

input CreatorInputWithId {
    id: ID!
    input: CreatorInput!
}

input KitFilter {
    name: String
}

input KitInput {
    fileName: String
    name: String!
    number: Int
    price: Int!
    published: Boolean!
    quantity: Int
    size: String!
    title: String
}

input KitInputWithId {
    id: ID!
    input: KitInput!
}

input LeadFilter {
    name: String
}

input LeadInput {
    description: String
    name: String
    nextVisitId: ID
    phone: String!
    published: Boolean!
    source: LeadSource
    status: LeadStatus
    studentIds: [ID!]
    teamId: ID
    yearBorn: Int
}

input LeadInputWithId {
    id: ID!
    input: LeadInput!
}

input LoginInput {
    password: String!
    phone: String!
}

input MoneyCostFilter {
    name: String
}

input MoneyCostInput {
    date: Time!
    description: String!
    moneyForm: MoneyForm!
    published: Boolean!
    staffId: ID!
    sum: Int!
}

input MoneyCostInputWithId {
    id: ID!
    input: MoneyCostInput!
}

input MoneyMoveFilter {
    name: String
}

input MoneyMoveInput {
    dateFinish: Time!
    datePayment: Time!
    dateStart: Time!
    description: String
    moneyForm: MoneyForm!
    ownerId: ID!
    published: Boolean!
    studentId: ID!
    sum: Int!
    userId: ID!
}

input MoneyMoveInputWithId {
    id: ID!
    input: MoneyMoveInput!
}

input OrderFilter {
    name: String
}

input OrderInput {
    cartId: ID!
    creatorId: ID!
    fileName: String
    orderStatus: OrderStatus!
    published: Boolean!
}

input OrderInputWithId {
    id: ID!
    input: OrderInput!
}

input PlaceFilter {
    name: String
}

input PlaceInput {
    address: String!
    description: String!
    name: String!
    orderNumber: Int!
    published: Boolean!
}

input PlaceInputWithId {
    id: ID!
    input: PlaceInput!
}

input RegisterInput {
    confirmPassword: String!
    firstName: String!
    lastName: String!
    password: String!
    phone: String!
}

input RentPaymentByMonthFilter {
    name: String
}

input RentPaymentByMonthInput {
    description: String
    month: Time!
    paymentDate: Time!
    published: Boolean!
    stadiumId: ID!
    sum: Int!
}

input RentPaymentByMonthInputWithId {
    id: ID!
    input: RentPaymentByMonthInput!
}

input RentPaymentByTrainingFilter {
    name: String
}

input RentPaymentByTrainingInput {
    description: String
    published: Boolean!
    stadiumID: ID!
    sum: Int!
    trainingIds: [ID!]!
}

input RentPaymentByTrainingInputWithId {
    id: ID!
    input: RentPaymentByTrainingInput!
}

input StadiumFilter {
    name: String
}

input StadiumInput {
    latitude: Float!
    longitude: Float!
    name: String!
    placeId: ID!
    published: Boolean!
}

input StadiumInputWithId {
    id: ID!
    input: StadiumInput!
}

input StaffFilter {
    name: String
}

input StaffInput {
    birthday: Time
    department: Department!
    description: String
    fileName: String
    name: String!
    orderNumber: Int!
    phoneNumber: String
    published: Boolean!
    userId: ID
    work: String!
}

input StaffInputWithId {
    id: ID!
    input: StaffInput!
}

input StudentFilter {
    name: String
}

input StudentInput {
    birthday: Time
    creatorIds: [ID!]!
    name: String!
    passportNum: String
    paymentSum: Int
    published: Boolean!
    teamIds: [ID!]!
}

input StudentInputWithId {
    id: ID!
    input: StudentInput!
}

input StudentVisitFilter {
    name: String
}

input StudentVisitInput {
    payed: Boolean!
    published: Boolean!
    studentId: ID!
    trainingId: ID!
    visitStatus: VisitStatus!
}

input StudentVisitInputWithId {
    id: ID!
    input: StudentVisitInput!
}

input TaskFilter {
    name: String
}

input TaskInput {
    authorId: ID
    description: String
    endTime: Time
    leadIds: [ID!]
    priority: Priority
    published: Boolean!
    result: String
    startTime: Time
    studentIds: [ID!]
    taskStatus: TaskStatus
    title: String!
    workerIds: [ID!]
}

input TaskInputWithId {
    id: ID!
    input: TaskInput!
}

input TeamBalanceFilter {
    name: String
}

input TeamBalanceInput {
    date: Time!
    published: Boolean!
    rent: Int!
    salary: Int!
    teamId: ID!
    tickets: Int!
}

input TeamBalanceInputWithId {
    id: ID!
    input: TeamBalanceInput!
}

input TeamFilter {
    name: String
}

input TeamInput {
    ages: [Age!]
    coachIds: [ID!]
    headCoachId: ID
    name: String!
    placeId: ID!
    published: Boolean!
    writable: Boolean!
}

input TeamInputWithId {
    id: ID!
    input: TeamInput!
}

input TrainingDayFilter {
    name: String
}

input TrainingDayInput {
    day: DayOfWeek
    published: Boolean!
    stadiumId: ID
    teamId: ID!
    time: Time
}

input TrainingDayInputWithId {
    id: ID!
    input: TrainingDayInput!
}

input TrainingFilter {
    name: String
}

input TrainingInput {
    coachIds: [ID!]
    headCoachId: ID
    published: Boolean!
    stadiumId: ID
    teamId: ID!
    time: Time!
    visits: Int!
}

input TrainingInputWithId {
    id: ID!
    input: TrainingInput!
}

input UserFilter {
    name: String
}

input UserInput {
    name: String!
    password: String
    phone: String!
    published: Boolean!
    role: Role!
}

input UserInputWithId {
    id: ID!
    input: UserInput!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNRole2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_articleDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_articlePublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_articleSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ArticleInput
	if tmp, ok := rawArgs["articleInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("articleInput"))
		arg0, err = ec.unmarshalNArticleInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["articleInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_articleUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ArticleInputWithID
	if tmp, ok := rawArgs["articleInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("articleInput"))
		arg0, err = ec.unmarshalNArticleInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["articleInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cartDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cartPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cartSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CartInput
	if tmp, ok := rawArgs["cartInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cartInput"))
		arg0, err = ec.unmarshalNCartInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cartInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cartUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CartInputWithID
	if tmp, ok := rawArgs["cartInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cartInput"))
		arg0, err = ec.unmarshalNCartInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cartInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_clubBalanceDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_clubBalancePublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_clubBalanceSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ClubBalanceInput
	if tmp, ok := rawArgs["clubBalanceInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubBalanceInput"))
		arg0, err = ec.unmarshalNClubBalanceInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clubBalanceInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_clubBalanceUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ClubBalanceInputWithID
	if tmp, ok := rawArgs["clubBalanceInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clubBalanceInput"))
		arg0, err = ec.unmarshalNClubBalanceInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clubBalanceInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByMonthDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByMonthPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByMonthSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CoachPaymentByMonthInput
	if tmp, ok := rawArgs["coachPaymentByMonthInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachPaymentByMonthInput"))
		arg0, err = ec.unmarshalNCoachPaymentByMonthInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["coachPaymentByMonthInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByMonthUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CoachPaymentByMonthInputWithID
	if tmp, ok := rawArgs["coachPaymentByMonthInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachPaymentByMonthInput"))
		arg0, err = ec.unmarshalNCoachPaymentByMonthInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["coachPaymentByMonthInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTeamDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTeamPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTeamSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CoachPaymentByTeamInput
	if tmp, ok := rawArgs["coachPaymentByTeamInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachPaymentByTeamInput"))
		arg0, err = ec.unmarshalNCoachPaymentByTeamInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["coachPaymentByTeamInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTeamUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CoachPaymentByTeamInputWithID
	if tmp, ok := rawArgs["coachPaymentByTeamInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachPaymentByTeamInput"))
		arg0, err = ec.unmarshalNCoachPaymentByTeamInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["coachPaymentByTeamInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTrainingDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTrainingPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTrainingSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CoachPaymentByTrainingInput
	if tmp, ok := rawArgs["coachPaymentByTrainingInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachPaymentByTrainingInput"))
		arg0, err = ec.unmarshalNCoachPaymentByTrainingInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["coachPaymentByTrainingInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_coachPaymentByTrainingUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CoachPaymentByTrainingInputWithID
	if tmp, ok := rawArgs["coachPaymentByTrainingInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachPaymentByTrainingInput"))
		arg0, err = ec.unmarshalNCoachPaymentByTrainingInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["coachPaymentByTrainingInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_creatorDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_creatorPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_creatorSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreatorInput
	if tmp, ok := rawArgs["creatorInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorInput"))
		arg0, err = ec.unmarshalNCreatorInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["creatorInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_creatorUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CreatorInputWithID
	if tmp, ok := rawArgs["creatorInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorInput"))
		arg0, err = ec.unmarshalNCreatorInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["creatorInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_kitDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_kitPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_kitSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.KitInput
	if tmp, ok := rawArgs["kitInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kitInput"))
		arg0, err = ec.unmarshalNKitInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kitInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_kitUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.KitInputWithID
	if tmp, ok := rawArgs["kitInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kitInput"))
		arg0, err = ec.unmarshalNKitInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kitInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leadDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leadPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leadSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.LeadInput
	if tmp, ok := rawArgs["leadInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leadInput"))
		arg0, err = ec.unmarshalNLeadInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["leadInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_leadUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.LeadInputWithID
	if tmp, ok := rawArgs["leadInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leadInput"))
		arg0, err = ec.unmarshalNLeadInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["leadInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.LoginInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLoginInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLoginInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyCostDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyCostPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyCostSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.MoneyCostInput
	if tmp, ok := rawArgs["moneyCostInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moneyCostInput"))
		arg0, err = ec.unmarshalNMoneyCostInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moneyCostInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyCostUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.MoneyCostInputWithID
	if tmp, ok := rawArgs["moneyCostInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moneyCostInput"))
		arg0, err = ec.unmarshalNMoneyCostInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moneyCostInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyMoveDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyMovePublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyMoveSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.MoneyMoveInput
	if tmp, ok := rawArgs["moneyMoveInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moneyMoveInput"))
		arg0, err = ec.unmarshalNMoneyMoveInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moneyMoveInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moneyMoveUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.MoneyMoveInputWithID
	if tmp, ok := rawArgs["moneyMoveInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moneyMoveInput"))
		arg0, err = ec.unmarshalNMoneyMoveInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moneyMoveInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_orderDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_orderPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_orderSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.OrderInput
	if tmp, ok := rawArgs["orderInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderInput"))
		arg0, err = ec.unmarshalNOrderInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_orderUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.OrderInputWithID
	if tmp, ok := rawArgs["orderInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderInput"))
		arg0, err = ec.unmarshalNOrderInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_placeDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_placePublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_placeSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PlaceInput
	if tmp, ok := rawArgs["placeInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placeInput"))
		arg0, err = ec.unmarshalNPlaceInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["placeInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_placeUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PlaceInputWithID
	if tmp, ok := rawArgs["placeInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placeInput"))
		arg0, err = ec.unmarshalNPlaceInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["placeInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refresh_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_register_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RegisterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRegisterInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRegisterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByMonthDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByMonthPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByMonthSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RentPaymentByMonthInput
	if tmp, ok := rawArgs["rentPaymentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentPaymentInput"))
		arg0, err = ec.unmarshalNRentPaymentByMonthInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rentPaymentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByMonthUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RentPaymentByMonthInputWithID
	if tmp, ok := rawArgs["rentPaymentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentPaymentInput"))
		arg0, err = ec.unmarshalNRentPaymentByMonthInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rentPaymentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByTrainingDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByTrainingPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByTrainingSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RentPaymentByTrainingInput
	if tmp, ok := rawArgs["rentPaymentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentPaymentInput"))
		arg0, err = ec.unmarshalNRentPaymentByTrainingInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rentPaymentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rentPaymentByTrainingUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RentPaymentByTrainingInputWithID
	if tmp, ok := rawArgs["rentPaymentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentPaymentInput"))
		arg0, err = ec.unmarshalNRentPaymentByTrainingInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rentPaymentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stadiumDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stadiumPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stadiumSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StadiumInput
	if tmp, ok := rawArgs["stadiumInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stadiumInput"))
		arg0, err = ec.unmarshalNStadiumInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stadiumInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stadiumUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StadiumInputWithID
	if tmp, ok := rawArgs["stadiumInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stadiumInput"))
		arg0, err = ec.unmarshalNStadiumInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stadiumInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_staffDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_staffPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_staffSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StaffInput
	if tmp, ok := rawArgs["staffInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffInput"))
		arg0, err = ec.unmarshalNStaffInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_staffUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StaffInputWithID
	if tmp, ok := rawArgs["staffInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffInput"))
		arg0, err = ec.unmarshalNStaffInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StudentInput
	if tmp, ok := rawArgs["studentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentInput"))
		arg0, err = ec.unmarshalNStudentInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StudentInputWithID
	if tmp, ok := rawArgs["studentInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentInput"))
		arg0, err = ec.unmarshalNStudentInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentVisitDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentVisitPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentVisitSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StudentVisitInput
	if tmp, ok := rawArgs["studentVisitInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentVisitInput"))
		arg0, err = ec.unmarshalNStudentVisitInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentVisitInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studentVisitUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.StudentVisitInputWithID
	if tmp, ok := rawArgs["studentVisitInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentVisitInput"))
		arg0, err = ec.unmarshalNStudentVisitInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studentVisitInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_taskDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_taskPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_taskSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TaskInput
	if tmp, ok := rawArgs["taskInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskInput"))
		arg0, err = ec.unmarshalNTaskInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taskInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_taskUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TaskInputWithID
	if tmp, ok := rawArgs["taskInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskInput"))
		arg0, err = ec.unmarshalNTaskInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taskInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamBalanceDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamBalancePublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamBalanceSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TeamBalanceInput
	if tmp, ok := rawArgs["teamBalanceInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamBalanceInput"))
		arg0, err = ec.unmarshalNTeamBalanceInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["teamBalanceInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamBalanceUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TeamBalanceInputWithID
	if tmp, ok := rawArgs["teamBalanceInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamBalanceInput"))
		arg0, err = ec.unmarshalNTeamBalanceInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["teamBalanceInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TeamInput
	if tmp, ok := rawArgs["teamInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamInput"))
		arg0, err = ec.unmarshalNTeamInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["teamInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_teamUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TeamInputWithID
	if tmp, ok := rawArgs["teamInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamInput"))
		arg0, err = ec.unmarshalNTeamInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["teamInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingDayDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingDayPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingDaySave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TrainingDayInput
	if tmp, ok := rawArgs["trainingDayInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingDayInput"))
		arg0, err = ec.unmarshalNTrainingDayInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["trainingDayInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingDayUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TrainingDayInputWithID
	if tmp, ok := rawArgs["trainingDayInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingDayInput"))
		arg0, err = ec.unmarshalNTrainingDayInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["trainingDayInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TrainingInput
	if tmp, ok := rawArgs["trainingInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingInput"))
		arg0, err = ec.unmarshalNTrainingInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["trainingInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trainingUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.TrainingInputWithID
	if tmp, ok := rawArgs["trainingInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingInput"))
		arg0, err = ec.unmarshalNTrainingInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["trainingInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userPublishUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userSave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UserInput
	if tmp, ok := rawArgs["userInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userInput"))
		arg0, err = ec.unmarshalNUserInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UserInputWithID
	if tmp, ok := rawArgs["userInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userInput"))
		arg0, err = ec.unmarshalNUserInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserInputWithID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_article_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_articles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.ArticleFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOArticleFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_cart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_carts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.CartFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCartFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_clubBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_clubBalances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.ClubBalanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOClubBalanceFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_coachPaymentByMonth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_coachPaymentByTeam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_coachPaymentByTraining_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_coachPaymentsByMonth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.CoachPaymentByMonthFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCoachPaymentByMonthFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_coachPaymentsByTeam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.CoachPaymentByTeamFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCoachPaymentByTeamFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_coachPaymentsByTraining_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.CoachPaymentByTrainingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCoachPaymentByTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_creator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_creators_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.CreatorFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOCreatorFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_currentTasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TaskFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTaskFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_kit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_kits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.KitFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOKitFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_lead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_leads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.LeadFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOLeadFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_moneyCost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_moneyCosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.MoneyCostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOMoneyCostFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_moneyMove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_moneyMoves_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.MoneyMoveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOMoneyMoveFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_nearestStaffBirthdays_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.StaffFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOStaffFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_nearestStudentBirthdays_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.StudentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOStudentFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_order_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_orders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.OrderFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOOrderFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_place_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_places_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.PlaceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPlaceFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_rentPaymentByMonth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rentPaymentByTraining_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rentPaymentsByMonth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.RentPaymentByMonthFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalORentPaymentByMonthFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_rentPaymentsByTraining_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.RentPaymentByTrainingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalORentPaymentByTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_stadium_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_stadiums_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.StadiumFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOStadiumFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_staffPerson_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_staff_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.StaffFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOStaffFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_studentVisit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_studentVisits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.StudentVisitFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOStudentVisitFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_student_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_students_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.StudentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOStudentFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_task_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TaskFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTaskFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_teamBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_teamBalances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TeamBalanceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTeamBalanceFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_team_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_teams_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TeamFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTeamFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_timeTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TrainingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_trainingDay_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_trainingDays_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TrainingDayFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTrainingDayFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_training_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_trainingsByDay_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TrainingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_trainings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.TrainingFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_unPayedStudents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.StudentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOStudentFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg1
	var arg2 *models.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOUserFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg4
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Article_author(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Article().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_author(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_authorId(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_authorId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_authorId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_description(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_fileName(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_id(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_published(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_tags(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Article_title(ctx context.Context, field graphql.CollectedField, obj *models.Article) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Article_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Article_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Article",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ArticleEdge)
	fc.Result = res
	return ec.marshalNArticleEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ArticleEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ArticleEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.ArticleConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.ArticleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticleEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.ArticleEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticleEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Article)
	fc.Result = res
	return ec.marshalOArticle2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticleEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticleEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorId":
				return ec.fieldContext_Article_authorId(ctx, field)
			case "description":
				return ec.fieldContext_Article_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Article_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "published":
				return ec.fieldContext_Article_published(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticlePayload_record(ctx context.Context, field graphql.CollectedField, obj *models.ArticlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticlePayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Article)
	fc.Result = res
	return ec.marshalOArticle2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticlePayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorId":
				return ec.fieldContext_Article_authorId(ctx, field)
			case "description":
				return ec.fieldContext_Article_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Article_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "published":
				return ec.fieldContext_Article_published(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArticlePayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.ArticlePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArticlePayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArticlePayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArticlePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthResponse_authToken(ctx context.Context, field graphql.CollectedField, obj *models.AuthResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthResponse_authToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AuthToken)
	fc.Result = res
	return ec.marshalNAuthToken2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAuthToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthResponse_authToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_AuthToken_accessToken(ctx, field)
			case "expiredAt":
				return ec.fieldContext_AuthToken_expiredAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthResponse_user(ctx context.Context, field graphql.CollectedField, obj *models.AuthResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthResponse_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthResponse_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthToken_accessToken(ctx context.Context, field graphql.CollectedField, obj *models.AuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthToken_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthToken_accessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthToken_expiredAt(ctx context.Context, field graphql.CollectedField, obj *models.AuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthToken_expiredAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthToken_expiredAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_id(ctx context.Context, field graphql.CollectedField, obj *models.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_kitIds(ctx context.Context, field graphql.CollectedField, obj *models.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_kitIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KitIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_kitIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_published(ctx context.Context, field graphql.CollectedField, obj *models.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_student(ctx context.Context, field graphql.CollectedField, obj *models.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_student(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Student, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_student(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_studentId(ctx context.Context, field graphql.CollectedField, obj *models.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_studentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_studentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Cart_sum(ctx context.Context, field graphql.CollectedField, obj *models.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Cart_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Cart_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.CartConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CartEdge)
	fc.Result = res
	return ec.marshalNCartEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CartEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CartEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.CartConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDto_id(ctx context.Context, field graphql.CollectedField, obj *models.CartDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartDto_name(ctx context.Context, field graphql.CollectedField, obj *models.CartDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.CartEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.CartEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "kitIds":
				return ec.fieldContext_Cart_kitIds(ctx, field)
			case "published":
				return ec.fieldContext_Cart_published(ctx, field)
			case "student":
				return ec.fieldContext_Cart_student(ctx, field)
			case "studentId":
				return ec.fieldContext_Cart_studentId(ctx, field)
			case "sum":
				return ec.fieldContext_Cart_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.CartPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "kitIds":
				return ec.fieldContext_Cart_kitIds(ctx, field)
			case "published":
				return ec.fieldContext_Cart_published(ctx, field)
			case "student":
				return ec.fieldContext_Cart_student(ctx, field)
			case "studentId":
				return ec.fieldContext_Cart_studentId(ctx, field)
			case "sum":
				return ec.fieldContext_Cart_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CartPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.CartPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CartPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CartPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CartPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_date(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_id(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_otherCosts(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_otherCosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherCosts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_otherCosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_published(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_rent(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_rent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_rent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_salary(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_salary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_salary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_sum(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalance_tickets(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalance_tickets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tickets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalance_tickets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalanceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalanceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalanceConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ClubBalanceEdge)
	fc.Result = res
	return ec.marshalNClubBalanceEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalanceConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalanceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ClubBalanceEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ClubBalanceEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalanceEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalanceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalanceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalanceConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalanceConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalanceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalanceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalanceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalanceEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalanceEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalanceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalanceEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalanceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalanceEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalance)
	fc.Result = res
	return ec.marshalOClubBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalanceEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalanceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_ClubBalance_date(ctx, field)
			case "id":
				return ec.fieldContext_ClubBalance_id(ctx, field)
			case "otherCosts":
				return ec.fieldContext_ClubBalance_otherCosts(ctx, field)
			case "published":
				return ec.fieldContext_ClubBalance_published(ctx, field)
			case "rent":
				return ec.fieldContext_ClubBalance_rent(ctx, field)
			case "salary":
				return ec.fieldContext_ClubBalance_salary(ctx, field)
			case "sum":
				return ec.fieldContext_ClubBalance_sum(ctx, field)
			case "tickets":
				return ec.fieldContext_ClubBalance_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalancePayload_record(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalancePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalancePayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalance)
	fc.Result = res
	return ec.marshalOClubBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalancePayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalancePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_ClubBalance_date(ctx, field)
			case "id":
				return ec.fieldContext_ClubBalance_id(ctx, field)
			case "otherCosts":
				return ec.fieldContext_ClubBalance_otherCosts(ctx, field)
			case "published":
				return ec.fieldContext_ClubBalance_published(ctx, field)
			case "rent":
				return ec.fieldContext_ClubBalance_rent(ctx, field)
			case "salary":
				return ec.fieldContext_ClubBalance_salary(ctx, field)
			case "sum":
				return ec.fieldContext_ClubBalance_sum(ctx, field)
			case "tickets":
				return ec.fieldContext_ClubBalance_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClubBalancePayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.ClubBalancePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClubBalancePayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClubBalancePayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClubBalancePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonth_coach(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonth_coach(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coach, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonth_coach(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonth_coachId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonth_coachId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoachID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonth_coachId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonth_date(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonth_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonth_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonth_id(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonth_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonth_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonth_published(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonth_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonth_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonth_sum(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonth_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonth_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonthConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonthConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonthConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CoachPaymentByMonthEdge)
	fc.Result = res
	return ec.marshalNCoachPaymentByMonthEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonthConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonthConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CoachPaymentByMonthEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CoachPaymentByMonthEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonthEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonthConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonthConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonthConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonthConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonthConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonthEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonthEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonthEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonthEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonthEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonthEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonthEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonthEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonth)
	fc.Result = res
	return ec.marshalOCoachPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonthEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonthEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByMonth_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByMonth_coachId(ctx, field)
			case "date":
				return ec.fieldContext_CoachPaymentByMonth_date(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByMonth_id(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByMonth_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByMonth_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonthPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonthPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonthPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonth)
	fc.Result = res
	return ec.marshalOCoachPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonthPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonthPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByMonth_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByMonth_coachId(ctx, field)
			case "date":
				return ec.fieldContext_CoachPaymentByMonth_date(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByMonth_id(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByMonth_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByMonth_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByMonthPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByMonthPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByMonthPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByMonthPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByMonthPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_coach(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_coach(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coach, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_coach(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_coachId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_coachId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoachID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_coachId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_dateFinish(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_dateFinish(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_dateFinish(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_dateStart(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_dateStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_dateStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_id(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_paymentRule(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_paymentRule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentRule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentRule)
	fc.Result = res
	return ec.marshalOCoachPaymentRule2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentRule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_paymentRule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CoachPaymentRule does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_published(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_sum(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_team(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeam_teamId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeam_teamId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeam_teamId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeamConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeamConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeamConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CoachPaymentByTeamEdge)
	fc.Result = res
	return ec.marshalNCoachPaymentByTeamEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeamConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeamConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CoachPaymentByTeamEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CoachPaymentByTeamEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeamEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeamConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeamConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeamConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeamConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeamConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeamEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeamEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeamEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeamEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeamEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeamEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeamEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeamEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeam)
	fc.Result = res
	return ec.marshalOCoachPaymentByTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeamEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeamEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByTeam_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByTeam_coachId(ctx, field)
			case "dateFinish":
				return ec.fieldContext_CoachPaymentByTeam_dateFinish(ctx, field)
			case "dateStart":
				return ec.fieldContext_CoachPaymentByTeam_dateStart(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByTeam_id(ctx, field)
			case "paymentRule":
				return ec.fieldContext_CoachPaymentByTeam_paymentRule(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByTeam_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByTeam_sum(ctx, field)
			case "team":
				return ec.fieldContext_CoachPaymentByTeam_team(ctx, field)
			case "teamId":
				return ec.fieldContext_CoachPaymentByTeam_teamId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeam", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeamPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeamPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeamPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeam)
	fc.Result = res
	return ec.marshalOCoachPaymentByTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeamPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeamPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByTeam_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByTeam_coachId(ctx, field)
			case "dateFinish":
				return ec.fieldContext_CoachPaymentByTeam_dateFinish(ctx, field)
			case "dateStart":
				return ec.fieldContext_CoachPaymentByTeam_dateStart(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByTeam_id(ctx, field)
			case "paymentRule":
				return ec.fieldContext_CoachPaymentByTeam_paymentRule(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByTeam_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByTeam_sum(ctx, field)
			case "team":
				return ec.fieldContext_CoachPaymentByTeam_team(ctx, field)
			case "teamId":
				return ec.fieldContext_CoachPaymentByTeam_teamId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeam", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTeamPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTeamPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTeamPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTeamPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTeamPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTraining_coach(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTraining_coach(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coach, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTraining_coach(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTraining_coachId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTraining_coachId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoachID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTraining_coachId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTraining_id(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTraining_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTraining_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTraining_published(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTraining_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTraining_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTraining_sum(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTraining_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTraining_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTraining_training(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTraining_training(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Training, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Training)
	fc.Result = res
	return ec.marshalOTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTraining_training(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coachIds":
				return ec.fieldContext_Training_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Training_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Training_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Training_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Training_id(ctx, field)
			case "published":
				return ec.fieldContext_Training_published(ctx, field)
			case "stadium":
				return ec.fieldContext_Training_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_Training_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_Training_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Training_teamId(ctx, field)
			case "time":
				return ec.fieldContext_Training_time(ctx, field)
			case "visits":
				return ec.fieldContext_Training_visits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Training", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTraining_trainingId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTraining_trainingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTraining_trainingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTrainingConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTrainingConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTrainingConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CoachPaymentByTrainingEdge)
	fc.Result = res
	return ec.marshalNCoachPaymentByTrainingEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTrainingConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTrainingConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CoachPaymentByTrainingEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CoachPaymentByTrainingEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTrainingEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTrainingConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTrainingConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTrainingConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTrainingConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTrainingConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTrainingEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTrainingEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTrainingEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTrainingEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTrainingEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTrainingEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTrainingEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTrainingEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTraining)
	fc.Result = res
	return ec.marshalOCoachPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTrainingEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTrainingEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByTraining_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByTraining_coachId(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByTraining_id(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByTraining_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByTraining_sum(ctx, field)
			case "training":
				return ec.fieldContext_CoachPaymentByTraining_training(ctx, field)
			case "trainingId":
				return ec.fieldContext_CoachPaymentByTraining_trainingId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTraining", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTrainingPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTrainingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTrainingPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTraining)
	fc.Result = res
	return ec.marshalOCoachPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTrainingPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTrainingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByTraining_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByTraining_coachId(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByTraining_id(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByTraining_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByTraining_sum(ctx, field)
			case "training":
				return ec.fieldContext_CoachPaymentByTraining_training(ctx, field)
			case "trainingId":
				return ec.fieldContext_CoachPaymentByTraining_trainingId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTraining", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CoachPaymentByTrainingPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.CoachPaymentByTrainingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CoachPaymentByTrainingPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CoachPaymentByTrainingPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CoachPaymentByTrainingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Creator_id(ctx context.Context, field graphql.CollectedField, obj *models.Creator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Creator_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Creator_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Creator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Creator_name(ctx context.Context, field graphql.CollectedField, obj *models.Creator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Creator_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Creator_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Creator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Creator_passportNum(ctx context.Context, field graphql.CollectedField, obj *models.Creator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Creator_passportNum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Creator_passportNum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Creator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Creator_phone(ctx context.Context, field graphql.CollectedField, obj *models.Creator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Creator_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Creator_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Creator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Creator_published(ctx context.Context, field graphql.CollectedField, obj *models.Creator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Creator_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Creator_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Creator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Creator_user(ctx context.Context, field graphql.CollectedField, obj *models.Creator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Creator_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Creator().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Creator_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Creator",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Creator_userId(ctx context.Context, field graphql.CollectedField, obj *models.Creator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Creator_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Creator_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Creator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.CreatorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CreatorEdge)
	fc.Result = res
	return ec.marshalNCreatorEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_CreatorEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_CreatorEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatorEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.CreatorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorDto_id(ctx context.Context, field graphql.CollectedField, obj *models.CreatorDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorDto_name(ctx context.Context, field graphql.CollectedField, obj *models.CreatorDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.CreatorEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.CreatorEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Creator)
	fc.Result = res
	return ec.marshalOCreator2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Creator_id(ctx, field)
			case "name":
				return ec.fieldContext_Creator_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Creator_passportNum(ctx, field)
			case "phone":
				return ec.fieldContext_Creator_phone(ctx, field)
			case "published":
				return ec.fieldContext_Creator_published(ctx, field)
			case "user":
				return ec.fieldContext_Creator_user(ctx, field)
			case "userId":
				return ec.fieldContext_Creator_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Creator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.CreatorPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Creator)
	fc.Result = res
	return ec.marshalOCreator2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Creator_id(ctx, field)
			case "name":
				return ec.fieldContext_Creator_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Creator_passportNum(ctx, field)
			case "phone":
				return ec.fieldContext_Creator_phone(ctx, field)
			case "published":
				return ec.fieldContext_Creator_published(ctx, field)
			case "user":
				return ec.fieldContext_Creator_user(ctx, field)
			case "userId":
				return ec.fieldContext_Creator_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Creator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatorPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.CreatorPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatorPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatorPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatorPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_fileName(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_id(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_name(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_number(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_price(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_published(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_quantity(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_quantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_size(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Kit_title(ctx context.Context, field graphql.CollectedField, obj *models.Kit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Kit_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Kit_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Kit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.KitConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.KitEdge)
	fc.Result = res
	return ec.marshalNKitEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_KitEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_KitEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KitEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.KitConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitDto_id(ctx context.Context, field graphql.CollectedField, obj *models.KitDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitDto_name(ctx context.Context, field graphql.CollectedField, obj *models.KitDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.KitEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.KitEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Kit)
	fc.Result = res
	return ec.marshalOKit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fileName":
				return ec.fieldContext_Kit_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Kit_id(ctx, field)
			case "name":
				return ec.fieldContext_Kit_name(ctx, field)
			case "number":
				return ec.fieldContext_Kit_number(ctx, field)
			case "price":
				return ec.fieldContext_Kit_price(ctx, field)
			case "published":
				return ec.fieldContext_Kit_published(ctx, field)
			case "quantity":
				return ec.fieldContext_Kit_quantity(ctx, field)
			case "size":
				return ec.fieldContext_Kit_size(ctx, field)
			case "title":
				return ec.fieldContext_Kit_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Kit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.KitPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Kit)
	fc.Result = res
	return ec.marshalOKit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fileName":
				return ec.fieldContext_Kit_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Kit_id(ctx, field)
			case "name":
				return ec.fieldContext_Kit_name(ctx, field)
			case "number":
				return ec.fieldContext_Kit_number(ctx, field)
			case "price":
				return ec.fieldContext_Kit_price(ctx, field)
			case "published":
				return ec.fieldContext_Kit_published(ctx, field)
			case "quantity":
				return ec.fieldContext_Kit_quantity(ctx, field)
			case "size":
				return ec.fieldContext_Kit_size(ctx, field)
			case "title":
				return ec.fieldContext_Kit_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Kit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _KitPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.KitPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KitPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KitPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KitPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_description(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_id(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_name(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_nextVisit(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_nextVisit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextVisit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Training)
	fc.Result = res
	return ec.marshalOTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_nextVisit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coachIds":
				return ec.fieldContext_Training_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Training_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Training_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Training_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Training_id(ctx, field)
			case "published":
				return ec.fieldContext_Training_published(ctx, field)
			case "stadium":
				return ec.fieldContext_Training_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_Training_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_Training_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Training_teamId(ctx, field)
			case "time":
				return ec.fieldContext_Training_time(ctx, field)
			case "visits":
				return ec.fieldContext_Training_visits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Training", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_nextVisitId(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_nextVisitId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextVisitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_nextVisitId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_phone(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_published(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_source(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.LeadSource)
	fc.Result = res
	return ec.marshalOLeadSource2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LeadSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_status(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.LeadStatus)
	fc.Result = res
	return ec.marshalOLeadStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LeadStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_studentIds(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_studentIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_studentIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_students(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_students(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Students, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_students(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_team(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_teamId(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_teamId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_teamId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lead_yearBorn(ctx context.Context, field graphql.CollectedField, obj *models.Lead) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Lead_yearBorn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearBorn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Lead_yearBorn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lead",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.LeadConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.LeadEdge)
	fc.Result = res
	return ec.marshalNLeadEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_LeadEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_LeadEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.LeadConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadDto_id(ctx context.Context, field graphql.CollectedField, obj *models.LeadDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadDto_name(ctx context.Context, field graphql.CollectedField, obj *models.LeadDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.LeadEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.LeadEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Lead)
	fc.Result = res
	return ec.marshalOLead2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Lead_description(ctx, field)
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "nextVisit":
				return ec.fieldContext_Lead_nextVisit(ctx, field)
			case "nextVisitId":
				return ec.fieldContext_Lead_nextVisitId(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "published":
				return ec.fieldContext_Lead_published(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "studentIds":
				return ec.fieldContext_Lead_studentIds(ctx, field)
			case "students":
				return ec.fieldContext_Lead_students(ctx, field)
			case "team":
				return ec.fieldContext_Lead_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Lead_teamId(ctx, field)
			case "yearBorn":
				return ec.fieldContext_Lead_yearBorn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.LeadPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Lead)
	fc.Result = res
	return ec.marshalOLead2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Lead_description(ctx, field)
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "nextVisit":
				return ec.fieldContext_Lead_nextVisit(ctx, field)
			case "nextVisitId":
				return ec.fieldContext_Lead_nextVisitId(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "published":
				return ec.fieldContext_Lead_published(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "studentIds":
				return ec.fieldContext_Lead_studentIds(ctx, field)
			case "students":
				return ec.fieldContext_Lead_students(ctx, field)
			case "team":
				return ec.fieldContext_Lead_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Lead_teamId(ctx, field)
			case "yearBorn":
				return ec.fieldContext_Lead_yearBorn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeadPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.LeadPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeadPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeadPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeadPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_date(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_description(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_id(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_moneyForm(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_moneyForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MoneyForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.MoneyForm)
	fc.Result = res
	return ec.marshalNMoneyForm2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_moneyForm(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MoneyForm does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_published(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_staff(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_staff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MoneyCost().Staff(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_staff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_staffId(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_staffId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_staffId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCost_sum(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCost_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCost_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCostConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCostConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCostConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.MoneyCostEdge)
	fc.Result = res
	return ec.marshalNMoneyCostEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCostConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCostConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_MoneyCostEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_MoneyCostEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCostEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCostConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCostConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCostConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCostConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCostConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCostEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCostEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCostEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCostEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCostEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCostEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCostEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCostEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCost)
	fc.Result = res
	return ec.marshalOMoneyCost2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCostEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCostEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_MoneyCost_date(ctx, field)
			case "description":
				return ec.fieldContext_MoneyCost_description(ctx, field)
			case "id":
				return ec.fieldContext_MoneyCost_id(ctx, field)
			case "moneyForm":
				return ec.fieldContext_MoneyCost_moneyForm(ctx, field)
			case "published":
				return ec.fieldContext_MoneyCost_published(ctx, field)
			case "staff":
				return ec.fieldContext_MoneyCost_staff(ctx, field)
			case "staffId":
				return ec.fieldContext_MoneyCost_staffId(ctx, field)
			case "sum":
				return ec.fieldContext_MoneyCost_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCostPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCostPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCost)
	fc.Result = res
	return ec.marshalOMoneyCost2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCostPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_MoneyCost_date(ctx, field)
			case "description":
				return ec.fieldContext_MoneyCost_description(ctx, field)
			case "id":
				return ec.fieldContext_MoneyCost_id(ctx, field)
			case "moneyForm":
				return ec.fieldContext_MoneyCost_moneyForm(ctx, field)
			case "published":
				return ec.fieldContext_MoneyCost_published(ctx, field)
			case "staff":
				return ec.fieldContext_MoneyCost_staff(ctx, field)
			case "staffId":
				return ec.fieldContext_MoneyCost_staffId(ctx, field)
			case "sum":
				return ec.fieldContext_MoneyCost_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyCostPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.MoneyCostPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyCostPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyCostPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyCostPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_dateFinish(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_dateFinish(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_dateFinish(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_datePayment(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_datePayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatePayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_datePayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_dateStart(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_dateStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_dateStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_description(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_id(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_moneyForm(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_moneyForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MoneyForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyForm)
	fc.Result = res
	return ec.marshalOMoneyForm2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_moneyForm(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MoneyForm does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_owner(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MoneyMove().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_ownerId(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_ownerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_ownerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_published(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_student(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_student(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MoneyMove().Student(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_student(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_studentId(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_studentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_studentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_sum(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_user(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MoneyMove().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMove_userId(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMove) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMove_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMove_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMove",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMoveConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMoveConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMoveConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.MoneyMoveEdge)
	fc.Result = res
	return ec.marshalNMoneyMoveEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMoveConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMoveConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_MoneyMoveEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_MoneyMoveEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMoveEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMoveConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMoveConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMoveConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMoveConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMoveConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMoveEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMoveEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMoveEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMoveEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMoveEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMoveEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMoveEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMoveEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMove)
	fc.Result = res
	return ec.marshalOMoneyMove2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMove(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMoveEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMoveEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dateFinish":
				return ec.fieldContext_MoneyMove_dateFinish(ctx, field)
			case "datePayment":
				return ec.fieldContext_MoneyMove_datePayment(ctx, field)
			case "dateStart":
				return ec.fieldContext_MoneyMove_dateStart(ctx, field)
			case "description":
				return ec.fieldContext_MoneyMove_description(ctx, field)
			case "id":
				return ec.fieldContext_MoneyMove_id(ctx, field)
			case "moneyForm":
				return ec.fieldContext_MoneyMove_moneyForm(ctx, field)
			case "owner":
				return ec.fieldContext_MoneyMove_owner(ctx, field)
			case "ownerId":
				return ec.fieldContext_MoneyMove_ownerId(ctx, field)
			case "published":
				return ec.fieldContext_MoneyMove_published(ctx, field)
			case "student":
				return ec.fieldContext_MoneyMove_student(ctx, field)
			case "studentId":
				return ec.fieldContext_MoneyMove_studentId(ctx, field)
			case "sum":
				return ec.fieldContext_MoneyMove_sum(ctx, field)
			case "user":
				return ec.fieldContext_MoneyMove_user(ctx, field)
			case "userId":
				return ec.fieldContext_MoneyMove_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMove", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMovePayload_record(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMovePayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMove)
	fc.Result = res
	return ec.marshalOMoneyMove2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMove(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMovePayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dateFinish":
				return ec.fieldContext_MoneyMove_dateFinish(ctx, field)
			case "datePayment":
				return ec.fieldContext_MoneyMove_datePayment(ctx, field)
			case "dateStart":
				return ec.fieldContext_MoneyMove_dateStart(ctx, field)
			case "description":
				return ec.fieldContext_MoneyMove_description(ctx, field)
			case "id":
				return ec.fieldContext_MoneyMove_id(ctx, field)
			case "moneyForm":
				return ec.fieldContext_MoneyMove_moneyForm(ctx, field)
			case "owner":
				return ec.fieldContext_MoneyMove_owner(ctx, field)
			case "ownerId":
				return ec.fieldContext_MoneyMove_ownerId(ctx, field)
			case "published":
				return ec.fieldContext_MoneyMove_published(ctx, field)
			case "student":
				return ec.fieldContext_MoneyMove_student(ctx, field)
			case "studentId":
				return ec.fieldContext_MoneyMove_studentId(ctx, field)
			case "sum":
				return ec.fieldContext_MoneyMove_sum(ctx, field)
			case "user":
				return ec.fieldContext_MoneyMove_user(ctx, field)
			case "userId":
				return ec.fieldContext_MoneyMove_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMove", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MoneyMovePayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.MoneyMovePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MoneyMovePayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MoneyMovePayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MoneyMovePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_articleDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_articleDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArticleDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ArticlePayload)
	fc.Result = res
	return ec.marshalNArticlePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_articleDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ArticlePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ArticlePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_articleDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_articlePublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_articlePublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArticlePublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ArticlePayload)
	fc.Result = res
	return ec.marshalNArticlePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_articlePublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ArticlePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ArticlePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_articlePublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_articleSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_articleSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArticleSave(rctx, fc.Args["articleInput"].(models.ArticleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ArticlePayload)
	fc.Result = res
	return ec.marshalNArticlePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_articleSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ArticlePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ArticlePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_articleSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_articleUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_articleUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArticleUpdate(rctx, fc.Args["articleInput"].(models.ArticleInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ArticlePayload)
	fc.Result = res
	return ec.marshalNArticlePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticlePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_articleUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ArticlePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ArticlePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticlePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_articleUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CartPayload)
	fc.Result = res
	return ec.marshalNCartPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CartPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CartPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CartPayload)
	fc.Result = res
	return ec.marshalNCartPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CartPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CartPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartSave(rctx, fc.Args["cartInput"].(models.CartInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CartPayload)
	fc.Result = res
	return ec.marshalNCartPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CartPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CartPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cartUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cartUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CartUpdate(rctx, fc.Args["cartInput"].(models.CartInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CartPayload)
	fc.Result = res
	return ec.marshalNCartPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cartUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CartPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CartPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cartUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_clubBalanceDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_clubBalanceDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClubBalanceDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalancePayload)
	fc.Result = res
	return ec.marshalNClubBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_clubBalanceDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ClubBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ClubBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_clubBalanceDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_clubBalancePublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_clubBalancePublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClubBalancePublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalancePayload)
	fc.Result = res
	return ec.marshalNClubBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_clubBalancePublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ClubBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ClubBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_clubBalancePublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_clubBalanceSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_clubBalanceSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClubBalanceSave(rctx, fc.Args["clubBalanceInput"].(models.ClubBalanceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalancePayload)
	fc.Result = res
	return ec.marshalNClubBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_clubBalanceSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ClubBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ClubBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_clubBalanceSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_clubBalanceUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_clubBalanceUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClubBalanceUpdate(rctx, fc.Args["clubBalanceInput"].(models.ClubBalanceInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalancePayload)
	fc.Result = res
	return ec.marshalNClubBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_clubBalanceUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_ClubBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_ClubBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_clubBalanceUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByMonthDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByMonthDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByMonthDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByMonthDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByMonthDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByMonthPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByMonthPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByMonthPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByMonthPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByMonthPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByMonthSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByMonthSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByMonthSave(rctx, fc.Args["coachPaymentByMonthInput"].(models.CoachPaymentByMonthInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByMonthSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByMonthSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByMonthUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByMonthUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByMonthUpdate(rctx, fc.Args["coachPaymentByMonthInput"].(models.CoachPaymentByMonthInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByMonthUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByMonthUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTeamDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTeamDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTeamDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeamPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTeamDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTeamDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTeamPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTeamPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTeamPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeamPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTeamPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTeamPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTeamSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTeamSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTeamSave(rctx, fc.Args["coachPaymentByTeamInput"].(models.CoachPaymentByTeamInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeamPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTeamSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTeamSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTeamUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTeamUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTeamUpdate(rctx, fc.Args["coachPaymentByTeamInput"].(models.CoachPaymentByTeamInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeamPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTeamUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTeamUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTrainingDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTrainingDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTrainingDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTrainingDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTrainingDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTrainingPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTrainingPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTrainingPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTrainingPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTrainingPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTrainingSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTrainingSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTrainingSave(rctx, fc.Args["coachPaymentByTrainingInput"].(models.CoachPaymentByTrainingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTrainingSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTrainingSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_coachPaymentByTrainingUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_coachPaymentByTrainingUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CoachPaymentByTrainingUpdate(rctx, fc.Args["coachPaymentByTrainingInput"].(models.CoachPaymentByTrainingInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNCoachPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_coachPaymentByTrainingUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CoachPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CoachPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_coachPaymentByTrainingUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_creatorDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_creatorDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatorDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreatorPayload)
	fc.Result = res
	return ec.marshalNCreatorPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_creatorDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CreatorPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CreatorPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatorPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_creatorDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_creatorPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_creatorPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatorPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreatorPayload)
	fc.Result = res
	return ec.marshalNCreatorPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_creatorPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CreatorPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CreatorPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatorPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_creatorPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_creatorSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_creatorSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatorSave(rctx, fc.Args["creatorInput"].(models.CreatorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreatorPayload)
	fc.Result = res
	return ec.marshalNCreatorPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_creatorSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CreatorPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CreatorPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatorPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_creatorSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_creatorUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_creatorUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatorUpdate(rctx, fc.Args["creatorInput"].(models.CreatorInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreatorPayload)
	fc.Result = res
	return ec.marshalNCreatorPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_creatorUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_CreatorPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_CreatorPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatorPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_creatorUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_kitDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_kitDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().KitDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.KitPayload)
	fc.Result = res
	return ec.marshalNKitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_kitDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_KitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_KitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_kitDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_kitPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_kitPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().KitPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.KitPayload)
	fc.Result = res
	return ec.marshalNKitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_kitPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_KitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_KitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_kitPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_kitSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_kitSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().KitSave(rctx, fc.Args["kitInput"].(models.KitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.KitPayload)
	fc.Result = res
	return ec.marshalNKitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_kitSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_KitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_KitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_kitSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_kitUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_kitUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().KitUpdate(rctx, fc.Args["kitInput"].(models.KitInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.KitPayload)
	fc.Result = res
	return ec.marshalNKitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_kitUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_KitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_KitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_kitUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_leadDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_leadDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LeadDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.LeadPayload)
	fc.Result = res
	return ec.marshalNLeadPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_leadDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_LeadPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_LeadPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_leadDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_leadPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_leadPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LeadPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.LeadPayload)
	fc.Result = res
	return ec.marshalNLeadPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_leadPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_LeadPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_LeadPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_leadPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_leadSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_leadSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LeadSave(rctx, fc.Args["leadInput"].(models.LeadInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.LeadPayload)
	fc.Result = res
	return ec.marshalOLeadPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_leadSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_LeadPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_LeadPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_leadSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_leadUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_leadUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LeadUpdate(rctx, fc.Args["leadInput"].(models.LeadInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.LeadPayload)
	fc.Result = res
	return ec.marshalNLeadPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_leadUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_LeadPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_LeadPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_leadUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, fc.Args["input"].(models.LoginInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AuthResponse)
	fc.Result = res
	return ec.marshalNAuthResponse2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAuthResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authToken":
				return ec.fieldContext_AuthResponse_authToken(ctx, field)
			case "user":
				return ec.fieldContext_AuthResponse_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyCostDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyCostDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyCostDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCostPayload)
	fc.Result = res
	return ec.marshalNMoneyCostPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyCostDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyCostPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyCostPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyCostDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyCostPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyCostPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyCostPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCostPayload)
	fc.Result = res
	return ec.marshalNMoneyCostPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyCostPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyCostPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyCostPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyCostPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyCostSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyCostSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyCostSave(rctx, fc.Args["moneyCostInput"].(models.MoneyCostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCostPayload)
	fc.Result = res
	return ec.marshalNMoneyCostPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyCostSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyCostPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyCostPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyCostSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyCostUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyCostUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyCostUpdate(rctx, fc.Args["moneyCostInput"].(models.MoneyCostInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCostPayload)
	fc.Result = res
	return ec.marshalNMoneyCostPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyCostUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyCostPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyCostPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCostPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyCostUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyMoveDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyMoveDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyMoveDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMovePayload)
	fc.Result = res
	return ec.marshalNMoneyMovePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyMoveDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyMovePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyMovePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyMoveDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyMovePublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyMovePublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyMovePublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMovePayload)
	fc.Result = res
	return ec.marshalNMoneyMovePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyMovePublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyMovePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyMovePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyMovePublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyMoveSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyMoveSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyMoveSave(rctx, fc.Args["moneyMoveInput"].(models.MoneyMoveInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMovePayload)
	fc.Result = res
	return ec.marshalNMoneyMovePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyMoveSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyMovePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyMovePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyMoveSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moneyMoveUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moneyMoveUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoneyMoveUpdate(rctx, fc.Args["moneyMoveInput"].(models.MoneyMoveInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMovePayload)
	fc.Result = res
	return ec.marshalNMoneyMovePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMovePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moneyMoveUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_MoneyMovePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_MoneyMovePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMovePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moneyMoveUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_orderDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_orderDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OrderDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrderPayload)
	fc.Result = res
	return ec.marshalNOrderPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_orderDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_OrderPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_OrderPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_orderDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_orderPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_orderPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OrderPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrderPayload)
	fc.Result = res
	return ec.marshalNOrderPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_orderPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_OrderPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_OrderPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_orderPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_orderSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_orderSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OrderSave(rctx, fc.Args["orderInput"].(models.OrderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrderPayload)
	fc.Result = res
	return ec.marshalNOrderPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_orderSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_OrderPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_OrderPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_orderSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_orderUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_orderUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OrderUpdate(rctx, fc.Args["orderInput"].(models.OrderInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrderPayload)
	fc.Result = res
	return ec.marshalNOrderPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_orderUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_OrderPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_OrderPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_orderUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_placeDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_placeDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PlaceDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlacePayload)
	fc.Result = res
	return ec.marshalNPlacePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlacePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_placeDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_PlacePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_PlacePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlacePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_placeDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_placePublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_placePublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PlacePublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlacePayload)
	fc.Result = res
	return ec.marshalNPlacePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlacePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_placePublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_PlacePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_PlacePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlacePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_placePublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_placeSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_placeSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PlaceSave(rctx, fc.Args["placeInput"].(models.PlaceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlacePayload)
	fc.Result = res
	return ec.marshalNPlacePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlacePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_placeSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_PlacePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_PlacePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlacePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_placeSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_placeUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_placeUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PlaceUpdate(rctx, fc.Args["placeInput"].(models.PlaceInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlacePayload)
	fc.Result = res
	return ec.marshalNPlacePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlacePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_placeUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_PlacePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_PlacePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlacePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_placeUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refresh(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refresh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Refresh(rctx, fc.Args["phone"].(string), fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refresh(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessToken":
				return ec.fieldContext_Token_accessToken(ctx, field)
			case "expiration":
				return ec.fieldContext_Token_expiration(ctx, field)
			case "refreshToken":
				return ec.fieldContext_Token_refreshToken(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refresh_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_register(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Register(rctx, fc.Args["input"].(models.RegisterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AuthResponse)
	fc.Result = res
	return ec.marshalNAuthResponse2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAuthResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_register(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authToken":
				return ec.fieldContext_AuthResponse_authToken(ctx, field)
			case "user":
				return ec.fieldContext_AuthResponse_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_register_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByMonthDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByMonthDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByMonthDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByMonthDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByMonthDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByMonthPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByMonthPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByMonthPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByMonthPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByMonthPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByMonthSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByMonthSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByMonthSave(rctx, fc.Args["rentPaymentInput"].(models.RentPaymentByMonthInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByMonthSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByMonthSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByMonthUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByMonthUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByMonthUpdate(rctx, fc.Args["rentPaymentInput"].(models.RentPaymentByMonthInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonthPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByMonthUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByMonthPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByMonthPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonthPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByMonthUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByTrainingDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByTrainingDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByTrainingDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByTrainingDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByTrainingDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByTrainingPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByTrainingPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByTrainingPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByTrainingPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByTrainingPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByTrainingSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByTrainingSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByTrainingSave(rctx, fc.Args["rentPaymentInput"].(models.RentPaymentByTrainingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByTrainingSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByTrainingSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rentPaymentByTrainingUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rentPaymentByTrainingUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RentPaymentByTrainingUpdate(rctx, fc.Args["rentPaymentInput"].(models.RentPaymentByTrainingInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTrainingPayload)
	fc.Result = res
	return ec.marshalNRentPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rentPaymentByTrainingUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_RentPaymentByTrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_RentPaymentByTrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rentPaymentByTrainingUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_stadiumDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_stadiumDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StadiumDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StadiumPayload)
	fc.Result = res
	return ec.marshalNStadiumPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_stadiumDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StadiumPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StadiumPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StadiumPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_stadiumDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_stadiumPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_stadiumPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StadiumPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StadiumPayload)
	fc.Result = res
	return ec.marshalNStadiumPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_stadiumPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StadiumPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StadiumPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StadiumPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_stadiumPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_stadiumSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_stadiumSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StadiumSave(rctx, fc.Args["stadiumInput"].(models.StadiumInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StadiumPayload)
	fc.Result = res
	return ec.marshalNStadiumPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_stadiumSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StadiumPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StadiumPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StadiumPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_stadiumSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_stadiumUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_stadiumUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StadiumUpdate(rctx, fc.Args["stadiumInput"].(models.StadiumInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StadiumPayload)
	fc.Result = res
	return ec.marshalNStadiumPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_stadiumUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StadiumPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StadiumPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StadiumPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_stadiumUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_staffDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_staffDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StaffPayload)
	fc.Result = res
	return ec.marshalNStaffPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_staffDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StaffPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StaffPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_staffDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_staffPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_staffPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StaffPayload)
	fc.Result = res
	return ec.marshalNStaffPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_staffPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StaffPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StaffPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_staffPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_staffSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_staffSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffSave(rctx, fc.Args["staffInput"].(models.StaffInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StaffPayload)
	fc.Result = res
	return ec.marshalNStaffPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_staffSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StaffPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StaffPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_staffSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_staffUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_staffUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StaffUpdate(rctx, fc.Args["staffInput"].(models.StaffInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StaffPayload)
	fc.Result = res
	return ec.marshalNStaffPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_staffUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StaffPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StaffPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_staffUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentPayload)
	fc.Result = res
	return ec.marshalNStudentPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentPayload)
	fc.Result = res
	return ec.marshalNStudentPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentSave(rctx, fc.Args["studentInput"].(models.StudentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentPayload)
	fc.Result = res
	return ec.marshalNStudentPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentUpdate(rctx, fc.Args["studentInput"].(models.StudentInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentPayload)
	fc.Result = res
	return ec.marshalNStudentPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentVisitDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentVisitDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentVisitDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisitPayload)
	fc.Result = res
	return ec.marshalNStudentVisitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentVisitDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentVisitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentVisitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentVisitDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentVisitPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentVisitPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentVisitPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisitPayload)
	fc.Result = res
	return ec.marshalNStudentVisitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentVisitPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentVisitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentVisitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentVisitPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentVisitSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentVisitSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentVisitSave(rctx, fc.Args["studentVisitInput"].(models.StudentVisitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisitPayload)
	fc.Result = res
	return ec.marshalNStudentVisitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentVisitSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentVisitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentVisitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentVisitSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_studentVisitUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_studentVisitUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudentVisitUpdate(rctx, fc.Args["studentVisitInput"].(models.StudentVisitInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisitPayload)
	fc.Result = res
	return ec.marshalNStudentVisitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_studentVisitUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_StudentVisitPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_StudentVisitPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisitPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_studentVisitUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_taskDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_taskDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TaskDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TaskPayload)
	fc.Result = res
	return ec.marshalNTaskPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_taskDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TaskPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TaskPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_taskDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_taskPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_taskPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TaskPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TaskPayload)
	fc.Result = res
	return ec.marshalNTaskPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_taskPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TaskPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TaskPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_taskPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_taskSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_taskSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TaskSave(rctx, fc.Args["taskInput"].(models.TaskInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TaskPayload)
	fc.Result = res
	return ec.marshalNTaskPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_taskSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TaskPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TaskPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_taskSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_taskUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_taskUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TaskUpdate(rctx, fc.Args["taskInput"].(models.TaskInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TaskPayload)
	fc.Result = res
	return ec.marshalNTaskPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_taskUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TaskPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TaskPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_taskUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamBalanceDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamBalanceDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamBalanceDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalancePayload)
	fc.Result = res
	return ec.marshalNTeamBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamBalanceDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamBalanceDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamBalancePublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamBalancePublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamBalancePublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalancePayload)
	fc.Result = res
	return ec.marshalNTeamBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamBalancePublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamBalancePublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamBalanceSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamBalanceSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamBalanceSave(rctx, fc.Args["teamBalanceInput"].(models.TeamBalanceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalancePayload)
	fc.Result = res
	return ec.marshalNTeamBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamBalanceSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamBalanceSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamBalanceUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamBalanceUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamBalanceUpdate(rctx, fc.Args["teamBalanceInput"].(models.TeamBalanceInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalancePayload)
	fc.Result = res
	return ec.marshalNTeamBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamBalanceUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamBalancePayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamBalancePayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalancePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamBalanceUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamPayload)
	fc.Result = res
	return ec.marshalNTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamPayload)
	fc.Result = res
	return ec.marshalNTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamSave(rctx, fc.Args["teamInput"].(models.TeamInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamPayload)
	fc.Result = res
	return ec.marshalNTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_teamUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_teamUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TeamUpdate(rctx, fc.Args["teamInput"].(models.TeamInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TeamPayload)
	fc.Result = res
	return ec.marshalNTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_teamUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TeamPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TeamPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_teamUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingDayDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingDayDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingDayDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDayPayload)
	fc.Result = res
	return ec.marshalNTrainingDayPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingDayDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingDayPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingDayPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDayPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingDayDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingDayPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingDayPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingDayPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDayPayload)
	fc.Result = res
	return ec.marshalNTrainingDayPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingDayPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingDayPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingDayPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDayPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingDayPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingDaySave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingDaySave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingDaySave(rctx, fc.Args["trainingDayInput"].(models.TrainingDayInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDayPayload)
	fc.Result = res
	return ec.marshalNTrainingDayPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingDaySave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingDayPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingDayPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDayPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingDaySave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingDayUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingDayUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingDayUpdate(rctx, fc.Args["trainingDayInput"].(models.TrainingDayInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDayPayload)
	fc.Result = res
	return ec.marshalNTrainingDayPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingDayUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingDayPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingDayPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDayPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingDayUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingPayload)
	fc.Result = res
	return ec.marshalNTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingPayload)
	fc.Result = res
	return ec.marshalNTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingSave(rctx, fc.Args["trainingInput"].(models.TrainingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingPayload)
	fc.Result = res
	return ec.marshalNTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trainingUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trainingUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrainingUpdate(rctx, fc.Args["trainingInput"].(models.TrainingInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TrainingPayload)
	fc.Result = res
	return ec.marshalNTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trainingUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_TrainingPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_TrainingPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trainingUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_userDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_userDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_userDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_UserPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_UserPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_userDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_userPublishUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_userPublishUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserPublishUpdate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_userPublishUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_UserPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_UserPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_userPublishUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_userSave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_userSave(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserSave(rctx, fc.Args["userInput"].(models.UserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_userSave(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_UserPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_UserPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_userSave_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_userUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_userUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserUpdate(rctx, fc.Args["userInput"].(models.UserInputWithID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_userUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "record":
				return ec.fieldContext_UserPayload_record(ctx, field)
			case "recordId":
				return ec.fieldContext_UserPayload_recordId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_userUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Order_cart(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_cart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "kitIds":
				return ec.fieldContext_Cart_kitIds(ctx, field)
			case "published":
				return ec.fieldContext_Cart_published(ctx, field)
			case "student":
				return ec.fieldContext_Cart_student(ctx, field)
			case "studentId":
				return ec.fieldContext_Cart_studentId(ctx, field)
			case "sum":
				return ec.fieldContext_Cart_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_cartId(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_cartId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CartID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_cartId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_creator(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Creator)
	fc.Result = res
	return ec.marshalOCreator2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Creator_id(ctx, field)
			case "name":
				return ec.fieldContext_Creator_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Creator_passportNum(ctx, field)
			case "phone":
				return ec.fieldContext_Creator_phone(ctx, field)
			case "published":
				return ec.fieldContext_Creator_published(ctx, field)
			case "user":
				return ec.fieldContext_Creator_user(ctx, field)
			case "userId":
				return ec.fieldContext_Creator_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Creator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_creatorId(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_creatorId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_creatorId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_fileName(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_id(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_orderStatus(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_orderStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.OrderStatus)
	fc.Result = res
	return ec.marshalNOrderStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_orderStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OrderStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Order_published(ctx context.Context, field graphql.CollectedField, obj *models.Order) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Order_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Order_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Order",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.OrderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrderEdge)
	fc.Result = res
	return ec.marshalNOrderEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_OrderEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_OrderEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.OrderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.OrderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.OrderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Order)
	fc.Result = res
	return ec.marshalOOrder2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Order_cart(ctx, field)
			case "cartId":
				return ec.fieldContext_Order_cartId(ctx, field)
			case "creator":
				return ec.fieldContext_Order_creator(ctx, field)
			case "creatorId":
				return ec.fieldContext_Order_creatorId(ctx, field)
			case "fileName":
				return ec.fieldContext_Order_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "orderStatus":
				return ec.fieldContext_Order_orderStatus(ctx, field)
			case "published":
				return ec.fieldContext_Order_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.OrderPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Order)
	fc.Result = res
	return ec.marshalOOrder2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Order_cart(ctx, field)
			case "cartId":
				return ec.fieldContext_Order_cartId(ctx, field)
			case "creator":
				return ec.fieldContext_Order_creator(ctx, field)
			case "creatorId":
				return ec.fieldContext_Order_creatorId(ctx, field)
			case "fileName":
				return ec.fieldContext_Order_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "orderStatus":
				return ec.fieldContext_Order_orderStatus(ctx, field)
			case "published":
				return ec.fieldContext_Order_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.OrderPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *models.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Place_address(ctx context.Context, field graphql.CollectedField, obj *models.Place) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Place_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Place_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Place",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Place_description(ctx context.Context, field graphql.CollectedField, obj *models.Place) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Place_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Place_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Place",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Place_id(ctx context.Context, field graphql.CollectedField, obj *models.Place) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Place_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Place_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Place",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Place_name(ctx context.Context, field graphql.CollectedField, obj *models.Place) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Place_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Place_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Place",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Place_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.Place) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Place_orderNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Place_orderNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Place",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Place_published(ctx context.Context, field graphql.CollectedField, obj *models.Place) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Place_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Place_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Place",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlaceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.PlaceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlaceConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlaceEdge)
	fc.Result = res
	return ec.marshalNPlaceEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlaceConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlaceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_PlaceEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_PlaceEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlaceEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlaceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.PlaceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlaceConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlaceConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlaceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlaceDto_id(ctx context.Context, field graphql.CollectedField, obj *models.PlaceDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlaceDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlaceDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlaceDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlaceDto_name(ctx context.Context, field graphql.CollectedField, obj *models.PlaceDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlaceDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlaceDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlaceDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlaceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.PlaceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlaceEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlaceEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlaceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlaceEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.PlaceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlaceEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Place)
	fc.Result = res
	return ec.marshalOPlace2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlaceEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlaceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Place_address(ctx, field)
			case "description":
				return ec.fieldContext_Place_description(ctx, field)
			case "id":
				return ec.fieldContext_Place_id(ctx, field)
			case "name":
				return ec.fieldContext_Place_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Place_orderNumber(ctx, field)
			case "published":
				return ec.fieldContext_Place_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Place", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlacePayload_record(ctx context.Context, field graphql.CollectedField, obj *models.PlacePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlacePayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Place)
	fc.Result = res
	return ec.marshalNPlace2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlacePayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlacePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Place_address(ctx, field)
			case "description":
				return ec.fieldContext_Place_description(ctx, field)
			case "id":
				return ec.fieldContext_Place_id(ctx, field)
			case "name":
				return ec.fieldContext_Place_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Place_orderNumber(ctx, field)
			case "published":
				return ec.fieldContext_Place_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Place", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlacePayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.PlacePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlacePayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlacePayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlacePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_article(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_article(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Article(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Article)
	fc.Result = res
	return ec.marshalOArticle2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_article(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Article_author(ctx, field)
			case "authorId":
				return ec.fieldContext_Article_authorId(ctx, field)
			case "description":
				return ec.fieldContext_Article_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Article_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Article_id(ctx, field)
			case "published":
				return ec.fieldContext_Article_published(ctx, field)
			case "tags":
				return ec.fieldContext_Article_tags(ctx, field)
			case "title":
				return ec.fieldContext_Article_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Article", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_article_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_articles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_articles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Articles(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.ArticleFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ArticleConnection)
	fc.Result = res
	return ec.marshalOArticleConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_articles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ArticleConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ArticleConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArticleConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_articles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_cart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cart(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Cart)
	fc.Result = res
	return ec.marshalOCart2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Cart_id(ctx, field)
			case "kitIds":
				return ec.fieldContext_Cart_kitIds(ctx, field)
			case "published":
				return ec.fieldContext_Cart_published(ctx, field)
			case "student":
				return ec.fieldContext_Cart_student(ctx, field)
			case "studentId":
				return ec.fieldContext_Cart_studentId(ctx, field)
			case "sum":
				return ec.fieldContext_Cart_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Cart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cart_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_cartAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cartAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CartAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CartDto)
	fc.Result = res
	return ec.marshalOCartDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cartAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CartDto_id(ctx, field)
			case "name":
				return ec.fieldContext_CartDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_carts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_carts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Carts(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.CartFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CartConnection)
	fc.Result = res
	return ec.marshalOCartConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_carts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CartConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CartConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CartConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_carts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_clubBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_clubBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ClubBalance(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalance)
	fc.Result = res
	return ec.marshalOClubBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_clubBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_ClubBalance_date(ctx, field)
			case "id":
				return ec.fieldContext_ClubBalance_id(ctx, field)
			case "otherCosts":
				return ec.fieldContext_ClubBalance_otherCosts(ctx, field)
			case "published":
				return ec.fieldContext_ClubBalance_published(ctx, field)
			case "rent":
				return ec.fieldContext_ClubBalance_rent(ctx, field)
			case "salary":
				return ec.fieldContext_ClubBalance_salary(ctx, field)
			case "sum":
				return ec.fieldContext_ClubBalance_sum(ctx, field)
			case "tickets":
				return ec.fieldContext_ClubBalance_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_clubBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_clubBalances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_clubBalances(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ClubBalances(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.ClubBalanceFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ClubBalanceConnection)
	fc.Result = res
	return ec.marshalOClubBalanceConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_clubBalances(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ClubBalanceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ClubBalanceConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClubBalanceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_clubBalances_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_coachPaymentByMonth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_coachPaymentByMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CoachPaymentByMonth(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonth)
	fc.Result = res
	return ec.marshalOCoachPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_coachPaymentByMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByMonth_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByMonth_coachId(ctx, field)
			case "date":
				return ec.fieldContext_CoachPaymentByMonth_date(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByMonth_id(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByMonth_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByMonth_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_coachPaymentByMonth_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_coachPaymentByTeam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_coachPaymentByTeam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CoachPaymentByTeam(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeam)
	fc.Result = res
	return ec.marshalOCoachPaymentByTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_coachPaymentByTeam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByTeam_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByTeam_coachId(ctx, field)
			case "dateFinish":
				return ec.fieldContext_CoachPaymentByTeam_dateFinish(ctx, field)
			case "dateStart":
				return ec.fieldContext_CoachPaymentByTeam_dateStart(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByTeam_id(ctx, field)
			case "paymentRule":
				return ec.fieldContext_CoachPaymentByTeam_paymentRule(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByTeam_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByTeam_sum(ctx, field)
			case "team":
				return ec.fieldContext_CoachPaymentByTeam_team(ctx, field)
			case "teamId":
				return ec.fieldContext_CoachPaymentByTeam_teamId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeam", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_coachPaymentByTeam_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_coachPaymentByTraining(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_coachPaymentByTraining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CoachPaymentByTraining(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTraining)
	fc.Result = res
	return ec.marshalOCoachPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_coachPaymentByTraining(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coach":
				return ec.fieldContext_CoachPaymentByTraining_coach(ctx, field)
			case "coachId":
				return ec.fieldContext_CoachPaymentByTraining_coachId(ctx, field)
			case "id":
				return ec.fieldContext_CoachPaymentByTraining_id(ctx, field)
			case "published":
				return ec.fieldContext_CoachPaymentByTraining_published(ctx, field)
			case "sum":
				return ec.fieldContext_CoachPaymentByTraining_sum(ctx, field)
			case "training":
				return ec.fieldContext_CoachPaymentByTraining_training(ctx, field)
			case "trainingId":
				return ec.fieldContext_CoachPaymentByTraining_trainingId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTraining", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_coachPaymentByTraining_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_coachPaymentsByMonth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_coachPaymentsByMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CoachPaymentsByMonth(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.CoachPaymentByMonthFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByMonthConnection)
	fc.Result = res
	return ec.marshalOCoachPaymentByMonthConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_coachPaymentsByMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CoachPaymentByMonthConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CoachPaymentByMonthConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByMonthConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_coachPaymentsByMonth_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_coachPaymentsByTeam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_coachPaymentsByTeam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CoachPaymentsByTeam(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.CoachPaymentByTeamFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTeamConnection)
	fc.Result = res
	return ec.marshalOCoachPaymentByTeamConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_coachPaymentsByTeam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CoachPaymentByTeamConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CoachPaymentByTeamConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTeamConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_coachPaymentsByTeam_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_coachPaymentsByTraining(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_coachPaymentsByTraining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CoachPaymentsByTraining(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.CoachPaymentByTrainingFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CoachPaymentByTrainingConnection)
	fc.Result = res
	return ec.marshalOCoachPaymentByTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_coachPaymentsByTraining(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CoachPaymentByTrainingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CoachPaymentByTrainingConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CoachPaymentByTrainingConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_coachPaymentsByTraining_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_creator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Creator(rctx, fc.Args["Id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Creator)
	fc.Result = res
	return ec.marshalOCreator2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Creator_id(ctx, field)
			case "name":
				return ec.fieldContext_Creator_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Creator_passportNum(ctx, field)
			case "phone":
				return ec.fieldContext_Creator_phone(ctx, field)
			case "published":
				return ec.fieldContext_Creator_published(ctx, field)
			case "user":
				return ec.fieldContext_Creator_user(ctx, field)
			case "userId":
				return ec.fieldContext_Creator_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Creator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_creator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_creatorAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_creatorAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreatorAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CreatorDto)
	fc.Result = res
	return ec.marshalOCreatorDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_creatorAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreatorDto_id(ctx, field)
			case "name":
				return ec.fieldContext_CreatorDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatorDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_creators(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_creators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Creators(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.CreatorFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreatorConnection)
	fc.Result = res
	return ec.marshalOCreatorConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_creators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CreatorConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CreatorConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatorConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_creators_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentTasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentTasks(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TaskFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TaskConnection)
	fc.Result = res
	return ec.marshalOTaskConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentTasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TaskConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TaskConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_currentTasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_kit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_kit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Kit(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Kit)
	fc.Result = res
	return ec.marshalOKit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_kit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fileName":
				return ec.fieldContext_Kit_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Kit_id(ctx, field)
			case "name":
				return ec.fieldContext_Kit_name(ctx, field)
			case "number":
				return ec.fieldContext_Kit_number(ctx, field)
			case "price":
				return ec.fieldContext_Kit_price(ctx, field)
			case "published":
				return ec.fieldContext_Kit_published(ctx, field)
			case "quantity":
				return ec.fieldContext_Kit_quantity(ctx, field)
			case "size":
				return ec.fieldContext_Kit_size(ctx, field)
			case "title":
				return ec.fieldContext_Kit_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Kit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_kit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_kitAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_kitAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().KitAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.KitDto)
	fc.Result = res
	return ec.marshalOKitDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_kitAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_KitDto_id(ctx, field)
			case "name":
				return ec.fieldContext_KitDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KitDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_kits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_kits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Kits(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.KitFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.KitConnection)
	fc.Result = res
	return ec.marshalOKitConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_kits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_KitConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_KitConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KitConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_kits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_lead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_lead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Lead(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Lead)
	fc.Result = res
	return ec.marshalOLead2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_lead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Lead_description(ctx, field)
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "nextVisit":
				return ec.fieldContext_Lead_nextVisit(ctx, field)
			case "nextVisitId":
				return ec.fieldContext_Lead_nextVisitId(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "published":
				return ec.fieldContext_Lead_published(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "studentIds":
				return ec.fieldContext_Lead_studentIds(ctx, field)
			case "students":
				return ec.fieldContext_Lead_students(ctx, field)
			case "team":
				return ec.fieldContext_Lead_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Lead_teamId(ctx, field)
			case "yearBorn":
				return ec.fieldContext_Lead_yearBorn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_leadAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_leadAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LeadAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LeadDto)
	fc.Result = res
	return ec.marshalOLeadDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_leadAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LeadDto_id(ctx, field)
			case "name":
				return ec.fieldContext_LeadDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_leads(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_leads(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Leads(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.LeadFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.LeadConnection)
	fc.Result = res
	return ec.marshalOLeadConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_leads(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_LeadConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_LeadConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeadConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_leads_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moneyCost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moneyCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MoneyCost(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCost)
	fc.Result = res
	return ec.marshalOMoneyCost2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moneyCost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_MoneyCost_date(ctx, field)
			case "description":
				return ec.fieldContext_MoneyCost_description(ctx, field)
			case "id":
				return ec.fieldContext_MoneyCost_id(ctx, field)
			case "moneyForm":
				return ec.fieldContext_MoneyCost_moneyForm(ctx, field)
			case "published":
				return ec.fieldContext_MoneyCost_published(ctx, field)
			case "staff":
				return ec.fieldContext_MoneyCost_staff(ctx, field)
			case "staffId":
				return ec.fieldContext_MoneyCost_staffId(ctx, field)
			case "sum":
				return ec.fieldContext_MoneyCost_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moneyCost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moneyCosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moneyCosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MoneyCosts(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.MoneyCostFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyCostConnection)
	fc.Result = res
	return ec.marshalOMoneyCostConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moneyCosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MoneyCostConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MoneyCostConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyCostConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moneyCosts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moneyMove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moneyMove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MoneyMove(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMove)
	fc.Result = res
	return ec.marshalOMoneyMove2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMove(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moneyMove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dateFinish":
				return ec.fieldContext_MoneyMove_dateFinish(ctx, field)
			case "datePayment":
				return ec.fieldContext_MoneyMove_datePayment(ctx, field)
			case "dateStart":
				return ec.fieldContext_MoneyMove_dateStart(ctx, field)
			case "description":
				return ec.fieldContext_MoneyMove_description(ctx, field)
			case "id":
				return ec.fieldContext_MoneyMove_id(ctx, field)
			case "moneyForm":
				return ec.fieldContext_MoneyMove_moneyForm(ctx, field)
			case "owner":
				return ec.fieldContext_MoneyMove_owner(ctx, field)
			case "ownerId":
				return ec.fieldContext_MoneyMove_ownerId(ctx, field)
			case "published":
				return ec.fieldContext_MoneyMove_published(ctx, field)
			case "student":
				return ec.fieldContext_MoneyMove_student(ctx, field)
			case "studentId":
				return ec.fieldContext_MoneyMove_studentId(ctx, field)
			case "sum":
				return ec.fieldContext_MoneyMove_sum(ctx, field)
			case "user":
				return ec.fieldContext_MoneyMove_user(ctx, field)
			case "userId":
				return ec.fieldContext_MoneyMove_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMove", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moneyMove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moneyMoves(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moneyMoves(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MoneyMoves(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.MoneyMoveFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.MoneyMoveConnection)
	fc.Result = res
	return ec.marshalOMoneyMoveConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moneyMoves(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MoneyMoveConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MoneyMoveConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MoneyMoveConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moneyMoves_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_nearestStaffBirthdays(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nearestStaffBirthdays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NearestStaffBirthdays(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.StaffFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StaffConnection)
	fc.Result = res
	return ec.marshalOStaffConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nearestStaffBirthdays(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StaffConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StaffConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nearestStaffBirthdays_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_nearestStudentBirthdays(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nearestStudentBirthdays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NearestStudentBirthdays(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.StudentFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StudentConnection)
	fc.Result = res
	return ec.marshalOStudentConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nearestStudentBirthdays(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StudentConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StudentConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nearestStudentBirthdays_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_order(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Order(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Order)
	fc.Result = res
	return ec.marshalOOrder2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Order_cart(ctx, field)
			case "cartId":
				return ec.fieldContext_Order_cartId(ctx, field)
			case "creator":
				return ec.fieldContext_Order_creator(ctx, field)
			case "creatorId":
				return ec.fieldContext_Order_creatorId(ctx, field)
			case "fileName":
				return ec.fieldContext_Order_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "orderStatus":
				return ec.fieldContext_Order_orderStatus(ctx, field)
			case "published":
				return ec.fieldContext_Order_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_order_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_orders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_orders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Orders(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.OrderFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrderConnection)
	fc.Result = res
	return ec.marshalOOrderConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_orders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OrderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OrderConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_orders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_place(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_place(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Place(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Place)
	fc.Result = res
	return ec.marshalOPlace2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_place(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Place_address(ctx, field)
			case "description":
				return ec.fieldContext_Place_description(ctx, field)
			case "id":
				return ec.fieldContext_Place_id(ctx, field)
			case "name":
				return ec.fieldContext_Place_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Place_orderNumber(ctx, field)
			case "published":
				return ec.fieldContext_Place_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Place", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_place_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_placeAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_placeAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlaceAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PlaceDto)
	fc.Result = res
	return ec.marshalOPlaceDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_placeAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlaceDto_id(ctx, field)
			case "name":
				return ec.fieldContext_PlaceDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlaceDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_places(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_places(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Places(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.PlaceFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlaceConnection)
	fc.Result = res
	return ec.marshalNPlaceConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_places(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PlaceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PlaceConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlaceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_places_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_rentPaymentByMonth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rentPaymentByMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RentPaymentByMonth(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonth)
	fc.Result = res
	return ec.marshalORentPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rentPaymentByMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_RentPaymentByMonth_description(ctx, field)
			case "id":
				return ec.fieldContext_RentPaymentByMonth_id(ctx, field)
			case "month":
				return ec.fieldContext_RentPaymentByMonth_month(ctx, field)
			case "paymentDate":
				return ec.fieldContext_RentPaymentByMonth_paymentDate(ctx, field)
			case "published":
				return ec.fieldContext_RentPaymentByMonth_published(ctx, field)
			case "stadium":
				return ec.fieldContext_RentPaymentByMonth_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_RentPaymentByMonth_stadiumId(ctx, field)
			case "sum":
				return ec.fieldContext_RentPaymentByMonth_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rentPaymentByMonth_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_rentPaymentByTraining(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rentPaymentByTraining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RentPaymentByTraining(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTraining)
	fc.Result = res
	return ec.marshalORentPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rentPaymentByTraining(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_RentPaymentByTraining_description(ctx, field)
			case "id":
				return ec.fieldContext_RentPaymentByTraining_id(ctx, field)
			case "published":
				return ec.fieldContext_RentPaymentByTraining_published(ctx, field)
			case "stadium":
				return ec.fieldContext_RentPaymentByTraining_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_RentPaymentByTraining_stadiumId(ctx, field)
			case "sum":
				return ec.fieldContext_RentPaymentByTraining_sum(ctx, field)
			case "trainingIds":
				return ec.fieldContext_RentPaymentByTraining_trainingIds(ctx, field)
			case "trainings":
				return ec.fieldContext_RentPaymentByTraining_trainings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTraining", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rentPaymentByTraining_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_rentPaymentsByMonth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rentPaymentsByMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RentPaymentsByMonth(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.RentPaymentByMonthFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonthConnection)
	fc.Result = res
	return ec.marshalORentPaymentByMonthConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rentPaymentsByMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RentPaymentByMonthConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RentPaymentByMonthConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonthConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rentPaymentsByMonth_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_rentPaymentsByTraining(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rentPaymentsByTraining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RentPaymentsByTraining(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.RentPaymentByTrainingFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTrainingConnection)
	fc.Result = res
	return ec.marshalORentPaymentByTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rentPaymentsByTraining(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RentPaymentByTrainingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RentPaymentByTrainingConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTrainingConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rentPaymentsByTraining_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_stadium(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_stadium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Stadium(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stadium)
	fc.Result = res
	return ec.marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_stadium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Stadium_id(ctx, field)
			case "latitude":
				return ec.fieldContext_Stadium_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Stadium_longitude(ctx, field)
			case "name":
				return ec.fieldContext_Stadium_name(ctx, field)
			case "place":
				return ec.fieldContext_Stadium_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Stadium_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Stadium_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stadium", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_stadium_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_stadiumAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_stadiumAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StadiumAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.StadiumDto)
	fc.Result = res
	return ec.marshalOStadiumDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_stadiumAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StadiumDto_id(ctx, field)
			case "name":
				return ec.fieldContext_StadiumDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StadiumDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_stadiums(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_stadiums(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Stadiums(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.StadiumFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StadiumConnection)
	fc.Result = res
	return ec.marshalOStadiumConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_stadiums(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StadiumConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StadiumConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StadiumConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_stadiums_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_staff(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_staff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Staff(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.StaffFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StaffConnection)
	fc.Result = res
	return ec.marshalOStaffConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_staff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StaffConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StaffConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_staff_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_staffAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_staffAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StaffAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.StaffDto)
	fc.Result = res
	return ec.marshalOStaffDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_staffAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StaffDto_id(ctx, field)
			case "name":
				return ec.fieldContext_StaffDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_staffPerson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_staffPerson(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StaffPerson(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_staffPerson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_staffPerson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_student(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_student(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Student(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_student(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_student_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_studentAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_studentAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StudentAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.StudentDto)
	fc.Result = res
	return ec.marshalOStudentDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_studentAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentDto_id(ctx, field)
			case "name":
				return ec.fieldContext_StudentDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_studentVisit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_studentVisit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StudentVisit(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisit)
	fc.Result = res
	return ec.marshalOStudentVisit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_studentVisit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentVisit_id(ctx, field)
			case "payed":
				return ec.fieldContext_StudentVisit_payed(ctx, field)
			case "published":
				return ec.fieldContext_StudentVisit_published(ctx, field)
			case "student":
				return ec.fieldContext_StudentVisit_student(ctx, field)
			case "studentId":
				return ec.fieldContext_StudentVisit_studentId(ctx, field)
			case "training":
				return ec.fieldContext_StudentVisit_training(ctx, field)
			case "trainingId":
				return ec.fieldContext_StudentVisit_trainingId(ctx, field)
			case "visitStatus":
				return ec.fieldContext_StudentVisit_visitStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_studentVisit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_studentVisits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_studentVisits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StudentVisits(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.StudentVisitFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisitConnection)
	fc.Result = res
	return ec.marshalOStudentVisitConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_studentVisits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StudentVisitConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StudentVisitConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisitConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_studentVisits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_students(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_students(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Students(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.StudentFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StudentConnection)
	fc.Result = res
	return ec.marshalOStudentConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_students(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StudentConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StudentConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_students_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_task(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_task(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Task(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Task)
	fc.Result = res
	return ec.marshalOTask2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_task(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Task_author(ctx, field)
			case "authorId":
				return ec.fieldContext_Task_authorId(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "endTime":
				return ec.fieldContext_Task_endTime(ctx, field)
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "leadIds":
				return ec.fieldContext_Task_leadIds(ctx, field)
			case "leads":
				return ec.fieldContext_Task_leads(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "published":
				return ec.fieldContext_Task_published(ctx, field)
			case "result":
				return ec.fieldContext_Task_result(ctx, field)
			case "startTime":
				return ec.fieldContext_Task_startTime(ctx, field)
			case "studentIds":
				return ec.fieldContext_Task_studentIds(ctx, field)
			case "students":
				return ec.fieldContext_Task_students(ctx, field)
			case "taskStatus":
				return ec.fieldContext_Task_taskStatus(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "workerIds":
				return ec.fieldContext_Task_workerIds(ctx, field)
			case "workers":
				return ec.fieldContext_Task_workers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_task_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_tasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tasks(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TaskFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TaskConnection)
	fc.Result = res
	return ec.marshalOTaskConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TaskConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TaskConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_team(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Team(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_team_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_teamAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_teamAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TeamAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.TeamDto)
	fc.Result = res
	return ec.marshalOTeamDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_teamAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TeamDto_id(ctx, field)
			case "name":
				return ec.fieldContext_TeamDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_teamBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_teamBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TeamBalance(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalance)
	fc.Result = res
	return ec.marshalOTeamBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_teamBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_TeamBalance_date(ctx, field)
			case "id":
				return ec.fieldContext_TeamBalance_id(ctx, field)
			case "published":
				return ec.fieldContext_TeamBalance_published(ctx, field)
			case "rent":
				return ec.fieldContext_TeamBalance_rent(ctx, field)
			case "salary":
				return ec.fieldContext_TeamBalance_salary(ctx, field)
			case "sum":
				return ec.fieldContext_TeamBalance_sum(ctx, field)
			case "team":
				return ec.fieldContext_TeamBalance_team(ctx, field)
			case "teamId":
				return ec.fieldContext_TeamBalance_teamId(ctx, field)
			case "tickets":
				return ec.fieldContext_TeamBalance_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_teamBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_teamBalances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_teamBalances(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TeamBalances(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TeamBalanceFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalanceConnection)
	fc.Result = res
	return ec.marshalOTeamBalanceConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_teamBalances(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TeamBalanceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TeamBalanceConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalanceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_teamBalances_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_teams(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_teams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Teams(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TeamFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TeamConnection)
	fc.Result = res
	return ec.marshalOTeamConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_teams(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TeamConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TeamConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_teams_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_timeTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_timeTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TimeTable(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TrainingFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TrainingConnection)
	fc.Result = res
	return ec.marshalOTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_timeTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TrainingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TrainingConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_timeTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_training(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_training(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Training(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Training)
	fc.Result = res
	return ec.marshalOTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_training(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coachIds":
				return ec.fieldContext_Training_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Training_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Training_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Training_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Training_id(ctx, field)
			case "published":
				return ec.fieldContext_Training_published(ctx, field)
			case "stadium":
				return ec.fieldContext_Training_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_Training_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_Training_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Training_teamId(ctx, field)
			case "time":
				return ec.fieldContext_Training_time(ctx, field)
			case "visits":
				return ec.fieldContext_Training_visits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Training", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_training_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_trainingAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trainingAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrainingAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.TrainingDto)
	fc.Result = res
	return ec.marshalOTrainingDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trainingAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrainingDto_id(ctx, field)
			case "name":
				return ec.fieldContext_TrainingDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_trainingDay(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trainingDay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrainingDay(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDay)
	fc.Result = res
	return ec.marshalOTrainingDay2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDay(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trainingDay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "day":
				return ec.fieldContext_TrainingDay_day(ctx, field)
			case "id":
				return ec.fieldContext_TrainingDay_id(ctx, field)
			case "published":
				return ec.fieldContext_TrainingDay_published(ctx, field)
			case "stadium":
				return ec.fieldContext_TrainingDay_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_TrainingDay_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_TrainingDay_team(ctx, field)
			case "teamId":
				return ec.fieldContext_TrainingDay_teamId(ctx, field)
			case "time":
				return ec.fieldContext_TrainingDay_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDay", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trainingDay_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_trainingDays(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trainingDays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrainingDays(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TrainingDayFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDayConnection)
	fc.Result = res
	return ec.marshalOTrainingDayConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trainingDays(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TrainingDayConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TrainingDayConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDayConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trainingDays_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_trainings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trainings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Trainings(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TrainingFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TrainingConnection)
	fc.Result = res
	return ec.marshalOTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trainings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TrainingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TrainingConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trainings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_trainingsByDay(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trainingsByDay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrainingsByDay(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.TrainingFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TrainingConnection)
	fc.Result = res
	return ec.marshalOTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trainingsByDay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TrainingConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TrainingConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trainingsByDay_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_unPayedStudents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_unPayedStudents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UnPayedStudents(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.StudentFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StudentConnection)
	fc.Result = res
	return ec.marshalOStudentConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_unPayedStudents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_StudentConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_StudentConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_unPayedStudents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_userAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserAll(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.UserDto)
	fc.Result = res
	return ec.marshalOUserDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserDtoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserDto_id(ctx, field)
			case "name":
				return ec.fieldContext_UserDto_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserDto", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["after"].(*string), fc.Args["before"].(*string), fc.Args["filter"].(*models.UserFilter), fc.Args["first"].(*int), fc.Args["last"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UserConnection)
	fc.Result = res
	return ec.marshalOUserConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_description(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_id(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_month(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_paymentDate(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_paymentDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_paymentDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_published(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_stadium(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_stadium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stadium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stadium)
	fc.Result = res
	return ec.marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_stadium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Stadium_id(ctx, field)
			case "latitude":
				return ec.fieldContext_Stadium_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Stadium_longitude(ctx, field)
			case "name":
				return ec.fieldContext_Stadium_name(ctx, field)
			case "place":
				return ec.fieldContext_Stadium_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Stadium_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Stadium_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stadium", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_stadiumId(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_stadiumId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StadiumID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_stadiumId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonth_sum(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonth_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonth_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonthConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonthConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonthConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.RentPaymentByMonthEdge)
	fc.Result = res
	return ec.marshalNRentPaymentByMonthEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonthConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonthConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_RentPaymentByMonthEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_RentPaymentByMonthEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonthEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonthConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonthConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonthConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonthConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonthConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonthEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonthEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonthEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonthEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonthEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonthEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonthEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonthEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonth)
	fc.Result = res
	return ec.marshalORentPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonthEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonthEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_RentPaymentByMonth_description(ctx, field)
			case "id":
				return ec.fieldContext_RentPaymentByMonth_id(ctx, field)
			case "month":
				return ec.fieldContext_RentPaymentByMonth_month(ctx, field)
			case "paymentDate":
				return ec.fieldContext_RentPaymentByMonth_paymentDate(ctx, field)
			case "published":
				return ec.fieldContext_RentPaymentByMonth_published(ctx, field)
			case "stadium":
				return ec.fieldContext_RentPaymentByMonth_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_RentPaymentByMonth_stadiumId(ctx, field)
			case "sum":
				return ec.fieldContext_RentPaymentByMonth_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonthPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonthPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonthPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByMonth)
	fc.Result = res
	return ec.marshalORentPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonthPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonthPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_RentPaymentByMonth_description(ctx, field)
			case "id":
				return ec.fieldContext_RentPaymentByMonth_id(ctx, field)
			case "month":
				return ec.fieldContext_RentPaymentByMonth_month(ctx, field)
			case "paymentDate":
				return ec.fieldContext_RentPaymentByMonth_paymentDate(ctx, field)
			case "published":
				return ec.fieldContext_RentPaymentByMonth_published(ctx, field)
			case "stadium":
				return ec.fieldContext_RentPaymentByMonth_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_RentPaymentByMonth_stadiumId(ctx, field)
			case "sum":
				return ec.fieldContext_RentPaymentByMonth_sum(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByMonthPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByMonthPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByMonthPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByMonthPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByMonthPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_description(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_id(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_published(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_stadium(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_stadium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stadium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stadium)
	fc.Result = res
	return ec.marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_stadium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Stadium_id(ctx, field)
			case "latitude":
				return ec.fieldContext_Stadium_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Stadium_longitude(ctx, field)
			case "name":
				return ec.fieldContext_Stadium_name(ctx, field)
			case "place":
				return ec.fieldContext_Stadium_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Stadium_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Stadium_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stadium", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_stadiumId(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_stadiumId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StadiumID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_stadiumId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_sum(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_trainingIds(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_trainingIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_trainingIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTraining_trainings(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTraining) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTraining_trainings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trainings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Training)
	fc.Result = res
	return ec.marshalOTraining2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTraining_trainings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTraining",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coachIds":
				return ec.fieldContext_Training_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Training_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Training_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Training_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Training_id(ctx, field)
			case "published":
				return ec.fieldContext_Training_published(ctx, field)
			case "stadium":
				return ec.fieldContext_Training_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_Training_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_Training_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Training_teamId(ctx, field)
			case "time":
				return ec.fieldContext_Training_time(ctx, field)
			case "visits":
				return ec.fieldContext_Training_visits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Training", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTrainingConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTrainingConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTrainingConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.RentPaymentByTrainingEdge)
	fc.Result = res
	return ec.marshalNRentPaymentByTrainingEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTrainingConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTrainingConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_RentPaymentByTrainingEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_RentPaymentByTrainingEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTrainingEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTrainingConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTrainingConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTrainingConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTrainingConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTrainingConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTrainingEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTrainingEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTrainingEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTrainingEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTrainingEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTrainingEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTrainingEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTrainingEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTraining)
	fc.Result = res
	return ec.marshalORentPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTrainingEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTrainingEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_RentPaymentByTraining_description(ctx, field)
			case "id":
				return ec.fieldContext_RentPaymentByTraining_id(ctx, field)
			case "published":
				return ec.fieldContext_RentPaymentByTraining_published(ctx, field)
			case "stadium":
				return ec.fieldContext_RentPaymentByTraining_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_RentPaymentByTraining_stadiumId(ctx, field)
			case "sum":
				return ec.fieldContext_RentPaymentByTraining_sum(ctx, field)
			case "trainingIds":
				return ec.fieldContext_RentPaymentByTraining_trainingIds(ctx, field)
			case "trainings":
				return ec.fieldContext_RentPaymentByTraining_trainings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTraining", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTrainingPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTrainingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTrainingPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RentPaymentByTraining)
	fc.Result = res
	return ec.marshalORentPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTrainingPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTrainingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_RentPaymentByTraining_description(ctx, field)
			case "id":
				return ec.fieldContext_RentPaymentByTraining_id(ctx, field)
			case "published":
				return ec.fieldContext_RentPaymentByTraining_published(ctx, field)
			case "stadium":
				return ec.fieldContext_RentPaymentByTraining_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_RentPaymentByTraining_stadiumId(ctx, field)
			case "sum":
				return ec.fieldContext_RentPaymentByTraining_sum(ctx, field)
			case "trainingIds":
				return ec.fieldContext_RentPaymentByTraining_trainingIds(ctx, field)
			case "trainings":
				return ec.fieldContext_RentPaymentByTraining_trainings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentPaymentByTraining", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentPaymentByTrainingPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.RentPaymentByTrainingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RentPaymentByTrainingPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RentPaymentByTrainingPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentPaymentByTrainingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stadium_id(ctx context.Context, field graphql.CollectedField, obj *models.Stadium) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stadium_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stadium_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stadium",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stadium_latitude(ctx context.Context, field graphql.CollectedField, obj *models.Stadium) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stadium_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stadium_latitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stadium",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stadium_longitude(ctx context.Context, field graphql.CollectedField, obj *models.Stadium) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stadium_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stadium_longitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stadium",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stadium_name(ctx context.Context, field graphql.CollectedField, obj *models.Stadium) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stadium_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stadium_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stadium",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stadium_place(ctx context.Context, field graphql.CollectedField, obj *models.Stadium) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stadium_place(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Stadium().Place(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Place)
	fc.Result = res
	return ec.marshalOPlace2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stadium_place(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stadium",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Place_address(ctx, field)
			case "description":
				return ec.fieldContext_Place_description(ctx, field)
			case "id":
				return ec.fieldContext_Place_id(ctx, field)
			case "name":
				return ec.fieldContext_Place_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Place_orderNumber(ctx, field)
			case "published":
				return ec.fieldContext_Place_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Place", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stadium_placeId(ctx context.Context, field graphql.CollectedField, obj *models.Stadium) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stadium_placeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stadium_placeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stadium",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Stadium_published(ctx context.Context, field graphql.CollectedField, obj *models.Stadium) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Stadium_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Stadium_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Stadium",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.StadiumConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.StadiumEdge)
	fc.Result = res
	return ec.marshalNStadiumEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_StadiumEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_StadiumEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StadiumEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.StadiumConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumDto_id(ctx context.Context, field graphql.CollectedField, obj *models.StadiumDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumDto_name(ctx context.Context, field graphql.CollectedField, obj *models.StadiumDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.StadiumEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.StadiumEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stadium)
	fc.Result = res
	return ec.marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Stadium_id(ctx, field)
			case "latitude":
				return ec.fieldContext_Stadium_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Stadium_longitude(ctx, field)
			case "name":
				return ec.fieldContext_Stadium_name(ctx, field)
			case "place":
				return ec.fieldContext_Stadium_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Stadium_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Stadium_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stadium", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.StadiumPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stadium)
	fc.Result = res
	return ec.marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Stadium_id(ctx, field)
			case "latitude":
				return ec.fieldContext_Stadium_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Stadium_longitude(ctx, field)
			case "name":
				return ec.fieldContext_Stadium_name(ctx, field)
			case "place":
				return ec.fieldContext_Stadium_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Stadium_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Stadium_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stadium", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StadiumPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.StadiumPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StadiumPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StadiumPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StadiumPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_birthday(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_birthday(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_department(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.Department)
	fc.Result = res
	return ec.marshalNDepartment2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Department does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_description(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_fileName(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_id(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_name(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_orderNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_orderNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_published(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_user(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Staff().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_userId(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Staff_work(ctx context.Context, field graphql.CollectedField, obj *models.Staff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Staff_work(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Work, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Staff_work(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Staff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.StaffConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.StaffEdge)
	fc.Result = res
	return ec.marshalNStaffEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_StaffEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_StaffEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.StaffConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffDto_id(ctx context.Context, field graphql.CollectedField, obj *models.StaffDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffDto_name(ctx context.Context, field graphql.CollectedField, obj *models.StaffDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.StaffEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.StaffEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.StaffPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.StaffPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_birthday(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_birthday(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_creatorIds(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_creatorIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_creatorIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_creators(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_creators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Student().Creators(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Creator)
	fc.Result = res
	return ec.marshalOCreator2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_creators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Creator_id(ctx, field)
			case "name":
				return ec.fieldContext_Creator_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Creator_passportNum(ctx, field)
			case "phone":
				return ec.fieldContext_Creator_phone(ctx, field)
			case "published":
				return ec.fieldContext_Creator_published(ctx, field)
			case "user":
				return ec.fieldContext_Creator_user(ctx, field)
			case "userId":
				return ec.fieldContext_Creator_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Creator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_id(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_name(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_passportNum(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_passportNum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_passportNum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_paymentSum(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_paymentSum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentSum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_paymentSum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_published(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_teamIds(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_teamIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_teamIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Student_teams(ctx context.Context, field graphql.CollectedField, obj *models.Student) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Student_teams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Student().Teams(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Student_teams(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Student",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.StudentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.StudentEdge)
	fc.Result = res
	return ec.marshalNStudentEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_StudentEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_StudentEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.StudentConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDto_id(ctx context.Context, field graphql.CollectedField, obj *models.StudentDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDto_name(ctx context.Context, field graphql.CollectedField, obj *models.StudentDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.StudentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.StudentEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.StudentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.StudentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_id(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_payed(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_payed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_payed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_published(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_student(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_student(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StudentVisit().Student(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_student(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_studentId(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_studentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_studentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_training(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_training(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StudentVisit().Training(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Training)
	fc.Result = res
	return ec.marshalOTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_training(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coachIds":
				return ec.fieldContext_Training_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Training_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Training_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Training_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Training_id(ctx, field)
			case "published":
				return ec.fieldContext_Training_published(ctx, field)
			case "stadium":
				return ec.fieldContext_Training_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_Training_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_Training_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Training_teamId(ctx, field)
			case "time":
				return ec.fieldContext_Training_time(ctx, field)
			case "visits":
				return ec.fieldContext_Training_visits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Training", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_trainingId(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_trainingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_trainingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisit_visitStatus(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisit_visitStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisitStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.VisitStatus)
	fc.Result = res
	return ec.marshalNVisitStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐVisitStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisit_visitStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VisitStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisitConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisitConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisitConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.StudentVisitEdge)
	fc.Result = res
	return ec.marshalNStudentVisitEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisitConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisitConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_StudentVisitEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_StudentVisitEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisitEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisitConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisitConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisitConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisitConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisitConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisitEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisitEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisitEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisitEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisitEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisitEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisitEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisitEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisit)
	fc.Result = res
	return ec.marshalOStudentVisit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisitEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisitEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentVisit_id(ctx, field)
			case "payed":
				return ec.fieldContext_StudentVisit_payed(ctx, field)
			case "published":
				return ec.fieldContext_StudentVisit_published(ctx, field)
			case "student":
				return ec.fieldContext_StudentVisit_student(ctx, field)
			case "studentId":
				return ec.fieldContext_StudentVisit_studentId(ctx, field)
			case "training":
				return ec.fieldContext_StudentVisit_training(ctx, field)
			case "trainingId":
				return ec.fieldContext_StudentVisit_trainingId(ctx, field)
			case "visitStatus":
				return ec.fieldContext_StudentVisit_visitStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisitPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisitPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisitPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.StudentVisit)
	fc.Result = res
	return ec.marshalOStudentVisit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisitPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisitPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentVisit_id(ctx, field)
			case "payed":
				return ec.fieldContext_StudentVisit_payed(ctx, field)
			case "published":
				return ec.fieldContext_StudentVisit_published(ctx, field)
			case "student":
				return ec.fieldContext_StudentVisit_student(ctx, field)
			case "studentId":
				return ec.fieldContext_StudentVisit_studentId(ctx, field)
			case "training":
				return ec.fieldContext_StudentVisit_training(ctx, field)
			case "trainingId":
				return ec.fieldContext_StudentVisit_trainingId(ctx, field)
			case "visitStatus":
				return ec.fieldContext_StudentVisit_visitStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentVisit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentVisitPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.StudentVisitPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StudentVisitPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StudentVisitPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentVisitPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_author(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_author(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_authorId(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_authorId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_authorId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_description(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_endTime(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_endTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_endTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_id(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_leadIds(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_leadIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_leadIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_leads(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_leads(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leads, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Lead)
	fc.Result = res
	return ec.marshalOLead2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_leads(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_Lead_description(ctx, field)
			case "id":
				return ec.fieldContext_Lead_id(ctx, field)
			case "name":
				return ec.fieldContext_Lead_name(ctx, field)
			case "nextVisit":
				return ec.fieldContext_Lead_nextVisit(ctx, field)
			case "nextVisitId":
				return ec.fieldContext_Lead_nextVisitId(ctx, field)
			case "phone":
				return ec.fieldContext_Lead_phone(ctx, field)
			case "published":
				return ec.fieldContext_Lead_published(ctx, field)
			case "source":
				return ec.fieldContext_Lead_source(ctx, field)
			case "status":
				return ec.fieldContext_Lead_status(ctx, field)
			case "studentIds":
				return ec.fieldContext_Lead_studentIds(ctx, field)
			case "students":
				return ec.fieldContext_Lead_students(ctx, field)
			case "team":
				return ec.fieldContext_Lead_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Lead_teamId(ctx, field)
			case "yearBorn":
				return ec.fieldContext_Lead_yearBorn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lead", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_priority(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Priority)
	fc.Result = res
	return ec.marshalOPriority2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPriority(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_priority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Priority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_published(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_result(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_startTime(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_startTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_startTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_studentIds(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_studentIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_studentIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_students(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_students(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Students, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Student)
	fc.Result = res
	return ec.marshalOStudent2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_students(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Student_birthday(ctx, field)
			case "creatorIds":
				return ec.fieldContext_Student_creatorIds(ctx, field)
			case "creators":
				return ec.fieldContext_Student_creators(ctx, field)
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "name":
				return ec.fieldContext_Student_name(ctx, field)
			case "passportNum":
				return ec.fieldContext_Student_passportNum(ctx, field)
			case "paymentSum":
				return ec.fieldContext_Student_paymentSum(ctx, field)
			case "published":
				return ec.fieldContext_Student_published(ctx, field)
			case "teamIds":
				return ec.fieldContext_Student_teamIds(ctx, field)
			case "teams":
				return ec.fieldContext_Student_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_taskStatus(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_taskStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TaskStatus)
	fc.Result = res
	return ec.marshalOTaskStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_taskStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_title(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_workerIds(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_workerIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkerIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_workerIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_workers(ctx context.Context, field graphql.CollectedField, obj *models.Task) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Task_workers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Task_workers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.TaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TaskEdge)
	fc.Result = res
	return ec.marshalNTaskEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TaskEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TaskEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.TaskConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.TaskEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.TaskEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Task)
	fc.Result = res
	return ec.marshalOTask2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Task_author(ctx, field)
			case "authorId":
				return ec.fieldContext_Task_authorId(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "endTime":
				return ec.fieldContext_Task_endTime(ctx, field)
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "leadIds":
				return ec.fieldContext_Task_leadIds(ctx, field)
			case "leads":
				return ec.fieldContext_Task_leads(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "published":
				return ec.fieldContext_Task_published(ctx, field)
			case "result":
				return ec.fieldContext_Task_result(ctx, field)
			case "startTime":
				return ec.fieldContext_Task_startTime(ctx, field)
			case "studentIds":
				return ec.fieldContext_Task_studentIds(ctx, field)
			case "students":
				return ec.fieldContext_Task_students(ctx, field)
			case "taskStatus":
				return ec.fieldContext_Task_taskStatus(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "workerIds":
				return ec.fieldContext_Task_workerIds(ctx, field)
			case "workers":
				return ec.fieldContext_Task_workers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.TaskPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Task)
	fc.Result = res
	return ec.marshalOTask2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTask(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Task_author(ctx, field)
			case "authorId":
				return ec.fieldContext_Task_authorId(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "endTime":
				return ec.fieldContext_Task_endTime(ctx, field)
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "leadIds":
				return ec.fieldContext_Task_leadIds(ctx, field)
			case "leads":
				return ec.fieldContext_Task_leads(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "published":
				return ec.fieldContext_Task_published(ctx, field)
			case "result":
				return ec.fieldContext_Task_result(ctx, field)
			case "startTime":
				return ec.fieldContext_Task_startTime(ctx, field)
			case "studentIds":
				return ec.fieldContext_Task_studentIds(ctx, field)
			case "students":
				return ec.fieldContext_Task_students(ctx, field)
			case "taskStatus":
				return ec.fieldContext_Task_taskStatus(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "workerIds":
				return ec.fieldContext_Task_workerIds(ctx, field)
			case "workers":
				return ec.fieldContext_Task_workers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.TaskPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_ages(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_ages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.Age)
	fc.Result = res
	return ec.marshalOAge2ᚕgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_ages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Age does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_coachIds(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_coachIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoachIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_coachIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_coaches(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_coaches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Team().Coaches(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_coaches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_headCoach(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_headCoach(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Team().HeadCoach(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_headCoach(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_headCoachId(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_headCoachId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HeadCoachID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_headCoachId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_id(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_name(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_place(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_place(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Team().Place(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Place)
	fc.Result = res
	return ec.marshalOPlace2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_place(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Place_address(ctx, field)
			case "description":
				return ec.fieldContext_Place_description(ctx, field)
			case "id":
				return ec.fieldContext_Place_id(ctx, field)
			case "name":
				return ec.fieldContext_Place_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Place_orderNumber(ctx, field)
			case "published":
				return ec.fieldContext_Place_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Place", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_placeId(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_placeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_placeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_published(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_writable(ctx context.Context, field graphql.CollectedField, obj *models.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_writable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Writable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_writable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_date(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_id(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_published(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_rent(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_rent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_rent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_salary(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_salary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_salary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_sum(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_sum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_sum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_team(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_teamId(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_teamId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_teamId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalance_tickets(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalance_tickets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tickets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalance_tickets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalanceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalanceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalanceConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TeamBalanceEdge)
	fc.Result = res
	return ec.marshalNTeamBalanceEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalanceConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalanceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TeamBalanceEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TeamBalanceEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalanceEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalanceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalanceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalanceConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalanceConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalanceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalanceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalanceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalanceEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalanceEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalanceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalanceEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalanceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalanceEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalance)
	fc.Result = res
	return ec.marshalOTeamBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalanceEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalanceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_TeamBalance_date(ctx, field)
			case "id":
				return ec.fieldContext_TeamBalance_id(ctx, field)
			case "published":
				return ec.fieldContext_TeamBalance_published(ctx, field)
			case "rent":
				return ec.fieldContext_TeamBalance_rent(ctx, field)
			case "salary":
				return ec.fieldContext_TeamBalance_salary(ctx, field)
			case "sum":
				return ec.fieldContext_TeamBalance_sum(ctx, field)
			case "team":
				return ec.fieldContext_TeamBalance_team(ctx, field)
			case "teamId":
				return ec.fieldContext_TeamBalance_teamId(ctx, field)
			case "tickets":
				return ec.fieldContext_TeamBalance_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalancePayload_record(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalancePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalancePayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TeamBalance)
	fc.Result = res
	return ec.marshalOTeamBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalancePayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalancePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_TeamBalance_date(ctx, field)
			case "id":
				return ec.fieldContext_TeamBalance_id(ctx, field)
			case "published":
				return ec.fieldContext_TeamBalance_published(ctx, field)
			case "rent":
				return ec.fieldContext_TeamBalance_rent(ctx, field)
			case "salary":
				return ec.fieldContext_TeamBalance_salary(ctx, field)
			case "sum":
				return ec.fieldContext_TeamBalance_sum(ctx, field)
			case "team":
				return ec.fieldContext_TeamBalance_team(ctx, field)
			case "teamId":
				return ec.fieldContext_TeamBalance_teamId(ctx, field)
			case "tickets":
				return ec.fieldContext_TeamBalance_tickets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamBalance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamBalancePayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.TeamBalancePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamBalancePayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamBalancePayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamBalancePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.TeamConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TeamEdge)
	fc.Result = res
	return ec.marshalNTeamEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TeamEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TeamEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.TeamConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamDto_id(ctx context.Context, field graphql.CollectedField, obj *models.TeamDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamDto_name(ctx context.Context, field graphql.CollectedField, obj *models.TeamDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.TeamEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.TeamEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.TeamPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.TeamPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_accessToken(ctx context.Context, field graphql.CollectedField, obj *models.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_accessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_expiration(ctx context.Context, field graphql.CollectedField, obj *models.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_expiration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expiration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_expiration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_refreshToken(ctx context.Context, field graphql.CollectedField, obj *models.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_refreshToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_coachIds(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_coachIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoachIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_coachIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_coaches(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_coaches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Training().Coaches(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_coaches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_headCoach(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_headCoach(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Training().HeadCoach(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Staff)
	fc.Result = res
	return ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_headCoach(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_Staff_birthday(ctx, field)
			case "department":
				return ec.fieldContext_Staff_department(ctx, field)
			case "description":
				return ec.fieldContext_Staff_description(ctx, field)
			case "fileName":
				return ec.fieldContext_Staff_fileName(ctx, field)
			case "id":
				return ec.fieldContext_Staff_id(ctx, field)
			case "name":
				return ec.fieldContext_Staff_name(ctx, field)
			case "orderNumber":
				return ec.fieldContext_Staff_orderNumber(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Staff_phoneNumber(ctx, field)
			case "published":
				return ec.fieldContext_Staff_published(ctx, field)
			case "user":
				return ec.fieldContext_Staff_user(ctx, field)
			case "userId":
				return ec.fieldContext_Staff_userId(ctx, field)
			case "work":
				return ec.fieldContext_Staff_work(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Staff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_headCoachId(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_headCoachId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HeadCoachID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_headCoachId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_id(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_published(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_stadium(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_stadium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Training().Stadium(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stadium)
	fc.Result = res
	return ec.marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_stadium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Stadium_id(ctx, field)
			case "latitude":
				return ec.fieldContext_Stadium_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Stadium_longitude(ctx, field)
			case "name":
				return ec.fieldContext_Stadium_name(ctx, field)
			case "place":
				return ec.fieldContext_Stadium_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Stadium_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Stadium_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stadium", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_stadiumId(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_stadiumId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StadiumID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_stadiumId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_team(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Training().Team(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_teamId(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_teamId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_teamId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_time(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Training_visits(ctx context.Context, field graphql.CollectedField, obj *models.Training) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Training_visits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Training_visits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Training",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.TrainingConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TrainingEdge)
	fc.Result = res
	return ec.marshalNTrainingEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TrainingEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TrainingEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.TrainingConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_day(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DayOfWeek)
	fc.Result = res
	return ec.marshalODayOfWeek2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDayOfWeek(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_day(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DayOfWeek does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_id(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_published(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_stadium(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_stadium(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stadium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Stadium)
	fc.Result = res
	return ec.marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_stadium(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Stadium_id(ctx, field)
			case "latitude":
				return ec.fieldContext_Stadium_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Stadium_longitude(ctx, field)
			case "name":
				return ec.fieldContext_Stadium_name(ctx, field)
			case "place":
				return ec.fieldContext_Stadium_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Stadium_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Stadium_published(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Stadium", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_stadiumId(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_stadiumId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StadiumID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_stadiumId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_team(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ages":
				return ec.fieldContext_Team_ages(ctx, field)
			case "coachIds":
				return ec.fieldContext_Team_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Team_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Team_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Team_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "place":
				return ec.fieldContext_Team_place(ctx, field)
			case "placeId":
				return ec.fieldContext_Team_placeId(ctx, field)
			case "published":
				return ec.fieldContext_Team_published(ctx, field)
			case "writable":
				return ec.fieldContext_Team_writable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_teamId(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_teamId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_teamId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDay_time(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDay_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDay_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDayConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDayConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TrainingDayEdge)
	fc.Result = res
	return ec.marshalNTrainingDayEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDayConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDayConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_TrainingDayEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_TrainingDayEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDayEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDayConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDayConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDayConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDayConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDayEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDayEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDayEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDayEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDayEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDayEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDayEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDay)
	fc.Result = res
	return ec.marshalOTrainingDay2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDay(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDayEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDayEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "day":
				return ec.fieldContext_TrainingDay_day(ctx, field)
			case "id":
				return ec.fieldContext_TrainingDay_id(ctx, field)
			case "published":
				return ec.fieldContext_TrainingDay_published(ctx, field)
			case "stadium":
				return ec.fieldContext_TrainingDay_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_TrainingDay_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_TrainingDay_team(ctx, field)
			case "teamId":
				return ec.fieldContext_TrainingDay_teamId(ctx, field)
			case "time":
				return ec.fieldContext_TrainingDay_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDay", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDayPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDayPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDayPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TrainingDay)
	fc.Result = res
	return ec.marshalOTrainingDay2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDay(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDayPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDayPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "day":
				return ec.fieldContext_TrainingDay_day(ctx, field)
			case "id":
				return ec.fieldContext_TrainingDay_id(ctx, field)
			case "published":
				return ec.fieldContext_TrainingDay_published(ctx, field)
			case "stadium":
				return ec.fieldContext_TrainingDay_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_TrainingDay_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_TrainingDay_team(ctx, field)
			case "teamId":
				return ec.fieldContext_TrainingDay_teamId(ctx, field)
			case "time":
				return ec.fieldContext_TrainingDay_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrainingDay", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDayPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDayPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDayPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDayPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDayPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDto_id(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingDto_name(ctx context.Context, field graphql.CollectedField, obj *models.TrainingDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.TrainingEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.TrainingEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Training)
	fc.Result = res
	return ec.marshalOTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coachIds":
				return ec.fieldContext_Training_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Training_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Training_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Training_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Training_id(ctx, field)
			case "published":
				return ec.fieldContext_Training_published(ctx, field)
			case "stadium":
				return ec.fieldContext_Training_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_Training_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_Training_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Training_teamId(ctx, field)
			case "time":
				return ec.fieldContext_Training_time(ctx, field)
			case "visits":
				return ec.fieldContext_Training_visits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Training", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.TrainingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.Training)
	fc.Result = res
	return ec.marshalOTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "coachIds":
				return ec.fieldContext_Training_coachIds(ctx, field)
			case "coaches":
				return ec.fieldContext_Training_coaches(ctx, field)
			case "headCoach":
				return ec.fieldContext_Training_headCoach(ctx, field)
			case "headCoachId":
				return ec.fieldContext_Training_headCoachId(ctx, field)
			case "id":
				return ec.fieldContext_Training_id(ctx, field)
			case "published":
				return ec.fieldContext_Training_published(ctx, field)
			case "stadium":
				return ec.fieldContext_Training_stadium(ctx, field)
			case "stadiumId":
				return ec.fieldContext_Training_stadiumId(ctx, field)
			case "team":
				return ec.fieldContext_Training_team(ctx, field)
			case "teamId":
				return ec.fieldContext_Training_teamId(ctx, field)
			case "time":
				return ec.fieldContext_Training_time(ctx, field)
			case "visits":
				return ec.fieldContext_Training_visits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Training", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrainingPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.TrainingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrainingPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrainingPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrainingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_phone(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Role does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_edges(ctx context.Context, field graphql.CollectedField, obj *models.UserConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.UserEdge)
	fc.Result = res
	return ec.marshalNUserEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_UserEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_UserEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *models.UserConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDto_id(ctx context.Context, field graphql.CollectedField, obj *models.UserDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDto_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDto_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDto_name(ctx context.Context, field graphql.CollectedField, obj *models.UserDto) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserDto_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserDto_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDto",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *models.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_node(ctx context.Context, field graphql.CollectedField, obj *models.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPayload_record(ctx context.Context, field graphql.CollectedField, obj *models.UserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPayload_record(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Record, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPayload_record(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPayload_recordId(ctx context.Context, field graphql.CollectedField, obj *models.UserPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPayload_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPayload_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputArticleFilter(ctx context.Context, obj interface{}) (models.ArticleFilter, error) {
	var it models.ArticleFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArticleInput(ctx context.Context, obj interface{}) (models.ArticleInput, error) {
	var it models.ArticleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"description", "fileName", "published", "tags", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArticleInputWithId(ctx context.Context, obj interface{}) (models.ArticleInputWithID, error) {
	var it models.ArticleInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNArticleInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartFilter(ctx context.Context, obj interface{}) (models.CartFilter, error) {
	var it models.CartFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartInput(ctx context.Context, obj interface{}) (models.CartInput, error) {
	var it models.CartInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"kitIds", "published", "studentId", "sum"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "kitIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kitIds"))
			it.KitIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentId"))
			it.StudentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCartInputWithId(ctx context.Context, obj interface{}) (models.CartInputWithID, error) {
	var it models.CartInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNCartInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClubBalanceFilter(ctx context.Context, obj interface{}) (models.ClubBalanceFilter, error) {
	var it models.ClubBalanceFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClubBalanceInput(ctx context.Context, obj interface{}) (models.ClubBalanceInput, error) {
	var it models.ClubBalanceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"date", "otherCosts", "published", "rent", "salary", "tickets"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherCosts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherCosts"))
			it.OtherCosts, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "rent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rent"))
			it.Rent, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary"))
			it.Salary, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "tickets":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tickets"))
			it.Tickets, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClubBalanceInputWithId(ctx context.Context, obj interface{}) (models.ClubBalanceInputWithID, error) {
	var it models.ClubBalanceInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNClubBalanceInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByMonthFilter(ctx context.Context, obj interface{}) (models.CoachPaymentByMonthFilter, error) {
	var it models.CoachPaymentByMonthFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByMonthInput(ctx context.Context, obj interface{}) (models.CoachPaymentByMonthInput, error) {
	var it models.CoachPaymentByMonthInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"coachId", "date", "published", "sum"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "coachId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachId"))
			it.CoachID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByMonthInputWithId(ctx context.Context, obj interface{}) (models.CoachPaymentByMonthInputWithID, error) {
	var it models.CoachPaymentByMonthInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNCoachPaymentByMonthInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByTeamFilter(ctx context.Context, obj interface{}) (models.CoachPaymentByTeamFilter, error) {
	var it models.CoachPaymentByTeamFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByTeamInput(ctx context.Context, obj interface{}) (models.CoachPaymentByTeamInput, error) {
	var it models.CoachPaymentByTeamInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"coachId", "dateFinish", "dateStart", "paymentRule", "published", "sum", "teamID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "coachId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachId"))
			it.CoachID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFinish":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateFinish"))
			it.DateFinish, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateStart":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateStart"))
			it.DateStart, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentRule":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentRule"))
			it.PaymentRule, err = ec.unmarshalNCoachPaymentRule2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentRule(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamID"))
			it.TeamID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByTeamInputWithId(ctx context.Context, obj interface{}) (models.CoachPaymentByTeamInputWithID, error) {
	var it models.CoachPaymentByTeamInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNCoachPaymentByTeamInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByTrainingFilter(ctx context.Context, obj interface{}) (models.CoachPaymentByTrainingFilter, error) {
	var it models.CoachPaymentByTrainingFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByTrainingInput(ctx context.Context, obj interface{}) (models.CoachPaymentByTrainingInput, error) {
	var it models.CoachPaymentByTrainingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"coachId", "published", "sum", "trainingID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "coachId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachId"))
			it.CoachID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "trainingID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingID"))
			it.TrainingID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoachPaymentByTrainingInputWithId(ctx context.Context, obj interface{}) (models.CoachPaymentByTrainingInputWithID, error) {
	var it models.CoachPaymentByTrainingInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNCoachPaymentByTrainingInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatorFilter(ctx context.Context, obj interface{}) (models.CreatorFilter, error) {
	var it models.CreatorFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatorInput(ctx context.Context, obj interface{}) (models.CreatorInput, error) {
	var it models.CreatorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "passportNum", "phone", "published", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "passportNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passportNum"))
			it.PassportNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatorInputWithId(ctx context.Context, obj interface{}) (models.CreatorInputWithID, error) {
	var it models.CreatorInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNCreatorInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKitFilter(ctx context.Context, obj interface{}) (models.KitFilter, error) {
	var it models.KitFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKitInput(ctx context.Context, obj interface{}) (models.KitInput, error) {
	var it models.KitInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fileName", "name", "number", "price", "published", "quantity", "size", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fileName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			it.Number, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			it.Price, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			it.Quantity, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKitInputWithId(ctx context.Context, obj interface{}) (models.KitInputWithID, error) {
	var it models.KitInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNKitInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeadFilter(ctx context.Context, obj interface{}) (models.LeadFilter, error) {
	var it models.LeadFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeadInput(ctx context.Context, obj interface{}) (models.LeadInput, error) {
	var it models.LeadInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"description", "name", "nextVisitId", "phone", "published", "source", "status", "studentIds", "teamId", "yearBorn"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nextVisitId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextVisitId"))
			it.NextVisitID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalOLeadSource2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadSource(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOLeadStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentIds"))
			it.StudentIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamId"))
			it.TeamID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "yearBorn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearBorn"))
			it.YearBorn, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeadInputWithId(ctx context.Context, obj interface{}) (models.LeadInputWithID, error) {
	var it models.LeadInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNLeadInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj interface{}) (models.LoginInput, error) {
	var it models.LoginInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"password", "phone"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoneyCostFilter(ctx context.Context, obj interface{}) (models.MoneyCostFilter, error) {
	var it models.MoneyCostFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoneyCostInput(ctx context.Context, obj interface{}) (models.MoneyCostInput, error) {
	var it models.MoneyCostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"date", "description", "moneyForm", "published", "staffId", "sum"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "moneyForm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moneyForm"))
			it.MoneyForm, err = ec.unmarshalNMoneyForm2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffId"))
			it.StaffID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoneyCostInputWithId(ctx context.Context, obj interface{}) (models.MoneyCostInputWithID, error) {
	var it models.MoneyCostInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNMoneyCostInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoneyMoveFilter(ctx context.Context, obj interface{}) (models.MoneyMoveFilter, error) {
	var it models.MoneyMoveFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoneyMoveInput(ctx context.Context, obj interface{}) (models.MoneyMoveInput, error) {
	var it models.MoneyMoveInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"dateFinish", "datePayment", "dateStart", "description", "moneyForm", "ownerId", "published", "studentId", "sum", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "dateFinish":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateFinish"))
			it.DateFinish, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "datePayment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("datePayment"))
			it.DatePayment, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateStart":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateStart"))
			it.DateStart, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moneyForm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moneyForm"))
			it.MoneyForm, err = ec.unmarshalNMoneyForm2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			it.OwnerID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentId"))
			it.StudentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoneyMoveInputWithId(ctx context.Context, obj interface{}) (models.MoneyMoveInputWithID, error) {
	var it models.MoneyMoveInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNMoneyMoveInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrderFilter(ctx context.Context, obj interface{}) (models.OrderFilter, error) {
	var it models.OrderFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrderInput(ctx context.Context, obj interface{}) (models.OrderInput, error) {
	var it models.OrderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cartId", "creatorId", "fileName", "orderStatus", "published"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cartId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cartId"))
			it.CartID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorId"))
			it.CreatorID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderStatus"))
			it.OrderStatus, err = ec.unmarshalNOrderStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrderInputWithId(ctx context.Context, obj interface{}) (models.OrderInputWithID, error) {
	var it models.OrderInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNOrderInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlaceFilter(ctx context.Context, obj interface{}) (models.PlaceFilter, error) {
	var it models.PlaceFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlaceInput(ctx context.Context, obj interface{}) (models.PlaceInput, error) {
	var it models.PlaceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "description", "name", "orderNumber", "published"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlaceInputWithId(ctx context.Context, obj interface{}) (models.PlaceInputWithID, error) {
	var it models.PlaceInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNPlaceInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterInput(ctx context.Context, obj interface{}) (models.RegisterInput, error) {
	var it models.RegisterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"confirmPassword", "firstName", "lastName", "password", "phone"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "confirmPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmPassword"))
			it.ConfirmPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentPaymentByMonthFilter(ctx context.Context, obj interface{}) (models.RentPaymentByMonthFilter, error) {
	var it models.RentPaymentByMonthFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentPaymentByMonthInput(ctx context.Context, obj interface{}) (models.RentPaymentByMonthInput, error) {
	var it models.RentPaymentByMonthInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"description", "month", "paymentDate", "published", "stadiumId", "sum"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDate"))
			it.PaymentDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stadiumId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stadiumId"))
			it.StadiumID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentPaymentByMonthInputWithId(ctx context.Context, obj interface{}) (models.RentPaymentByMonthInputWithID, error) {
	var it models.RentPaymentByMonthInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNRentPaymentByMonthInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentPaymentByTrainingFilter(ctx context.Context, obj interface{}) (models.RentPaymentByTrainingFilter, error) {
	var it models.RentPaymentByTrainingFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentPaymentByTrainingInput(ctx context.Context, obj interface{}) (models.RentPaymentByTrainingInput, error) {
	var it models.RentPaymentByTrainingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"description", "published", "stadiumID", "sum", "trainingIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stadiumID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stadiumID"))
			it.StadiumID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "trainingIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingIds"))
			it.TrainingIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentPaymentByTrainingInputWithId(ctx context.Context, obj interface{}) (models.RentPaymentByTrainingInputWithID, error) {
	var it models.RentPaymentByTrainingInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNRentPaymentByTrainingInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStadiumFilter(ctx context.Context, obj interface{}) (models.StadiumFilter, error) {
	var it models.StadiumFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStadiumInput(ctx context.Context, obj interface{}) (models.StadiumInput, error) {
	var it models.StadiumInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"latitude", "longitude", "name", "placeId", "published"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "placeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placeId"))
			it.PlaceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStadiumInputWithId(ctx context.Context, obj interface{}) (models.StadiumInputWithID, error) {
	var it models.StadiumInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNStadiumInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffFilter(ctx context.Context, obj interface{}) (models.StaffFilter, error) {
	var it models.StaffFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffInput(ctx context.Context, obj interface{}) (models.StaffInput, error) {
	var it models.StaffInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"birthday", "department", "description", "fileName", "name", "orderNumber", "phoneNumber", "published", "userId", "work"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
			it.Department, err = ec.unmarshalNDepartment2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDepartment(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNumber"))
			it.OrderNumber, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "work":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work"))
			it.Work, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffInputWithId(ctx context.Context, obj interface{}) (models.StaffInputWithID, error) {
	var it models.StaffInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNStaffInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudentFilter(ctx context.Context, obj interface{}) (models.StudentFilter, error) {
	var it models.StudentFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudentInput(ctx context.Context, obj interface{}) (models.StudentInput, error) {
	var it models.StudentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"birthday", "creatorIds", "name", "passportNum", "paymentSum", "published", "teamIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "creatorIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorIds"))
			it.CreatorIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "passportNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passportNum"))
			it.PassportNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentSum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentSum"))
			it.PaymentSum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamIds"))
			it.TeamIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudentInputWithId(ctx context.Context, obj interface{}) (models.StudentInputWithID, error) {
	var it models.StudentInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNStudentInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudentVisitFilter(ctx context.Context, obj interface{}) (models.StudentVisitFilter, error) {
	var it models.StudentVisitFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudentVisitInput(ctx context.Context, obj interface{}) (models.StudentVisitInput, error) {
	var it models.StudentVisitInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"payed", "published", "studentId", "trainingId", "visitStatus"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "payed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payed"))
			it.Payed, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentId"))
			it.StudentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "trainingId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingId"))
			it.TrainingID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "visitStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitStatus"))
			it.VisitStatus, err = ec.unmarshalNVisitStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐVisitStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudentVisitInputWithId(ctx context.Context, obj interface{}) (models.StudentVisitInputWithID, error) {
	var it models.StudentVisitInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNStudentVisitInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskFilter(ctx context.Context, obj interface{}) (models.TaskFilter, error) {
	var it models.TaskFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskInput(ctx context.Context, obj interface{}) (models.TaskInput, error) {
	var it models.TaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"authorId", "description", "endTime", "leadIds", "priority", "published", "result", "startTime", "studentIds", "taskStatus", "title", "workerIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "authorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorId"))
			it.AuthorID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "leadIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leadIds"))
			it.LeadIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOPriority2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPriority(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result"))
			it.Result, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			it.StartTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentIds"))
			it.StudentIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "taskStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskStatus"))
			it.TaskStatus, err = ec.unmarshalOTaskStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "workerIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workerIds"))
			it.WorkerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaskInputWithId(ctx context.Context, obj interface{}) (models.TaskInputWithID, error) {
	var it models.TaskInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNTaskInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamBalanceFilter(ctx context.Context, obj interface{}) (models.TeamBalanceFilter, error) {
	var it models.TeamBalanceFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamBalanceInput(ctx context.Context, obj interface{}) (models.TeamBalanceInput, error) {
	var it models.TeamBalanceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"date", "published", "rent", "salary", "teamId", "tickets"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "rent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rent"))
			it.Rent, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary"))
			it.Salary, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamId"))
			it.TeamID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tickets":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tickets"))
			it.Tickets, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamBalanceInputWithId(ctx context.Context, obj interface{}) (models.TeamBalanceInputWithID, error) {
	var it models.TeamBalanceInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNTeamBalanceInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamFilter(ctx context.Context, obj interface{}) (models.TeamFilter, error) {
	var it models.TeamFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamInput(ctx context.Context, obj interface{}) (models.TeamInput, error) {
	var it models.TeamInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ages", "coachIds", "headCoachId", "name", "placeId", "published", "writable"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ages"))
			it.Ages, err = ec.unmarshalOAge2ᚕgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAgeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "coachIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachIds"))
			it.CoachIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "headCoachId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("headCoachId"))
			it.HeadCoachID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "placeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("placeId"))
			it.PlaceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "writable":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("writable"))
			it.Writable, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamInputWithId(ctx context.Context, obj interface{}) (models.TeamInputWithID, error) {
	var it models.TeamInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNTeamInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingDayFilter(ctx context.Context, obj interface{}) (models.TrainingDayFilter, error) {
	var it models.TrainingDayFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingDayInput(ctx context.Context, obj interface{}) (models.TrainingDayInput, error) {
	var it models.TrainingDayInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"day", "published", "stadiumId", "teamId", "time"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalODayOfWeek2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDayOfWeek(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stadiumId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stadiumId"))
			it.StadiumID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamId"))
			it.TeamID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingDayInputWithId(ctx context.Context, obj interface{}) (models.TrainingDayInputWithID, error) {
	var it models.TrainingDayInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNTrainingDayInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingFilter(ctx context.Context, obj interface{}) (models.TrainingFilter, error) {
	var it models.TrainingFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingInput(ctx context.Context, obj interface{}) (models.TrainingInput, error) {
	var it models.TrainingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"coachIds", "headCoachId", "published", "stadiumId", "teamId", "time", "visits"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "coachIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coachIds"))
			it.CoachIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "headCoachId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("headCoachId"))
			it.HeadCoachID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stadiumId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stadiumId"))
			it.StadiumID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamId"))
			it.TeamID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "visits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visits"))
			it.Visits, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrainingInputWithId(ctx context.Context, obj interface{}) (models.TrainingInputWithID, error) {
	var it models.TrainingInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNTrainingInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilter(ctx context.Context, obj interface{}) (models.UserFilter, error) {
	var it models.UserFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (models.UserInput, error) {
	var it models.UserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "password", "phone", "published", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNRole2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInputWithId(ctx context.Context, obj interface{}) (models.UserInputWithID, error) {
	var it models.UserInputWithID
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			it.Input, err = ec.unmarshalNUserInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var articleImplementors = []string{"Article"}

func (ec *executionContext) _Article(ctx context.Context, sel ast.SelectionSet, obj *models.Article) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Article")
		case "author":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Article_author(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "authorId":

			out.Values[i] = ec._Article_authorId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._Article_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileName":

			out.Values[i] = ec._Article_fileName(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Article_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._Article_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tags":

			out.Values[i] = ec._Article_tags(ctx, field, obj)

		case "title":

			out.Values[i] = ec._Article_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var articleConnectionImplementors = []string{"ArticleConnection"}

func (ec *executionContext) _ArticleConnection(ctx context.Context, sel ast.SelectionSet, obj *models.ArticleConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleConnection")
		case "edges":

			out.Values[i] = ec._ArticleConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._ArticleConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var articleEdgeImplementors = []string{"ArticleEdge"}

func (ec *executionContext) _ArticleEdge(ctx context.Context, sel ast.SelectionSet, obj *models.ArticleEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articleEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticleEdge")
		case "cursor":

			out.Values[i] = ec._ArticleEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ArticleEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var articlePayloadImplementors = []string{"ArticlePayload"}

func (ec *executionContext) _ArticlePayload(ctx context.Context, sel ast.SelectionSet, obj *models.ArticlePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, articlePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArticlePayload")
		case "record":

			out.Values[i] = ec._ArticlePayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._ArticlePayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authResponseImplementors = []string{"AuthResponse"}

func (ec *executionContext) _AuthResponse(ctx context.Context, sel ast.SelectionSet, obj *models.AuthResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthResponse")
		case "authToken":

			out.Values[i] = ec._AuthResponse_authToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._AuthResponse_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authTokenImplementors = []string{"AuthToken"}

func (ec *executionContext) _AuthToken(ctx context.Context, sel ast.SelectionSet, obj *models.AuthToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authTokenImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthToken")
		case "accessToken":

			out.Values[i] = ec._AuthToken_accessToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiredAt":

			out.Values[i] = ec._AuthToken_expiredAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cartImplementors = []string{"Cart"}

func (ec *executionContext) _Cart(ctx context.Context, sel ast.SelectionSet, obj *models.Cart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cart")
		case "id":

			out.Values[i] = ec._Cart_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kitIds":

			out.Values[i] = ec._Cart_kitIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._Cart_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "student":

			out.Values[i] = ec._Cart_student(ctx, field, obj)

		case "studentId":

			out.Values[i] = ec._Cart_studentId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._Cart_sum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cartConnectionImplementors = []string{"CartConnection"}

func (ec *executionContext) _CartConnection(ctx context.Context, sel ast.SelectionSet, obj *models.CartConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartConnection")
		case "edges":

			out.Values[i] = ec._CartConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CartConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cartDtoImplementors = []string{"CartDto"}

func (ec *executionContext) _CartDto(ctx context.Context, sel ast.SelectionSet, obj *models.CartDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartDto")
		case "id":

			out.Values[i] = ec._CartDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._CartDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cartEdgeImplementors = []string{"CartEdge"}

func (ec *executionContext) _CartEdge(ctx context.Context, sel ast.SelectionSet, obj *models.CartEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartEdge")
		case "cursor":

			out.Values[i] = ec._CartEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CartEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cartPayloadImplementors = []string{"CartPayload"}

func (ec *executionContext) _CartPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CartPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cartPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CartPayload")
		case "record":

			out.Values[i] = ec._CartPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._CartPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubBalanceImplementors = []string{"ClubBalance"}

func (ec *executionContext) _ClubBalance(ctx context.Context, sel ast.SelectionSet, obj *models.ClubBalance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubBalanceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubBalance")
		case "date":

			out.Values[i] = ec._ClubBalance_date(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._ClubBalance_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "otherCosts":

			out.Values[i] = ec._ClubBalance_otherCosts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._ClubBalance_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rent":

			out.Values[i] = ec._ClubBalance_rent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salary":

			out.Values[i] = ec._ClubBalance_salary(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._ClubBalance_sum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tickets":

			out.Values[i] = ec._ClubBalance_tickets(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubBalanceConnectionImplementors = []string{"ClubBalanceConnection"}

func (ec *executionContext) _ClubBalanceConnection(ctx context.Context, sel ast.SelectionSet, obj *models.ClubBalanceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubBalanceConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubBalanceConnection")
		case "edges":

			out.Values[i] = ec._ClubBalanceConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._ClubBalanceConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubBalanceEdgeImplementors = []string{"ClubBalanceEdge"}

func (ec *executionContext) _ClubBalanceEdge(ctx context.Context, sel ast.SelectionSet, obj *models.ClubBalanceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubBalanceEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubBalanceEdge")
		case "cursor":

			out.Values[i] = ec._ClubBalanceEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._ClubBalanceEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clubBalancePayloadImplementors = []string{"ClubBalancePayload"}

func (ec *executionContext) _ClubBalancePayload(ctx context.Context, sel ast.SelectionSet, obj *models.ClubBalancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clubBalancePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClubBalancePayload")
		case "record":

			out.Values[i] = ec._ClubBalancePayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._ClubBalancePayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByMonthImplementors = []string{"CoachPaymentByMonth"}

func (ec *executionContext) _CoachPaymentByMonth(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByMonthImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByMonth")
		case "coach":

			out.Values[i] = ec._CoachPaymentByMonth_coach(ctx, field, obj)

		case "coachId":

			out.Values[i] = ec._CoachPaymentByMonth_coachId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "date":

			out.Values[i] = ec._CoachPaymentByMonth_date(ctx, field, obj)

		case "id":

			out.Values[i] = ec._CoachPaymentByMonth_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._CoachPaymentByMonth_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._CoachPaymentByMonth_sum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByMonthConnectionImplementors = []string{"CoachPaymentByMonthConnection"}

func (ec *executionContext) _CoachPaymentByMonthConnection(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByMonthConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByMonthConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByMonthConnection")
		case "edges":

			out.Values[i] = ec._CoachPaymentByMonthConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CoachPaymentByMonthConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByMonthEdgeImplementors = []string{"CoachPaymentByMonthEdge"}

func (ec *executionContext) _CoachPaymentByMonthEdge(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByMonthEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByMonthEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByMonthEdge")
		case "cursor":

			out.Values[i] = ec._CoachPaymentByMonthEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CoachPaymentByMonthEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByMonthPayloadImplementors = []string{"CoachPaymentByMonthPayload"}

func (ec *executionContext) _CoachPaymentByMonthPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByMonthPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByMonthPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByMonthPayload")
		case "record":

			out.Values[i] = ec._CoachPaymentByMonthPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._CoachPaymentByMonthPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTeamImplementors = []string{"CoachPaymentByTeam"}

func (ec *executionContext) _CoachPaymentByTeam(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTeam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTeamImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTeam")
		case "coach":

			out.Values[i] = ec._CoachPaymentByTeam_coach(ctx, field, obj)

		case "coachId":

			out.Values[i] = ec._CoachPaymentByTeam_coachId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateFinish":

			out.Values[i] = ec._CoachPaymentByTeam_dateFinish(ctx, field, obj)

		case "dateStart":

			out.Values[i] = ec._CoachPaymentByTeam_dateStart(ctx, field, obj)

		case "id":

			out.Values[i] = ec._CoachPaymentByTeam_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentRule":

			out.Values[i] = ec._CoachPaymentByTeam_paymentRule(ctx, field, obj)

		case "published":

			out.Values[i] = ec._CoachPaymentByTeam_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._CoachPaymentByTeam_sum(ctx, field, obj)

		case "team":

			out.Values[i] = ec._CoachPaymentByTeam_team(ctx, field, obj)

		case "teamId":

			out.Values[i] = ec._CoachPaymentByTeam_teamId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTeamConnectionImplementors = []string{"CoachPaymentByTeamConnection"}

func (ec *executionContext) _CoachPaymentByTeamConnection(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTeamConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTeamConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTeamConnection")
		case "edges":

			out.Values[i] = ec._CoachPaymentByTeamConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CoachPaymentByTeamConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTeamEdgeImplementors = []string{"CoachPaymentByTeamEdge"}

func (ec *executionContext) _CoachPaymentByTeamEdge(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTeamEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTeamEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTeamEdge")
		case "cursor":

			out.Values[i] = ec._CoachPaymentByTeamEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CoachPaymentByTeamEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTeamPayloadImplementors = []string{"CoachPaymentByTeamPayload"}

func (ec *executionContext) _CoachPaymentByTeamPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTeamPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTeamPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTeamPayload")
		case "record":

			out.Values[i] = ec._CoachPaymentByTeamPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._CoachPaymentByTeamPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTrainingImplementors = []string{"CoachPaymentByTraining"}

func (ec *executionContext) _CoachPaymentByTraining(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTraining) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTrainingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTraining")
		case "coach":

			out.Values[i] = ec._CoachPaymentByTraining_coach(ctx, field, obj)

		case "coachId":

			out.Values[i] = ec._CoachPaymentByTraining_coachId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._CoachPaymentByTraining_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._CoachPaymentByTraining_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._CoachPaymentByTraining_sum(ctx, field, obj)

		case "training":

			out.Values[i] = ec._CoachPaymentByTraining_training(ctx, field, obj)

		case "trainingId":

			out.Values[i] = ec._CoachPaymentByTraining_trainingId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTrainingConnectionImplementors = []string{"CoachPaymentByTrainingConnection"}

func (ec *executionContext) _CoachPaymentByTrainingConnection(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTrainingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTrainingConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTrainingConnection")
		case "edges":

			out.Values[i] = ec._CoachPaymentByTrainingConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CoachPaymentByTrainingConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTrainingEdgeImplementors = []string{"CoachPaymentByTrainingEdge"}

func (ec *executionContext) _CoachPaymentByTrainingEdge(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTrainingEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTrainingEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTrainingEdge")
		case "cursor":

			out.Values[i] = ec._CoachPaymentByTrainingEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CoachPaymentByTrainingEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coachPaymentByTrainingPayloadImplementors = []string{"CoachPaymentByTrainingPayload"}

func (ec *executionContext) _CoachPaymentByTrainingPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CoachPaymentByTrainingPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coachPaymentByTrainingPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CoachPaymentByTrainingPayload")
		case "record":

			out.Values[i] = ec._CoachPaymentByTrainingPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._CoachPaymentByTrainingPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creatorImplementors = []string{"Creator"}

func (ec *executionContext) _Creator(ctx context.Context, sel ast.SelectionSet, obj *models.Creator) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creatorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Creator")
		case "id":

			out.Values[i] = ec._Creator_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Creator_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "passportNum":

			out.Values[i] = ec._Creator_passportNum(ctx, field, obj)

		case "phone":

			out.Values[i] = ec._Creator_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._Creator_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Creator_user(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "userId":

			out.Values[i] = ec._Creator_userId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creatorConnectionImplementors = []string{"CreatorConnection"}

func (ec *executionContext) _CreatorConnection(ctx context.Context, sel ast.SelectionSet, obj *models.CreatorConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creatorConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatorConnection")
		case "edges":

			out.Values[i] = ec._CreatorConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._CreatorConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creatorDtoImplementors = []string{"CreatorDto"}

func (ec *executionContext) _CreatorDto(ctx context.Context, sel ast.SelectionSet, obj *models.CreatorDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creatorDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatorDto")
		case "id":

			out.Values[i] = ec._CreatorDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._CreatorDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creatorEdgeImplementors = []string{"CreatorEdge"}

func (ec *executionContext) _CreatorEdge(ctx context.Context, sel ast.SelectionSet, obj *models.CreatorEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creatorEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatorEdge")
		case "cursor":

			out.Values[i] = ec._CreatorEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._CreatorEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creatorPayloadImplementors = []string{"CreatorPayload"}

func (ec *executionContext) _CreatorPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CreatorPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creatorPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatorPayload")
		case "record":

			out.Values[i] = ec._CreatorPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._CreatorPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kitImplementors = []string{"Kit"}

func (ec *executionContext) _Kit(ctx context.Context, sel ast.SelectionSet, obj *models.Kit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kitImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Kit")
		case "fileName":

			out.Values[i] = ec._Kit_fileName(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Kit_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Kit_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "number":

			out.Values[i] = ec._Kit_number(ctx, field, obj)

		case "price":

			out.Values[i] = ec._Kit_price(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._Kit_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quantity":

			out.Values[i] = ec._Kit_quantity(ctx, field, obj)

		case "size":

			out.Values[i] = ec._Kit_size(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._Kit_title(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kitConnectionImplementors = []string{"KitConnection"}

func (ec *executionContext) _KitConnection(ctx context.Context, sel ast.SelectionSet, obj *models.KitConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kitConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KitConnection")
		case "edges":

			out.Values[i] = ec._KitConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._KitConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kitDtoImplementors = []string{"KitDto"}

func (ec *executionContext) _KitDto(ctx context.Context, sel ast.SelectionSet, obj *models.KitDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kitDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KitDto")
		case "id":

			out.Values[i] = ec._KitDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._KitDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kitEdgeImplementors = []string{"KitEdge"}

func (ec *executionContext) _KitEdge(ctx context.Context, sel ast.SelectionSet, obj *models.KitEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kitEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KitEdge")
		case "cursor":

			out.Values[i] = ec._KitEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._KitEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kitPayloadImplementors = []string{"KitPayload"}

func (ec *executionContext) _KitPayload(ctx context.Context, sel ast.SelectionSet, obj *models.KitPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kitPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KitPayload")
		case "record":

			out.Values[i] = ec._KitPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._KitPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leadImplementors = []string{"Lead"}

func (ec *executionContext) _Lead(ctx context.Context, sel ast.SelectionSet, obj *models.Lead) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lead")
		case "description":

			out.Values[i] = ec._Lead_description(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Lead_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Lead_name(ctx, field, obj)

		case "nextVisit":

			out.Values[i] = ec._Lead_nextVisit(ctx, field, obj)

		case "nextVisitId":

			out.Values[i] = ec._Lead_nextVisitId(ctx, field, obj)

		case "phone":

			out.Values[i] = ec._Lead_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._Lead_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "source":

			out.Values[i] = ec._Lead_source(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Lead_status(ctx, field, obj)

		case "studentIds":

			out.Values[i] = ec._Lead_studentIds(ctx, field, obj)

		case "students":

			out.Values[i] = ec._Lead_students(ctx, field, obj)

		case "team":

			out.Values[i] = ec._Lead_team(ctx, field, obj)

		case "teamId":

			out.Values[i] = ec._Lead_teamId(ctx, field, obj)

		case "yearBorn":

			out.Values[i] = ec._Lead_yearBorn(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leadConnectionImplementors = []string{"LeadConnection"}

func (ec *executionContext) _LeadConnection(ctx context.Context, sel ast.SelectionSet, obj *models.LeadConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeadConnection")
		case "edges":

			out.Values[i] = ec._LeadConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._LeadConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leadDtoImplementors = []string{"LeadDto"}

func (ec *executionContext) _LeadDto(ctx context.Context, sel ast.SelectionSet, obj *models.LeadDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeadDto")
		case "id":

			out.Values[i] = ec._LeadDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._LeadDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leadEdgeImplementors = []string{"LeadEdge"}

func (ec *executionContext) _LeadEdge(ctx context.Context, sel ast.SelectionSet, obj *models.LeadEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeadEdge")
		case "cursor":

			out.Values[i] = ec._LeadEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._LeadEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leadPayloadImplementors = []string{"LeadPayload"}

func (ec *executionContext) _LeadPayload(ctx context.Context, sel ast.SelectionSet, obj *models.LeadPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeadPayload")
		case "record":

			out.Values[i] = ec._LeadPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._LeadPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyCostImplementors = []string{"MoneyCost"}

func (ec *executionContext) _MoneyCost(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyCostImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyCost")
		case "date":

			out.Values[i] = ec._MoneyCost_date(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._MoneyCost_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "id":

			out.Values[i] = ec._MoneyCost_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moneyForm":

			out.Values[i] = ec._MoneyCost_moneyForm(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._MoneyCost_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "staff":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MoneyCost_staff(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "staffId":

			out.Values[i] = ec._MoneyCost_staffId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sum":

			out.Values[i] = ec._MoneyCost_sum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyCostConnectionImplementors = []string{"MoneyCostConnection"}

func (ec *executionContext) _MoneyCostConnection(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyCostConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyCostConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyCostConnection")
		case "edges":

			out.Values[i] = ec._MoneyCostConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._MoneyCostConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyCostEdgeImplementors = []string{"MoneyCostEdge"}

func (ec *executionContext) _MoneyCostEdge(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyCostEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyCostEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyCostEdge")
		case "cursor":

			out.Values[i] = ec._MoneyCostEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._MoneyCostEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyCostPayloadImplementors = []string{"MoneyCostPayload"}

func (ec *executionContext) _MoneyCostPayload(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyCostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyCostPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyCostPayload")
		case "record":

			out.Values[i] = ec._MoneyCostPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._MoneyCostPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyMoveImplementors = []string{"MoneyMove"}

func (ec *executionContext) _MoneyMove(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyMove) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyMoveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyMove")
		case "dateFinish":

			out.Values[i] = ec._MoneyMove_dateFinish(ctx, field, obj)

		case "datePayment":

			out.Values[i] = ec._MoneyMove_datePayment(ctx, field, obj)

		case "dateStart":

			out.Values[i] = ec._MoneyMove_dateStart(ctx, field, obj)

		case "description":

			out.Values[i] = ec._MoneyMove_description(ctx, field, obj)

		case "id":

			out.Values[i] = ec._MoneyMove_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moneyForm":

			out.Values[i] = ec._MoneyMove_moneyForm(ctx, field, obj)

		case "owner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MoneyMove_owner(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ownerId":

			out.Values[i] = ec._MoneyMove_ownerId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._MoneyMove_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "student":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MoneyMove_student(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "studentId":

			out.Values[i] = ec._MoneyMove_studentId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sum":

			out.Values[i] = ec._MoneyMove_sum(ctx, field, obj)

		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MoneyMove_user(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "userId":

			out.Values[i] = ec._MoneyMove_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyMoveConnectionImplementors = []string{"MoneyMoveConnection"}

func (ec *executionContext) _MoneyMoveConnection(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyMoveConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyMoveConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyMoveConnection")
		case "edges":

			out.Values[i] = ec._MoneyMoveConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._MoneyMoveConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyMoveEdgeImplementors = []string{"MoneyMoveEdge"}

func (ec *executionContext) _MoneyMoveEdge(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyMoveEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyMoveEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyMoveEdge")
		case "cursor":

			out.Values[i] = ec._MoneyMoveEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._MoneyMoveEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moneyMovePayloadImplementors = []string{"MoneyMovePayload"}

func (ec *executionContext) _MoneyMovePayload(ctx context.Context, sel ast.SelectionSet, obj *models.MoneyMovePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moneyMovePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MoneyMovePayload")
		case "record":

			out.Values[i] = ec._MoneyMovePayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._MoneyMovePayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "articleDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_articleDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "articlePublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_articlePublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "articleSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_articleSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "articleUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_articleUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cartDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cartPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cartSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cartUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cartUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clubBalanceDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_clubBalanceDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clubBalancePublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_clubBalancePublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clubBalanceSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_clubBalanceSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clubBalanceUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_clubBalanceUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByMonthDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByMonthDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByMonthPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByMonthPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByMonthSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByMonthSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByMonthUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByMonthUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTeamDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTeamDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTeamPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTeamPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTeamSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTeamSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTeamUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTeamUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTrainingDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTrainingDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTrainingPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTrainingPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTrainingSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTrainingSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coachPaymentByTrainingUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_coachPaymentByTrainingUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_creatorDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_creatorPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_creatorSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creatorUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_creatorUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kitDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_kitDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kitPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_kitPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kitSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_kitSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kitUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_kitUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "leadDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leadDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "leadPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leadPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "leadSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leadSave(ctx, field)
			})

		case "leadUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_leadUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "login":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_login(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyCostDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyCostDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyCostPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyCostPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyCostSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyCostSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyCostUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyCostUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyMoveDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyMoveDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyMovePublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyMovePublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyMoveSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyMoveSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moneyMoveUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moneyMoveUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_orderDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_orderPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_orderSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_orderUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "placeDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_placeDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "placePublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_placePublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "placeSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_placeSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "placeUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_placeUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refresh":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refresh(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "register":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_register(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByMonthDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByMonthDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByMonthPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByMonthPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByMonthSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByMonthSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByMonthUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByMonthUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByTrainingDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByTrainingDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByTrainingPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByTrainingPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByTrainingSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByTrainingSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rentPaymentByTrainingUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rentPaymentByTrainingUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stadiumDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_stadiumDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stadiumPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_stadiumPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stadiumSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_stadiumSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stadiumUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_stadiumUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_staffDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_staffPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_staffSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_staffUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentVisitDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentVisitDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentVisitPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentVisitPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentVisitSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentVisitSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentVisitUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studentVisitUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_taskDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_taskPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_taskSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_taskUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamBalanceDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamBalanceDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamBalancePublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamBalancePublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamBalanceSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamBalanceSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamBalanceUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamBalanceUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_teamUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingDayDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingDayDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingDayPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingDayPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingDaySave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingDaySave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingDayUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingDayUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trainingUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userDelete":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_userDelete(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userPublishUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_userPublishUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userSave":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_userSave(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userUpdate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_userUpdate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderImplementors = []string{"Order"}

func (ec *executionContext) _Order(ctx context.Context, sel ast.SelectionSet, obj *models.Order) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Order")
		case "cart":

			out.Values[i] = ec._Order_cart(ctx, field, obj)

		case "cartId":

			out.Values[i] = ec._Order_cartId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":

			out.Values[i] = ec._Order_creator(ctx, field, obj)

		case "creatorId":

			out.Values[i] = ec._Order_creatorId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileName":

			out.Values[i] = ec._Order_fileName(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Order_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderStatus":

			out.Values[i] = ec._Order_orderStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._Order_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderConnectionImplementors = []string{"OrderConnection"}

func (ec *executionContext) _OrderConnection(ctx context.Context, sel ast.SelectionSet, obj *models.OrderConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderConnection")
		case "edges":

			out.Values[i] = ec._OrderConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._OrderConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderEdgeImplementors = []string{"OrderEdge"}

func (ec *executionContext) _OrderEdge(ctx context.Context, sel ast.SelectionSet, obj *models.OrderEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderEdge")
		case "cursor":

			out.Values[i] = ec._OrderEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._OrderEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderPayloadImplementors = []string{"OrderPayload"}

func (ec *executionContext) _OrderPayload(ctx context.Context, sel ast.SelectionSet, obj *models.OrderPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderPayload")
		case "record":

			out.Values[i] = ec._OrderPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._OrderPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *models.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "endCursor":

			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

		case "startCursor":

			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var placeImplementors = []string{"Place"}

func (ec *executionContext) _Place(ctx context.Context, sel ast.SelectionSet, obj *models.Place) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, placeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Place")
		case "address":

			out.Values[i] = ec._Place_address(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Place_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._Place_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Place_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderNumber":

			out.Values[i] = ec._Place_orderNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._Place_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var placeConnectionImplementors = []string{"PlaceConnection"}

func (ec *executionContext) _PlaceConnection(ctx context.Context, sel ast.SelectionSet, obj *models.PlaceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, placeConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlaceConnection")
		case "edges":

			out.Values[i] = ec._PlaceConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._PlaceConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var placeDtoImplementors = []string{"PlaceDto"}

func (ec *executionContext) _PlaceDto(ctx context.Context, sel ast.SelectionSet, obj *models.PlaceDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, placeDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlaceDto")
		case "id":

			out.Values[i] = ec._PlaceDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._PlaceDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var placeEdgeImplementors = []string{"PlaceEdge"}

func (ec *executionContext) _PlaceEdge(ctx context.Context, sel ast.SelectionSet, obj *models.PlaceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, placeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlaceEdge")
		case "cursor":

			out.Values[i] = ec._PlaceEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._PlaceEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var placePayloadImplementors = []string{"PlacePayload"}

func (ec *executionContext) _PlacePayload(ctx context.Context, sel ast.SelectionSet, obj *models.PlacePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, placePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlacePayload")
		case "record":

			out.Values[i] = ec._PlacePayload_record(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordId":

			out.Values[i] = ec._PlacePayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "article":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_article(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "articles":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_articles(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "cart":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cart(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "cartAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cartAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "carts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_carts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "clubBalance":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clubBalance(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "clubBalances":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clubBalances(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "coachPaymentByMonth":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_coachPaymentByMonth(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "coachPaymentByTeam":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_coachPaymentByTeam(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "coachPaymentByTraining":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_coachPaymentByTraining(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "coachPaymentsByMonth":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_coachPaymentsByMonth(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "coachPaymentsByTeam":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_coachPaymentsByTeam(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "coachPaymentsByTraining":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_coachPaymentsByTraining(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "creator":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_creator(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "creatorAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_creatorAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "creators":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_creators(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "currentTasks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentTasks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "kit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_kit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "kitAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_kitAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "kits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_kits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "lead":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lead(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "leadAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_leadAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "leads":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_leads(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moneyCost":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moneyCost(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moneyCosts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moneyCosts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moneyMove":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moneyMove(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moneyMoves":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moneyMoves(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "nearestStaffBirthdays":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nearestStaffBirthdays(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "nearestStudentBirthdays":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nearestStudentBirthdays(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "order":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_order(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "orders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orders(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "place":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_place(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "placeAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_placeAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "places":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_places(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "rentPaymentByMonth":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rentPaymentByMonth(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "rentPaymentByTraining":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rentPaymentByTraining(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "rentPaymentsByMonth":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rentPaymentsByMonth(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "rentPaymentsByTraining":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rentPaymentsByTraining(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "stadium":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stadium(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "stadiumAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stadiumAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "stadiums":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stadiums(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "staff":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_staff(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "staffAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_staffAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "staffPerson":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_staffPerson(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "student":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_student(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "studentAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_studentAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "studentVisit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_studentVisit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "studentVisits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_studentVisits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "students":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_students(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "task":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_task(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "tasks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tasks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "team":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_team(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "teamAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_teamAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "teamBalance":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_teamBalance(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "teamBalances":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_teamBalances(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "teams":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_teams(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "timeTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_timeTable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "training":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_training(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "trainingAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trainingAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "trainingDay":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trainingDay(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "trainingDays":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trainingDays(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "trainings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trainings(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "trainingsByDay":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trainingsByDay(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "unPayedStudents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_unPayedStudents(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "userAll":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userAll(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "users":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByMonthImplementors = []string{"RentPaymentByMonth"}

func (ec *executionContext) _RentPaymentByMonth(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByMonthImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByMonth")
		case "description":

			out.Values[i] = ec._RentPaymentByMonth_description(ctx, field, obj)

		case "id":

			out.Values[i] = ec._RentPaymentByMonth_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "month":

			out.Values[i] = ec._RentPaymentByMonth_month(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentDate":

			out.Values[i] = ec._RentPaymentByMonth_paymentDate(ctx, field, obj)

		case "published":

			out.Values[i] = ec._RentPaymentByMonth_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stadium":

			out.Values[i] = ec._RentPaymentByMonth_stadium(ctx, field, obj)

		case "stadiumId":

			out.Values[i] = ec._RentPaymentByMonth_stadiumId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._RentPaymentByMonth_sum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByMonthConnectionImplementors = []string{"RentPaymentByMonthConnection"}

func (ec *executionContext) _RentPaymentByMonthConnection(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByMonthConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByMonthConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByMonthConnection")
		case "edges":

			out.Values[i] = ec._RentPaymentByMonthConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._RentPaymentByMonthConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByMonthEdgeImplementors = []string{"RentPaymentByMonthEdge"}

func (ec *executionContext) _RentPaymentByMonthEdge(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByMonthEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByMonthEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByMonthEdge")
		case "cursor":

			out.Values[i] = ec._RentPaymentByMonthEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._RentPaymentByMonthEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByMonthPayloadImplementors = []string{"RentPaymentByMonthPayload"}

func (ec *executionContext) _RentPaymentByMonthPayload(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByMonthPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByMonthPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByMonthPayload")
		case "record":

			out.Values[i] = ec._RentPaymentByMonthPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._RentPaymentByMonthPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByTrainingImplementors = []string{"RentPaymentByTraining"}

func (ec *executionContext) _RentPaymentByTraining(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByTraining) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByTrainingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByTraining")
		case "description":

			out.Values[i] = ec._RentPaymentByTraining_description(ctx, field, obj)

		case "id":

			out.Values[i] = ec._RentPaymentByTraining_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._RentPaymentByTraining_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stadium":

			out.Values[i] = ec._RentPaymentByTraining_stadium(ctx, field, obj)

		case "stadiumId":

			out.Values[i] = ec._RentPaymentByTraining_stadiumId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._RentPaymentByTraining_sum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainingIds":

			out.Values[i] = ec._RentPaymentByTraining_trainingIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trainings":

			out.Values[i] = ec._RentPaymentByTraining_trainings(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByTrainingConnectionImplementors = []string{"RentPaymentByTrainingConnection"}

func (ec *executionContext) _RentPaymentByTrainingConnection(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByTrainingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByTrainingConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByTrainingConnection")
		case "edges":

			out.Values[i] = ec._RentPaymentByTrainingConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._RentPaymentByTrainingConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByTrainingEdgeImplementors = []string{"RentPaymentByTrainingEdge"}

func (ec *executionContext) _RentPaymentByTrainingEdge(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByTrainingEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByTrainingEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByTrainingEdge")
		case "cursor":

			out.Values[i] = ec._RentPaymentByTrainingEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._RentPaymentByTrainingEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rentPaymentByTrainingPayloadImplementors = []string{"RentPaymentByTrainingPayload"}

func (ec *executionContext) _RentPaymentByTrainingPayload(ctx context.Context, sel ast.SelectionSet, obj *models.RentPaymentByTrainingPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentPaymentByTrainingPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentPaymentByTrainingPayload")
		case "record":

			out.Values[i] = ec._RentPaymentByTrainingPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._RentPaymentByTrainingPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stadiumImplementors = []string{"Stadium"}

func (ec *executionContext) _Stadium(ctx context.Context, sel ast.SelectionSet, obj *models.Stadium) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stadiumImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Stadium")
		case "id":

			out.Values[i] = ec._Stadium_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "latitude":

			out.Values[i] = ec._Stadium_latitude(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "longitude":

			out.Values[i] = ec._Stadium_longitude(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Stadium_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "place":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Stadium_place(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "placeId":

			out.Values[i] = ec._Stadium_placeId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._Stadium_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stadiumConnectionImplementors = []string{"StadiumConnection"}

func (ec *executionContext) _StadiumConnection(ctx context.Context, sel ast.SelectionSet, obj *models.StadiumConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stadiumConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StadiumConnection")
		case "edges":

			out.Values[i] = ec._StadiumConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._StadiumConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stadiumDtoImplementors = []string{"StadiumDto"}

func (ec *executionContext) _StadiumDto(ctx context.Context, sel ast.SelectionSet, obj *models.StadiumDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stadiumDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StadiumDto")
		case "id":

			out.Values[i] = ec._StadiumDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._StadiumDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stadiumEdgeImplementors = []string{"StadiumEdge"}

func (ec *executionContext) _StadiumEdge(ctx context.Context, sel ast.SelectionSet, obj *models.StadiumEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stadiumEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StadiumEdge")
		case "cursor":

			out.Values[i] = ec._StadiumEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._StadiumEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stadiumPayloadImplementors = []string{"StadiumPayload"}

func (ec *executionContext) _StadiumPayload(ctx context.Context, sel ast.SelectionSet, obj *models.StadiumPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stadiumPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StadiumPayload")
		case "record":

			out.Values[i] = ec._StadiumPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._StadiumPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffImplementors = []string{"Staff"}

func (ec *executionContext) _Staff(ctx context.Context, sel ast.SelectionSet, obj *models.Staff) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Staff")
		case "birthday":

			out.Values[i] = ec._Staff_birthday(ctx, field, obj)

		case "department":

			out.Values[i] = ec._Staff_department(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._Staff_description(ctx, field, obj)

		case "fileName":

			out.Values[i] = ec._Staff_fileName(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Staff_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Staff_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orderNumber":

			out.Values[i] = ec._Staff_orderNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "phoneNumber":

			out.Values[i] = ec._Staff_phoneNumber(ctx, field, obj)

		case "published":

			out.Values[i] = ec._Staff_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Staff_user(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "userId":

			out.Values[i] = ec._Staff_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "work":

			out.Values[i] = ec._Staff_work(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffConnectionImplementors = []string{"StaffConnection"}

func (ec *executionContext) _StaffConnection(ctx context.Context, sel ast.SelectionSet, obj *models.StaffConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffConnection")
		case "edges":

			out.Values[i] = ec._StaffConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._StaffConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffDtoImplementors = []string{"StaffDto"}

func (ec *executionContext) _StaffDto(ctx context.Context, sel ast.SelectionSet, obj *models.StaffDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffDto")
		case "id":

			out.Values[i] = ec._StaffDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._StaffDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffEdgeImplementors = []string{"StaffEdge"}

func (ec *executionContext) _StaffEdge(ctx context.Context, sel ast.SelectionSet, obj *models.StaffEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffEdge")
		case "cursor":

			out.Values[i] = ec._StaffEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._StaffEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffPayloadImplementors = []string{"StaffPayload"}

func (ec *executionContext) _StaffPayload(ctx context.Context, sel ast.SelectionSet, obj *models.StaffPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffPayload")
		case "record":

			out.Values[i] = ec._StaffPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._StaffPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentImplementors = []string{"Student"}

func (ec *executionContext) _Student(ctx context.Context, sel ast.SelectionSet, obj *models.Student) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Student")
		case "birthday":

			out.Values[i] = ec._Student_birthday(ctx, field, obj)

		case "creatorIds":

			out.Values[i] = ec._Student_creatorIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "creators":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Student_creators(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "id":

			out.Values[i] = ec._Student_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Student_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "passportNum":

			out.Values[i] = ec._Student_passportNum(ctx, field, obj)

		case "paymentSum":

			out.Values[i] = ec._Student_paymentSum(ctx, field, obj)

		case "published":

			out.Values[i] = ec._Student_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "teamIds":

			out.Values[i] = ec._Student_teamIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "teams":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Student_teams(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentConnectionImplementors = []string{"StudentConnection"}

func (ec *executionContext) _StudentConnection(ctx context.Context, sel ast.SelectionSet, obj *models.StudentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentConnection")
		case "edges":

			out.Values[i] = ec._StudentConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._StudentConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentDtoImplementors = []string{"StudentDto"}

func (ec *executionContext) _StudentDto(ctx context.Context, sel ast.SelectionSet, obj *models.StudentDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentDto")
		case "id":

			out.Values[i] = ec._StudentDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._StudentDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentEdgeImplementors = []string{"StudentEdge"}

func (ec *executionContext) _StudentEdge(ctx context.Context, sel ast.SelectionSet, obj *models.StudentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentEdge")
		case "cursor":

			out.Values[i] = ec._StudentEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._StudentEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentPayloadImplementors = []string{"StudentPayload"}

func (ec *executionContext) _StudentPayload(ctx context.Context, sel ast.SelectionSet, obj *models.StudentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentPayload")
		case "record":

			out.Values[i] = ec._StudentPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._StudentPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentVisitImplementors = []string{"StudentVisit"}

func (ec *executionContext) _StudentVisit(ctx context.Context, sel ast.SelectionSet, obj *models.StudentVisit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentVisitImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentVisit")
		case "id":

			out.Values[i] = ec._StudentVisit_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "payed":

			out.Values[i] = ec._StudentVisit_payed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._StudentVisit_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "student":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentVisit_student(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "studentId":

			out.Values[i] = ec._StudentVisit_studentId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "training":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentVisit_training(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "trainingId":

			out.Values[i] = ec._StudentVisit_trainingId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "visitStatus":

			out.Values[i] = ec._StudentVisit_visitStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentVisitConnectionImplementors = []string{"StudentVisitConnection"}

func (ec *executionContext) _StudentVisitConnection(ctx context.Context, sel ast.SelectionSet, obj *models.StudentVisitConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentVisitConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentVisitConnection")
		case "edges":

			out.Values[i] = ec._StudentVisitConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._StudentVisitConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentVisitEdgeImplementors = []string{"StudentVisitEdge"}

func (ec *executionContext) _StudentVisitEdge(ctx context.Context, sel ast.SelectionSet, obj *models.StudentVisitEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentVisitEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentVisitEdge")
		case "cursor":

			out.Values[i] = ec._StudentVisitEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._StudentVisitEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studentVisitPayloadImplementors = []string{"StudentVisitPayload"}

func (ec *executionContext) _StudentVisitPayload(ctx context.Context, sel ast.SelectionSet, obj *models.StudentVisitPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentVisitPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentVisitPayload")
		case "record":

			out.Values[i] = ec._StudentVisitPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._StudentVisitPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskImplementors = []string{"Task"}

func (ec *executionContext) _Task(ctx context.Context, sel ast.SelectionSet, obj *models.Task) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Task")
		case "author":

			out.Values[i] = ec._Task_author(ctx, field, obj)

		case "authorId":

			out.Values[i] = ec._Task_authorId(ctx, field, obj)

		case "description":

			out.Values[i] = ec._Task_description(ctx, field, obj)

		case "endTime":

			out.Values[i] = ec._Task_endTime(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Task_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "leadIds":

			out.Values[i] = ec._Task_leadIds(ctx, field, obj)

		case "leads":

			out.Values[i] = ec._Task_leads(ctx, field, obj)

		case "priority":

			out.Values[i] = ec._Task_priority(ctx, field, obj)

		case "published":

			out.Values[i] = ec._Task_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "result":

			out.Values[i] = ec._Task_result(ctx, field, obj)

		case "startTime":

			out.Values[i] = ec._Task_startTime(ctx, field, obj)

		case "studentIds":

			out.Values[i] = ec._Task_studentIds(ctx, field, obj)

		case "students":

			out.Values[i] = ec._Task_students(ctx, field, obj)

		case "taskStatus":

			out.Values[i] = ec._Task_taskStatus(ctx, field, obj)

		case "title":

			out.Values[i] = ec._Task_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workerIds":

			out.Values[i] = ec._Task_workerIds(ctx, field, obj)

		case "workers":

			out.Values[i] = ec._Task_workers(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskConnectionImplementors = []string{"TaskConnection"}

func (ec *executionContext) _TaskConnection(ctx context.Context, sel ast.SelectionSet, obj *models.TaskConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskConnection")
		case "edges":

			out.Values[i] = ec._TaskConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._TaskConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskEdgeImplementors = []string{"TaskEdge"}

func (ec *executionContext) _TaskEdge(ctx context.Context, sel ast.SelectionSet, obj *models.TaskEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskEdge")
		case "cursor":

			out.Values[i] = ec._TaskEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TaskEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskPayloadImplementors = []string{"TaskPayload"}

func (ec *executionContext) _TaskPayload(ctx context.Context, sel ast.SelectionSet, obj *models.TaskPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskPayload")
		case "record":

			out.Values[i] = ec._TaskPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._TaskPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamImplementors = []string{"Team"}

func (ec *executionContext) _Team(ctx context.Context, sel ast.SelectionSet, obj *models.Team) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Team")
		case "ages":

			out.Values[i] = ec._Team_ages(ctx, field, obj)

		case "coachIds":

			out.Values[i] = ec._Team_coachIds(ctx, field, obj)

		case "coaches":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Team_coaches(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "headCoach":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Team_headCoach(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "headCoachId":

			out.Values[i] = ec._Team_headCoachId(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Team_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Team_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "place":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Team_place(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "placeId":

			out.Values[i] = ec._Team_placeId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._Team_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "writable":

			out.Values[i] = ec._Team_writable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamBalanceImplementors = []string{"TeamBalance"}

func (ec *executionContext) _TeamBalance(ctx context.Context, sel ast.SelectionSet, obj *models.TeamBalance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamBalanceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamBalance")
		case "date":

			out.Values[i] = ec._TeamBalance_date(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._TeamBalance_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._TeamBalance_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rent":

			out.Values[i] = ec._TeamBalance_rent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salary":

			out.Values[i] = ec._TeamBalance_salary(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sum":

			out.Values[i] = ec._TeamBalance_sum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "team":

			out.Values[i] = ec._TeamBalance_team(ctx, field, obj)

		case "teamId":

			out.Values[i] = ec._TeamBalance_teamId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tickets":

			out.Values[i] = ec._TeamBalance_tickets(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamBalanceConnectionImplementors = []string{"TeamBalanceConnection"}

func (ec *executionContext) _TeamBalanceConnection(ctx context.Context, sel ast.SelectionSet, obj *models.TeamBalanceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamBalanceConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamBalanceConnection")
		case "edges":

			out.Values[i] = ec._TeamBalanceConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._TeamBalanceConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamBalanceEdgeImplementors = []string{"TeamBalanceEdge"}

func (ec *executionContext) _TeamBalanceEdge(ctx context.Context, sel ast.SelectionSet, obj *models.TeamBalanceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamBalanceEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamBalanceEdge")
		case "cursor":

			out.Values[i] = ec._TeamBalanceEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TeamBalanceEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamBalancePayloadImplementors = []string{"TeamBalancePayload"}

func (ec *executionContext) _TeamBalancePayload(ctx context.Context, sel ast.SelectionSet, obj *models.TeamBalancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamBalancePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamBalancePayload")
		case "record":

			out.Values[i] = ec._TeamBalancePayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._TeamBalancePayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamConnectionImplementors = []string{"TeamConnection"}

func (ec *executionContext) _TeamConnection(ctx context.Context, sel ast.SelectionSet, obj *models.TeamConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamConnection")
		case "edges":

			out.Values[i] = ec._TeamConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._TeamConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamDtoImplementors = []string{"TeamDto"}

func (ec *executionContext) _TeamDto(ctx context.Context, sel ast.SelectionSet, obj *models.TeamDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamDto")
		case "id":

			out.Values[i] = ec._TeamDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._TeamDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamEdgeImplementors = []string{"TeamEdge"}

func (ec *executionContext) _TeamEdge(ctx context.Context, sel ast.SelectionSet, obj *models.TeamEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamEdge")
		case "cursor":

			out.Values[i] = ec._TeamEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TeamEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamPayloadImplementors = []string{"TeamPayload"}

func (ec *executionContext) _TeamPayload(ctx context.Context, sel ast.SelectionSet, obj *models.TeamPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamPayload")
		case "record":

			out.Values[i] = ec._TeamPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._TeamPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tokenImplementors = []string{"Token"}

func (ec *executionContext) _Token(ctx context.Context, sel ast.SelectionSet, obj *models.Token) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tokenImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Token")
		case "accessToken":

			out.Values[i] = ec._Token_accessToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiration":

			out.Values[i] = ec._Token_expiration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":

			out.Values[i] = ec._Token_refreshToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingImplementors = []string{"Training"}

func (ec *executionContext) _Training(ctx context.Context, sel ast.SelectionSet, obj *models.Training) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Training")
		case "coachIds":

			out.Values[i] = ec._Training_coachIds(ctx, field, obj)

		case "coaches":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Training_coaches(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "headCoach":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Training_headCoach(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "headCoachId":

			out.Values[i] = ec._Training_headCoachId(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Training_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "published":

			out.Values[i] = ec._Training_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "stadium":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Training_stadium(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "stadiumId":

			out.Values[i] = ec._Training_stadiumId(ctx, field, obj)

		case "team":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Training_team(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "teamId":

			out.Values[i] = ec._Training_teamId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "time":

			out.Values[i] = ec._Training_time(ctx, field, obj)

		case "visits":

			out.Values[i] = ec._Training_visits(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingConnectionImplementors = []string{"TrainingConnection"}

func (ec *executionContext) _TrainingConnection(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingConnection")
		case "edges":

			out.Values[i] = ec._TrainingConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._TrainingConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingDayImplementors = []string{"TrainingDay"}

func (ec *executionContext) _TrainingDay(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingDay) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingDayImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingDay")
		case "day":

			out.Values[i] = ec._TrainingDay_day(ctx, field, obj)

		case "id":

			out.Values[i] = ec._TrainingDay_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "published":

			out.Values[i] = ec._TrainingDay_published(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stadium":

			out.Values[i] = ec._TrainingDay_stadium(ctx, field, obj)

		case "stadiumId":

			out.Values[i] = ec._TrainingDay_stadiumId(ctx, field, obj)

		case "team":

			out.Values[i] = ec._TrainingDay_team(ctx, field, obj)

		case "teamId":

			out.Values[i] = ec._TrainingDay_teamId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "time":

			out.Values[i] = ec._TrainingDay_time(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingDayConnectionImplementors = []string{"TrainingDayConnection"}

func (ec *executionContext) _TrainingDayConnection(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingDayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingDayConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingDayConnection")
		case "edges":

			out.Values[i] = ec._TrainingDayConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._TrainingDayConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingDayEdgeImplementors = []string{"TrainingDayEdge"}

func (ec *executionContext) _TrainingDayEdge(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingDayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingDayEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingDayEdge")
		case "cursor":

			out.Values[i] = ec._TrainingDayEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TrainingDayEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingDayPayloadImplementors = []string{"TrainingDayPayload"}

func (ec *executionContext) _TrainingDayPayload(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingDayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingDayPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingDayPayload")
		case "record":

			out.Values[i] = ec._TrainingDayPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._TrainingDayPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingDtoImplementors = []string{"TrainingDto"}

func (ec *executionContext) _TrainingDto(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingDto")
		case "id":

			out.Values[i] = ec._TrainingDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._TrainingDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingEdgeImplementors = []string{"TrainingEdge"}

func (ec *executionContext) _TrainingEdge(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingEdge")
		case "cursor":

			out.Values[i] = ec._TrainingEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._TrainingEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trainingPayloadImplementors = []string{"TrainingPayload"}

func (ec *executionContext) _TrainingPayload(ctx context.Context, sel ast.SelectionSet, obj *models.TrainingPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trainingPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrainingPayload")
		case "record":

			out.Values[i] = ec._TrainingPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._TrainingPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "firstName":

			out.Values[i] = ec._User_firstName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":

			out.Values[i] = ec._User_lastName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":

			out.Values[i] = ec._User_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roles":

			out.Values[i] = ec._User_roles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userConnectionImplementors = []string{"UserConnection"}

func (ec *executionContext) _UserConnection(ctx context.Context, sel ast.SelectionSet, obj *models.UserConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserConnection")
		case "edges":

			out.Values[i] = ec._UserConnection_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._UserConnection_pageInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userDtoImplementors = []string{"UserDto"}

func (ec *executionContext) _UserDto(ctx context.Context, sel ast.SelectionSet, obj *models.UserDto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDtoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDto")
		case "id":

			out.Values[i] = ec._UserDto_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._UserDto_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEdgeImplementors = []string{"UserEdge"}

func (ec *executionContext) _UserEdge(ctx context.Context, sel ast.SelectionSet, obj *models.UserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEdge")
		case "cursor":

			out.Values[i] = ec._UserEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":

			out.Values[i] = ec._UserEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userPayloadImplementors = []string{"UserPayload"}

func (ec *executionContext) _UserPayload(ctx context.Context, sel ast.SelectionSet, obj *models.UserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPayload")
		case "record":

			out.Values[i] = ec._UserPayload_record(ctx, field, obj)

		case "recordId":

			out.Values[i] = ec._UserPayload_recordId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAge2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAge(ctx context.Context, v interface{}) (models.Age, error) {
	var res models.Age
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAge2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAge(ctx context.Context, sel ast.SelectionSet, v models.Age) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNArticleEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ArticleEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArticleEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArticleEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleEdge(ctx context.Context, sel ast.SelectionSet, v *models.ArticleEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticleEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNArticleInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleInput(ctx context.Context, v interface{}) (models.ArticleInput, error) {
	res, err := ec.unmarshalInputArticleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNArticleInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleInput(ctx context.Context, v interface{}) (*models.ArticleInput, error) {
	res, err := ec.unmarshalInputArticleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNArticleInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleInputWithID(ctx context.Context, v interface{}) (models.ArticleInputWithID, error) {
	res, err := ec.unmarshalInputArticleInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNArticlePayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticlePayload(ctx context.Context, sel ast.SelectionSet, v models.ArticlePayload) graphql.Marshaler {
	return ec._ArticlePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNArticlePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticlePayload(ctx context.Context, sel ast.SelectionSet, v *models.ArticlePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArticlePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthResponse2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAuthResponse(ctx context.Context, sel ast.SelectionSet, v models.AuthResponse) graphql.Marshaler {
	return ec._AuthResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthResponse2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAuthResponse(ctx context.Context, sel ast.SelectionSet, v *models.AuthResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthToken2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAuthToken(ctx context.Context, sel ast.SelectionSet, v *models.AuthToken) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthToken(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCartDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartDto(ctx context.Context, sel ast.SelectionSet, v *models.CartDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartDto(ctx, sel, v)
}

func (ec *executionContext) marshalNCartEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CartEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCartEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartEdge(ctx context.Context, sel ast.SelectionSet, v *models.CartEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCartInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartInput(ctx context.Context, v interface{}) (models.CartInput, error) {
	res, err := ec.unmarshalInputCartInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCartInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartInput(ctx context.Context, v interface{}) (*models.CartInput, error) {
	res, err := ec.unmarshalInputCartInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCartInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartInputWithID(ctx context.Context, v interface{}) (models.CartInputWithID, error) {
	res, err := ec.unmarshalInputCartInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCartPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartPayload(ctx context.Context, sel ast.SelectionSet, v models.CartPayload) graphql.Marshaler {
	return ec._CartPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCartPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartPayload(ctx context.Context, sel ast.SelectionSet, v *models.CartPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CartPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNClubBalanceEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ClubBalanceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClubBalanceEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClubBalanceEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceEdge(ctx context.Context, sel ast.SelectionSet, v *models.ClubBalanceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubBalanceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClubBalanceInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceInput(ctx context.Context, v interface{}) (models.ClubBalanceInput, error) {
	res, err := ec.unmarshalInputClubBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNClubBalanceInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceInput(ctx context.Context, v interface{}) (*models.ClubBalanceInput, error) {
	res, err := ec.unmarshalInputClubBalanceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNClubBalanceInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceInputWithID(ctx context.Context, v interface{}) (models.ClubBalanceInputWithID, error) {
	res, err := ec.unmarshalInputClubBalanceInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClubBalancePayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalancePayload(ctx context.Context, sel ast.SelectionSet, v models.ClubBalancePayload) graphql.Marshaler {
	return ec._ClubBalancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNClubBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalancePayload(ctx context.Context, sel ast.SelectionSet, v *models.ClubBalancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClubBalancePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCoachPaymentByMonthEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CoachPaymentByMonthEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCoachPaymentByMonthEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCoachPaymentByMonthEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthEdge(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByMonthEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CoachPaymentByMonthEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCoachPaymentByMonthInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthInput(ctx context.Context, v interface{}) (models.CoachPaymentByMonthInput, error) {
	res, err := ec.unmarshalInputCoachPaymentByMonthInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCoachPaymentByMonthInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthInput(ctx context.Context, v interface{}) (*models.CoachPaymentByMonthInput, error) {
	res, err := ec.unmarshalInputCoachPaymentByMonthInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCoachPaymentByMonthInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthInputWithID(ctx context.Context, v interface{}) (models.CoachPaymentByMonthInputWithID, error) {
	res, err := ec.unmarshalInputCoachPaymentByMonthInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCoachPaymentByMonthPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthPayload(ctx context.Context, sel ast.SelectionSet, v models.CoachPaymentByMonthPayload) graphql.Marshaler {
	return ec._CoachPaymentByMonthPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCoachPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthPayload(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByMonthPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CoachPaymentByMonthPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCoachPaymentByTeamEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CoachPaymentByTeamEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCoachPaymentByTeamEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCoachPaymentByTeamEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamEdge(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTeamEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CoachPaymentByTeamEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCoachPaymentByTeamInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamInput(ctx context.Context, v interface{}) (models.CoachPaymentByTeamInput, error) {
	res, err := ec.unmarshalInputCoachPaymentByTeamInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCoachPaymentByTeamInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamInput(ctx context.Context, v interface{}) (*models.CoachPaymentByTeamInput, error) {
	res, err := ec.unmarshalInputCoachPaymentByTeamInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCoachPaymentByTeamInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamInputWithID(ctx context.Context, v interface{}) (models.CoachPaymentByTeamInputWithID, error) {
	res, err := ec.unmarshalInputCoachPaymentByTeamInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCoachPaymentByTeamPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamPayload(ctx context.Context, sel ast.SelectionSet, v models.CoachPaymentByTeamPayload) graphql.Marshaler {
	return ec._CoachPaymentByTeamPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCoachPaymentByTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamPayload(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTeamPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CoachPaymentByTeamPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCoachPaymentByTrainingEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CoachPaymentByTrainingEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCoachPaymentByTrainingEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCoachPaymentByTrainingEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingEdge(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTrainingEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CoachPaymentByTrainingEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCoachPaymentByTrainingInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingInput(ctx context.Context, v interface{}) (models.CoachPaymentByTrainingInput, error) {
	res, err := ec.unmarshalInputCoachPaymentByTrainingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCoachPaymentByTrainingInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingInput(ctx context.Context, v interface{}) (*models.CoachPaymentByTrainingInput, error) {
	res, err := ec.unmarshalInputCoachPaymentByTrainingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCoachPaymentByTrainingInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingInputWithID(ctx context.Context, v interface{}) (models.CoachPaymentByTrainingInputWithID, error) {
	res, err := ec.unmarshalInputCoachPaymentByTrainingInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCoachPaymentByTrainingPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingPayload(ctx context.Context, sel ast.SelectionSet, v models.CoachPaymentByTrainingPayload) graphql.Marshaler {
	return ec._CoachPaymentByTrainingPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCoachPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingPayload(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTrainingPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CoachPaymentByTrainingPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCoachPaymentRule2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentRule(ctx context.Context, v interface{}) (models.CoachPaymentRule, error) {
	var res models.CoachPaymentRule
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCoachPaymentRule2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentRule(ctx context.Context, sel ast.SelectionSet, v models.CoachPaymentRule) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCreator2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreator(ctx context.Context, sel ast.SelectionSet, v *models.Creator) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Creator(ctx, sel, v)
}

func (ec *executionContext) marshalNCreatorDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorDto(ctx context.Context, sel ast.SelectionSet, v *models.CreatorDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatorDto(ctx, sel, v)
}

func (ec *executionContext) marshalNCreatorEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CreatorEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCreatorEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCreatorEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorEdge(ctx context.Context, sel ast.SelectionSet, v *models.CreatorEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatorEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreatorInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorInput(ctx context.Context, v interface{}) (models.CreatorInput, error) {
	res, err := ec.unmarshalInputCreatorInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatorInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorInput(ctx context.Context, v interface{}) (*models.CreatorInput, error) {
	res, err := ec.unmarshalInputCreatorInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatorInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorInputWithID(ctx context.Context, v interface{}) (models.CreatorInputWithID, error) {
	res, err := ec.unmarshalInputCreatorInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreatorPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorPayload(ctx context.Context, sel ast.SelectionSet, v models.CreatorPayload) graphql.Marshaler {
	return ec._CreatorPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreatorPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorPayload(ctx context.Context, sel ast.SelectionSet, v *models.CreatorPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatorPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDepartment2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDepartment(ctx context.Context, v interface{}) (models.Department, error) {
	var res models.Department
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDepartment2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v models.Department) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNKitDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitDto(ctx context.Context, sel ast.SelectionSet, v *models.KitDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._KitDto(ctx, sel, v)
}

func (ec *executionContext) marshalNKitEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.KitEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKitEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNKitEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitEdge(ctx context.Context, sel ast.SelectionSet, v *models.KitEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._KitEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNKitInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitInput(ctx context.Context, v interface{}) (models.KitInput, error) {
	res, err := ec.unmarshalInputKitInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNKitInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitInput(ctx context.Context, v interface{}) (*models.KitInput, error) {
	res, err := ec.unmarshalInputKitInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNKitInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitInputWithID(ctx context.Context, v interface{}) (models.KitInputWithID, error) {
	res, err := ec.unmarshalInputKitInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNKitPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitPayload(ctx context.Context, sel ast.SelectionSet, v models.KitPayload) graphql.Marshaler {
	return ec._KitPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNKitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitPayload(ctx context.Context, sel ast.SelectionSet, v *models.KitPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._KitPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLead2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLead(ctx context.Context, sel ast.SelectionSet, v *models.Lead) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Lead(ctx, sel, v)
}

func (ec *executionContext) marshalNLeadDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadDto(ctx context.Context, sel ast.SelectionSet, v *models.LeadDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LeadDto(ctx, sel, v)
}

func (ec *executionContext) marshalNLeadEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.LeadEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLeadEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLeadEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadEdge(ctx context.Context, sel ast.SelectionSet, v *models.LeadEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LeadEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLeadInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadInput(ctx context.Context, v interface{}) (models.LeadInput, error) {
	res, err := ec.unmarshalInputLeadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLeadInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadInput(ctx context.Context, v interface{}) (*models.LeadInput, error) {
	res, err := ec.unmarshalInputLeadInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLeadInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadInputWithID(ctx context.Context, v interface{}) (models.LeadInputWithID, error) {
	res, err := ec.unmarshalInputLeadInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLeadPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadPayload(ctx context.Context, sel ast.SelectionSet, v models.LeadPayload) graphql.Marshaler {
	return ec._LeadPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLeadPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadPayload(ctx context.Context, sel ast.SelectionSet, v *models.LeadPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LeadPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLoginInput(ctx context.Context, v interface{}) (models.LoginInput, error) {
	res, err := ec.unmarshalInputLoginInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMoneyCostEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.MoneyCostEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMoneyCostEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMoneyCostEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostEdge(ctx context.Context, sel ast.SelectionSet, v *models.MoneyCostEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MoneyCostEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMoneyCostInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostInput(ctx context.Context, v interface{}) (models.MoneyCostInput, error) {
	res, err := ec.unmarshalInputMoneyCostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMoneyCostInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostInput(ctx context.Context, v interface{}) (*models.MoneyCostInput, error) {
	res, err := ec.unmarshalInputMoneyCostInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMoneyCostInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostInputWithID(ctx context.Context, v interface{}) (models.MoneyCostInputWithID, error) {
	res, err := ec.unmarshalInputMoneyCostInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMoneyCostPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostPayload(ctx context.Context, sel ast.SelectionSet, v models.MoneyCostPayload) graphql.Marshaler {
	return ec._MoneyCostPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMoneyCostPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostPayload(ctx context.Context, sel ast.SelectionSet, v *models.MoneyCostPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MoneyCostPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMoneyForm2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx context.Context, v interface{}) (models.MoneyForm, error) {
	var res models.MoneyForm
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMoneyForm2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx context.Context, sel ast.SelectionSet, v models.MoneyForm) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMoneyMoveEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.MoneyMoveEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMoneyMoveEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMoneyMoveEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveEdge(ctx context.Context, sel ast.SelectionSet, v *models.MoneyMoveEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MoneyMoveEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMoneyMoveInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveInput(ctx context.Context, v interface{}) (models.MoneyMoveInput, error) {
	res, err := ec.unmarshalInputMoneyMoveInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMoneyMoveInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveInput(ctx context.Context, v interface{}) (*models.MoneyMoveInput, error) {
	res, err := ec.unmarshalInputMoneyMoveInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMoneyMoveInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveInputWithID(ctx context.Context, v interface{}) (models.MoneyMoveInputWithID, error) {
	res, err := ec.unmarshalInputMoneyMoveInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMoneyMovePayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMovePayload(ctx context.Context, sel ast.SelectionSet, v models.MoneyMovePayload) graphql.Marshaler {
	return ec._MoneyMovePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNMoneyMovePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMovePayload(ctx context.Context, sel ast.SelectionSet, v *models.MoneyMovePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MoneyMovePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OrderEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrderEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderEdge(ctx context.Context, sel ast.SelectionSet, v *models.OrderEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrderEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrderInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderInput(ctx context.Context, v interface{}) (models.OrderInput, error) {
	res, err := ec.unmarshalInputOrderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrderInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderInput(ctx context.Context, v interface{}) (*models.OrderInput, error) {
	res, err := ec.unmarshalInputOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrderInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderInputWithID(ctx context.Context, v interface{}) (models.OrderInputWithID, error) {
	res, err := ec.unmarshalInputOrderInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderPayload(ctx context.Context, sel ast.SelectionSet, v models.OrderPayload) graphql.Marshaler {
	return ec._OrderPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrderPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderPayload(ctx context.Context, sel ast.SelectionSet, v *models.OrderPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrderPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrderStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderStatus(ctx context.Context, v interface{}) (models.OrderStatus, error) {
	var res models.OrderStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderStatus(ctx context.Context, sel ast.SelectionSet, v models.OrderStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *models.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPlace2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlace(ctx context.Context, sel ast.SelectionSet, v *models.Place) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Place(ctx, sel, v)
}

func (ec *executionContext) marshalNPlaceConnection2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceConnection(ctx context.Context, sel ast.SelectionSet, v models.PlaceConnection) graphql.Marshaler {
	return ec._PlaceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlaceConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceConnection(ctx context.Context, sel ast.SelectionSet, v *models.PlaceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlaceConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNPlaceDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceDto(ctx context.Context, sel ast.SelectionSet, v *models.PlaceDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlaceDto(ctx, sel, v)
}

func (ec *executionContext) marshalNPlaceEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlaceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlaceEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlaceEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceEdge(ctx context.Context, sel ast.SelectionSet, v *models.PlaceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlaceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlaceInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceInput(ctx context.Context, v interface{}) (models.PlaceInput, error) {
	res, err := ec.unmarshalInputPlaceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPlaceInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceInput(ctx context.Context, v interface{}) (*models.PlaceInput, error) {
	res, err := ec.unmarshalInputPlaceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPlaceInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceInputWithID(ctx context.Context, v interface{}) (models.PlaceInputWithID, error) {
	res, err := ec.unmarshalInputPlaceInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlacePayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlacePayload(ctx context.Context, sel ast.SelectionSet, v models.PlacePayload) graphql.Marshaler {
	return ec._PlacePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlacePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlacePayload(ctx context.Context, sel ast.SelectionSet, v *models.PlacePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlacePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegisterInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRegisterInput(ctx context.Context, v interface{}) (models.RegisterInput, error) {
	res, err := ec.unmarshalInputRegisterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRentPaymentByMonthEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.RentPaymentByMonthEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRentPaymentByMonthEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRentPaymentByMonthEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthEdge(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByMonthEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RentPaymentByMonthEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRentPaymentByMonthInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthInput(ctx context.Context, v interface{}) (models.RentPaymentByMonthInput, error) {
	res, err := ec.unmarshalInputRentPaymentByMonthInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRentPaymentByMonthInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthInput(ctx context.Context, v interface{}) (*models.RentPaymentByMonthInput, error) {
	res, err := ec.unmarshalInputRentPaymentByMonthInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRentPaymentByMonthInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthInputWithID(ctx context.Context, v interface{}) (models.RentPaymentByMonthInputWithID, error) {
	res, err := ec.unmarshalInputRentPaymentByMonthInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRentPaymentByMonthPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthPayload(ctx context.Context, sel ast.SelectionSet, v models.RentPaymentByMonthPayload) graphql.Marshaler {
	return ec._RentPaymentByMonthPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRentPaymentByMonthPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthPayload(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByMonthPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RentPaymentByMonthPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRentPaymentByTrainingEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.RentPaymentByTrainingEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRentPaymentByTrainingEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRentPaymentByTrainingEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingEdge(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByTrainingEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RentPaymentByTrainingEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRentPaymentByTrainingInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingInput(ctx context.Context, v interface{}) (models.RentPaymentByTrainingInput, error) {
	res, err := ec.unmarshalInputRentPaymentByTrainingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRentPaymentByTrainingInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingInput(ctx context.Context, v interface{}) (*models.RentPaymentByTrainingInput, error) {
	res, err := ec.unmarshalInputRentPaymentByTrainingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRentPaymentByTrainingInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingInputWithID(ctx context.Context, v interface{}) (models.RentPaymentByTrainingInputWithID, error) {
	res, err := ec.unmarshalInputRentPaymentByTrainingInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRentPaymentByTrainingPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingPayload(ctx context.Context, sel ast.SelectionSet, v models.RentPaymentByTrainingPayload) graphql.Marshaler {
	return ec._RentPaymentByTrainingPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRentPaymentByTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingPayload(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByTrainingPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RentPaymentByTrainingPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRole2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) (models.Role, error) {
	var res models.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v models.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRole2ᚕgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRoleᚄ(ctx context.Context, v interface{}) ([]models.Role, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.Role, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRole2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRole2ᚕgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStadiumDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumDto(ctx context.Context, sel ast.SelectionSet, v *models.StadiumDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StadiumDto(ctx, sel, v)
}

func (ec *executionContext) marshalNStadiumEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StadiumEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStadiumEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStadiumEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumEdge(ctx context.Context, sel ast.SelectionSet, v *models.StadiumEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StadiumEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStadiumInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumInput(ctx context.Context, v interface{}) (models.StadiumInput, error) {
	res, err := ec.unmarshalInputStadiumInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStadiumInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumInput(ctx context.Context, v interface{}) (*models.StadiumInput, error) {
	res, err := ec.unmarshalInputStadiumInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStadiumInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumInputWithID(ctx context.Context, v interface{}) (models.StadiumInputWithID, error) {
	res, err := ec.unmarshalInputStadiumInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStadiumPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumPayload(ctx context.Context, sel ast.SelectionSet, v models.StadiumPayload) graphql.Marshaler {
	return ec._StadiumPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNStadiumPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumPayload(ctx context.Context, sel ast.SelectionSet, v *models.StadiumPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StadiumPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx context.Context, sel ast.SelectionSet, v *models.Staff) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Staff(ctx, sel, v)
}

func (ec *executionContext) marshalNStaffDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffDto(ctx context.Context, sel ast.SelectionSet, v *models.StaffDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StaffDto(ctx, sel, v)
}

func (ec *executionContext) marshalNStaffEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StaffEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStaffEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStaffEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffEdge(ctx context.Context, sel ast.SelectionSet, v *models.StaffEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StaffEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStaffInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffInput(ctx context.Context, v interface{}) (models.StaffInput, error) {
	res, err := ec.unmarshalInputStaffInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStaffInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffInput(ctx context.Context, v interface{}) (*models.StaffInput, error) {
	res, err := ec.unmarshalInputStaffInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStaffInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffInputWithID(ctx context.Context, v interface{}) (models.StaffInputWithID, error) {
	res, err := ec.unmarshalInputStaffInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStaffPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffPayload(ctx context.Context, sel ast.SelectionSet, v models.StaffPayload) graphql.Marshaler {
	return ec._StaffPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffPayload(ctx context.Context, sel ast.SelectionSet, v *models.StaffPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StaffPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx context.Context, sel ast.SelectionSet, v *models.Student) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Student(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentDto(ctx context.Context, sel ast.SelectionSet, v *models.StudentDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentDto(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StudentEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudentEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStudentEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentEdge(ctx context.Context, sel ast.SelectionSet, v *models.StudentEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStudentInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentInput(ctx context.Context, v interface{}) (models.StudentInput, error) {
	res, err := ec.unmarshalInputStudentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStudentInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentInput(ctx context.Context, v interface{}) (*models.StudentInput, error) {
	res, err := ec.unmarshalInputStudentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStudentInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentInputWithID(ctx context.Context, v interface{}) (models.StudentInputWithID, error) {
	res, err := ec.unmarshalInputStudentInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStudentPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentPayload(ctx context.Context, sel ast.SelectionSet, v models.StudentPayload) graphql.Marshaler {
	return ec._StudentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNStudentPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentPayload(ctx context.Context, sel ast.SelectionSet, v *models.StudentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentVisitEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StudentVisitEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudentVisitEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStudentVisitEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitEdge(ctx context.Context, sel ast.SelectionSet, v *models.StudentVisitEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentVisitEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStudentVisitInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitInput(ctx context.Context, v interface{}) (models.StudentVisitInput, error) {
	res, err := ec.unmarshalInputStudentVisitInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStudentVisitInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitInput(ctx context.Context, v interface{}) (*models.StudentVisitInput, error) {
	res, err := ec.unmarshalInputStudentVisitInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStudentVisitInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitInputWithID(ctx context.Context, v interface{}) (models.StudentVisitInputWithID, error) {
	res, err := ec.unmarshalInputStudentVisitInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStudentVisitPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitPayload(ctx context.Context, sel ast.SelectionSet, v models.StudentVisitPayload) graphql.Marshaler {
	return ec._StudentVisitPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNStudentVisitPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitPayload(ctx context.Context, sel ast.SelectionSet, v *models.StudentVisitPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentVisitPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TaskEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaskEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTaskEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskEdge(ctx context.Context, sel ast.SelectionSet, v *models.TaskEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTaskInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskInput(ctx context.Context, v interface{}) (models.TaskInput, error) {
	res, err := ec.unmarshalInputTaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTaskInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskInput(ctx context.Context, v interface{}) (*models.TaskInput, error) {
	res, err := ec.unmarshalInputTaskInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTaskInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskInputWithID(ctx context.Context, v interface{}) (models.TaskInputWithID, error) {
	res, err := ec.unmarshalInputTaskInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTaskPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskPayload(ctx context.Context, sel ast.SelectionSet, v models.TaskPayload) graphql.Marshaler {
	return ec._TaskPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskPayload(ctx context.Context, sel ast.SelectionSet, v *models.TaskPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx context.Context, sel ast.SelectionSet, v *models.Team) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Team(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamBalanceEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TeamBalanceEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTeamBalanceEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTeamBalanceEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceEdge(ctx context.Context, sel ast.SelectionSet, v *models.TeamBalanceEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamBalanceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTeamBalanceInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceInput(ctx context.Context, v interface{}) (models.TeamBalanceInput, error) {
	res, err := ec.unmarshalInputTeamBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTeamBalanceInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceInput(ctx context.Context, v interface{}) (*models.TeamBalanceInput, error) {
	res, err := ec.unmarshalInputTeamBalanceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTeamBalanceInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceInputWithID(ctx context.Context, v interface{}) (models.TeamBalanceInputWithID, error) {
	res, err := ec.unmarshalInputTeamBalanceInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTeamBalancePayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalancePayload(ctx context.Context, sel ast.SelectionSet, v models.TeamBalancePayload) graphql.Marshaler {
	return ec._TeamBalancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeamBalancePayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalancePayload(ctx context.Context, sel ast.SelectionSet, v *models.TeamBalancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamBalancePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamDto(ctx context.Context, sel ast.SelectionSet, v *models.TeamDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamDto(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TeamEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTeamEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTeamEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamEdge(ctx context.Context, sel ast.SelectionSet, v *models.TeamEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTeamInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamInput(ctx context.Context, v interface{}) (models.TeamInput, error) {
	res, err := ec.unmarshalInputTeamInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTeamInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamInput(ctx context.Context, v interface{}) (*models.TeamInput, error) {
	res, err := ec.unmarshalInputTeamInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTeamInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamInputWithID(ctx context.Context, v interface{}) (models.TeamInputWithID, error) {
	res, err := ec.unmarshalInputTeamInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTeamPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamPayload(ctx context.Context, sel ast.SelectionSet, v models.TeamPayload) graphql.Marshaler {
	return ec._TeamPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeamPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamPayload(ctx context.Context, sel ast.SelectionSet, v *models.TeamPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNToken2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐToken(ctx context.Context, sel ast.SelectionSet, v models.Token) graphql.Marshaler {
	return ec._Token(ctx, sel, &v)
}

func (ec *executionContext) marshalNToken2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐToken(ctx context.Context, sel ast.SelectionSet, v *models.Token) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Token(ctx, sel, v)
}

func (ec *executionContext) marshalNTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx context.Context, sel ast.SelectionSet, v *models.Training) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Training(ctx, sel, v)
}

func (ec *executionContext) marshalNTrainingDayEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TrainingDayEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTrainingDayEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTrainingDayEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayEdge(ctx context.Context, sel ast.SelectionSet, v *models.TrainingDayEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrainingDayEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTrainingDayInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayInput(ctx context.Context, v interface{}) (models.TrainingDayInput, error) {
	res, err := ec.unmarshalInputTrainingDayInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTrainingDayInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayInput(ctx context.Context, v interface{}) (*models.TrainingDayInput, error) {
	res, err := ec.unmarshalInputTrainingDayInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTrainingDayInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayInputWithID(ctx context.Context, v interface{}) (models.TrainingDayInputWithID, error) {
	res, err := ec.unmarshalInputTrainingDayInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTrainingDayPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayPayload(ctx context.Context, sel ast.SelectionSet, v models.TrainingDayPayload) graphql.Marshaler {
	return ec._TrainingDayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrainingDayPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayPayload(ctx context.Context, sel ast.SelectionSet, v *models.TrainingDayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrainingDayPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNTrainingDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDto(ctx context.Context, sel ast.SelectionSet, v *models.TrainingDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrainingDto(ctx, sel, v)
}

func (ec *executionContext) marshalNTrainingEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TrainingEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTrainingEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTrainingEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingEdge(ctx context.Context, sel ast.SelectionSet, v *models.TrainingEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrainingEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTrainingInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingInput(ctx context.Context, v interface{}) (models.TrainingInput, error) {
	res, err := ec.unmarshalInputTrainingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTrainingInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingInput(ctx context.Context, v interface{}) (*models.TrainingInput, error) {
	res, err := ec.unmarshalInputTrainingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTrainingInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingInputWithID(ctx context.Context, v interface{}) (models.TrainingInputWithID, error) {
	res, err := ec.unmarshalInputTrainingInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTrainingPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingPayload(ctx context.Context, sel ast.SelectionSet, v models.TrainingPayload) graphql.Marshaler {
	return ec._TrainingPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrainingPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingPayload(ctx context.Context, sel ast.SelectionSet, v *models.TrainingPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrainingPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNUser2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserDto(ctx context.Context, sel ast.SelectionSet, v *models.UserDto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserDto(ctx, sel, v)
}

func (ec *executionContext) marshalNUserEdge2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.UserEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserEdge2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v *models.UserEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserInput2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserInput(ctx context.Context, v interface{}) (models.UserInput, error) {
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserInput2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserInput(ctx context.Context, v interface{}) (*models.UserInput, error) {
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserInputWithId2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserInputWithID(ctx context.Context, v interface{}) (models.UserInputWithID, error) {
	res, err := ec.unmarshalInputUserInputWithId(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserPayload2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v models.UserPayload) graphql.Marshaler {
	return ec._UserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v *models.UserPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVisitStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐVisitStatus(ctx context.Context, v interface{}) (models.VisitStatus, error) {
	var res models.VisitStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVisitStatus2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐVisitStatus(ctx context.Context, sel ast.SelectionSet, v models.VisitStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAge2ᚕgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAgeᚄ(ctx context.Context, v interface{}) ([]models.Age, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.Age, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAge2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAge(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAge2ᚕgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAgeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Age) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAge2gitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐAge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOArticle2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticle(ctx context.Context, sel ast.SelectionSet, v *models.Article) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Article(ctx, sel, v)
}

func (ec *executionContext) marshalOArticleConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleConnection(ctx context.Context, sel ast.SelectionSet, v *models.ArticleConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArticleConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOArticleFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐArticleFilter(ctx context.Context, v interface{}) (*models.ArticleFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArticleFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCart2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCart(ctx context.Context, sel ast.SelectionSet, v *models.Cart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Cart(ctx, sel, v)
}

func (ec *executionContext) marshalOCartConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartConnection(ctx context.Context, sel ast.SelectionSet, v *models.CartConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CartConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCartDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CartDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCartDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCartFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCartFilter(ctx context.Context, v interface{}) (*models.CartFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCartFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOClubBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalance(ctx context.Context, sel ast.SelectionSet, v *models.ClubBalance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClubBalance(ctx, sel, v)
}

func (ec *executionContext) marshalOClubBalanceConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceConnection(ctx context.Context, sel ast.SelectionSet, v *models.ClubBalanceConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClubBalanceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOClubBalanceFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐClubBalanceFilter(ctx context.Context, v interface{}) (*models.ClubBalanceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClubBalanceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCoachPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonth(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByMonth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CoachPaymentByMonth(ctx, sel, v)
}

func (ec *executionContext) marshalOCoachPaymentByMonthConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthConnection(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByMonthConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CoachPaymentByMonthConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCoachPaymentByMonthFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByMonthFilter(ctx context.Context, v interface{}) (*models.CoachPaymentByMonthFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCoachPaymentByMonthFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCoachPaymentByTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeam(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTeam) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CoachPaymentByTeam(ctx, sel, v)
}

func (ec *executionContext) marshalOCoachPaymentByTeamConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamConnection(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTeamConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CoachPaymentByTeamConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCoachPaymentByTeamFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTeamFilter(ctx context.Context, v interface{}) (*models.CoachPaymentByTeamFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCoachPaymentByTeamFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCoachPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTraining(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTraining) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CoachPaymentByTraining(ctx, sel, v)
}

func (ec *executionContext) marshalOCoachPaymentByTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingConnection(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentByTrainingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CoachPaymentByTrainingConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCoachPaymentByTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentByTrainingFilter(ctx context.Context, v interface{}) (*models.CoachPaymentByTrainingFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCoachPaymentByTrainingFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCoachPaymentRule2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentRule(ctx context.Context, v interface{}) (*models.CoachPaymentRule, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.CoachPaymentRule)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCoachPaymentRule2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCoachPaymentRule(ctx context.Context, sel ast.SelectionSet, v *models.CoachPaymentRule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCreator2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Creator) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCreator2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreator(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCreator2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreator(ctx context.Context, sel ast.SelectionSet, v *models.Creator) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Creator(ctx, sel, v)
}

func (ec *executionContext) marshalOCreatorConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorConnection(ctx context.Context, sel ast.SelectionSet, v *models.CreatorConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreatorConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCreatorDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CreatorDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCreatorDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCreatorFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐCreatorFilter(ctx context.Context, v interface{}) (*models.CreatorFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreatorFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODayOfWeek2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDayOfWeek(ctx context.Context, v interface{}) (*models.DayOfWeek, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.DayOfWeek)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODayOfWeek2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐDayOfWeek(ctx context.Context, sel ast.SelectionSet, v *models.DayOfWeek) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOKit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKit(ctx context.Context, sel ast.SelectionSet, v *models.Kit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Kit(ctx, sel, v)
}

func (ec *executionContext) marshalOKitConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitConnection(ctx context.Context, sel ast.SelectionSet, v *models.KitConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._KitConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOKitDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.KitDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKitDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOKitFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐKitFilter(ctx context.Context, v interface{}) (*models.KitFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputKitFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLead2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Lead) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLead2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLead(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOLead2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLead(ctx context.Context, sel ast.SelectionSet, v *models.Lead) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Lead(ctx, sel, v)
}

func (ec *executionContext) marshalOLeadConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadConnection(ctx context.Context, sel ast.SelectionSet, v *models.LeadConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LeadConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOLeadDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.LeadDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLeadDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOLeadFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadFilter(ctx context.Context, v interface{}) (*models.LeadFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLeadFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLeadPayload2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadPayload(ctx context.Context, sel ast.SelectionSet, v *models.LeadPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LeadPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLeadSource2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadSource(ctx context.Context, v interface{}) (*models.LeadSource, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.LeadSource)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLeadSource2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadSource(ctx context.Context, sel ast.SelectionSet, v *models.LeadSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLeadStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadStatus(ctx context.Context, v interface{}) (*models.LeadStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.LeadStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLeadStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐLeadStatus(ctx context.Context, sel ast.SelectionSet, v *models.LeadStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMoneyCost2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCost(ctx context.Context, sel ast.SelectionSet, v *models.MoneyCost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MoneyCost(ctx, sel, v)
}

func (ec *executionContext) marshalOMoneyCostConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostConnection(ctx context.Context, sel ast.SelectionSet, v *models.MoneyCostConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MoneyCostConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMoneyCostFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyCostFilter(ctx context.Context, v interface{}) (*models.MoneyCostFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMoneyCostFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMoneyForm2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx context.Context, v interface{}) (*models.MoneyForm, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.MoneyForm)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMoneyForm2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyForm(ctx context.Context, sel ast.SelectionSet, v *models.MoneyForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMoneyMove2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMove(ctx context.Context, sel ast.SelectionSet, v *models.MoneyMove) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MoneyMove(ctx, sel, v)
}

func (ec *executionContext) marshalOMoneyMoveConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveConnection(ctx context.Context, sel ast.SelectionSet, v *models.MoneyMoveConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MoneyMoveConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMoneyMoveFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐMoneyMoveFilter(ctx context.Context, v interface{}) (*models.MoneyMoveFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMoneyMoveFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrder2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrder(ctx context.Context, sel ast.SelectionSet, v *models.Order) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Order(ctx, sel, v)
}

func (ec *executionContext) marshalOOrderConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderConnection(ctx context.Context, sel ast.SelectionSet, v *models.OrderConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrderFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐOrderFilter(ctx context.Context, v interface{}) (*models.OrderFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrderFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPageInfo2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *models.PageInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOPlace2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlace(ctx context.Context, sel ast.SelectionSet, v *models.Place) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Place(ctx, sel, v)
}

func (ec *executionContext) marshalOPlaceDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlaceDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlaceDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPlaceFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPlaceFilter(ctx context.Context, v interface{}) (*models.PlaceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPlaceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPriority2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPriority(ctx context.Context, v interface{}) (*models.Priority, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.Priority)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPriority2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐPriority(ctx context.Context, sel ast.SelectionSet, v *models.Priority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalORentPaymentByMonth2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonth(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByMonth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RentPaymentByMonth(ctx, sel, v)
}

func (ec *executionContext) marshalORentPaymentByMonthConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthConnection(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByMonthConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RentPaymentByMonthConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalORentPaymentByMonthFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByMonthFilter(ctx context.Context, v interface{}) (*models.RentPaymentByMonthFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRentPaymentByMonthFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORentPaymentByTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTraining(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByTraining) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RentPaymentByTraining(ctx, sel, v)
}

func (ec *executionContext) marshalORentPaymentByTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingConnection(ctx context.Context, sel ast.SelectionSet, v *models.RentPaymentByTrainingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RentPaymentByTrainingConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalORentPaymentByTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐRentPaymentByTrainingFilter(ctx context.Context, v interface{}) (*models.RentPaymentByTrainingFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRentPaymentByTrainingFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStadium2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadium(ctx context.Context, sel ast.SelectionSet, v *models.Stadium) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Stadium(ctx, sel, v)
}

func (ec *executionContext) marshalOStadiumConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumConnection(ctx context.Context, sel ast.SelectionSet, v *models.StadiumConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StadiumConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOStadiumDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StadiumDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStadiumDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStadiumFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStadiumFilter(ctx context.Context, v interface{}) (*models.StadiumFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStadiumFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStaff2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx context.Context, sel ast.SelectionSet, v []*models.Staff) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStaff2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Staff) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStaff2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaff(ctx context.Context, sel ast.SelectionSet, v *models.Staff) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Staff(ctx, sel, v)
}

func (ec *executionContext) marshalOStaffConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffConnection(ctx context.Context, sel ast.SelectionSet, v *models.StaffConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StaffConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOStaffDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StaffDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStaffDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStaffFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStaffFilter(ctx context.Context, v interface{}) (*models.StaffFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStaffFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOStudent2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Student) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStudent2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudent(ctx context.Context, sel ast.SelectionSet, v *models.Student) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Student(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentConnection(ctx context.Context, sel ast.SelectionSet, v *models.StudentConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.StudentDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudentDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStudentFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentFilter(ctx context.Context, v interface{}) (*models.StudentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStudentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStudentVisit2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisit(ctx context.Context, sel ast.SelectionSet, v *models.StudentVisit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentVisit(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentVisitConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitConnection(ctx context.Context, sel ast.SelectionSet, v *models.StudentVisitConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentVisitConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStudentVisitFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐStudentVisitFilter(ctx context.Context, v interface{}) (*models.StudentVisitFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStudentVisitFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTask2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTask(ctx context.Context, sel ast.SelectionSet, v *models.Task) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Task(ctx, sel, v)
}

func (ec *executionContext) marshalOTaskConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskConnection(ctx context.Context, sel ast.SelectionSet, v *models.TaskConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TaskConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTaskFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskFilter(ctx context.Context, v interface{}) (*models.TaskFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTaskFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTaskStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskStatus(ctx context.Context, v interface{}) (*models.TaskStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.TaskStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskStatus2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTaskStatus(ctx context.Context, sel ast.SelectionSet, v *models.TaskStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOTeam2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Team) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTeam2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeam(ctx context.Context, sel ast.SelectionSet, v *models.Team) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Team(ctx, sel, v)
}

func (ec *executionContext) marshalOTeamBalance2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalance(ctx context.Context, sel ast.SelectionSet, v *models.TeamBalance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TeamBalance(ctx, sel, v)
}

func (ec *executionContext) marshalOTeamBalanceConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceConnection(ctx context.Context, sel ast.SelectionSet, v *models.TeamBalanceConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TeamBalanceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTeamBalanceFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamBalanceFilter(ctx context.Context, v interface{}) (*models.TeamBalanceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTeamBalanceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTeamConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamConnection(ctx context.Context, sel ast.SelectionSet, v *models.TeamConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TeamConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTeamDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TeamDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTeamDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTeamFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTeamFilter(ctx context.Context, v interface{}) (*models.TeamFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTeamFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOTraining2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Training) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTraining2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTraining(ctx context.Context, sel ast.SelectionSet, v *models.Training) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Training(ctx, sel, v)
}

func (ec *executionContext) marshalOTrainingConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingConnection(ctx context.Context, sel ast.SelectionSet, v *models.TrainingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrainingConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTrainingDay2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDay(ctx context.Context, sel ast.SelectionSet, v *models.TrainingDay) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrainingDay(ctx, sel, v)
}

func (ec *executionContext) marshalOTrainingDayConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayConnection(ctx context.Context, sel ast.SelectionSet, v *models.TrainingDayConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrainingDayConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTrainingDayFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDayFilter(ctx context.Context, v interface{}) (*models.TrainingDayFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTrainingDayFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTrainingDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TrainingDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTrainingDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTrainingFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐTrainingFilter(ctx context.Context, v interface{}) (*models.TrainingFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTrainingFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUser2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserConnection2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserConnection(ctx context.Context, sel ast.SelectionSet, v *models.UserConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOUserDto2ᚕᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserDtoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.UserDto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserDto2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserDto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUserFilter2ᚖgitlabᚗcomᚋdinamchikiᚋgoᚑgraphqlᚋgraphᚋmodelᚐUserFilter(ctx context.Context, v interface{}) (*models.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************

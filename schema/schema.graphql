directive @hasRole(role: Role!) on FIELD_DEFINITION
scalar Time

type Query {
    article(id: ID!): Article
    articles(filter: ArticleFilter, first: Int, after: ID, last: Int, before: ID): ArticleConnection
    cart(id: ID!): Cart
    carts(filter: CartFilter, first: Int, after: ID, last: Int, before: ID): CartConnection
    clubBalance(id: ID!): ClubBalance
    clubBalances(filter: ClubBalanceFilter, first: Int, after: ID, last: Int, before: ID): ClubBalanceConnection
    coachPaymentByMonth(id: ID!): CoachPaymentByMonth
    coachPaymentByTeam(id: ID!): CoachPaymentByTeam
    coachPaymentByTraining(id: ID!): CoachPaymentByTraining
    coachPaymentsByMonth(filter: CoachPaymentByMonthFilter, first: Int, after: ID, last: Int, before: ID): CoachPaymentByMonthConnection
    coachPaymentsByTeam(filter: CoachPaymentByTeamFilter, first: Int, after: ID, last: Int, before: ID): CoachPaymentByTeamConnection
    coachPaymentsByTraining(filter: CoachPaymentByTrainingFilter, first: Int, after: ID, last: Int, before: ID): CoachPaymentByTrainingConnection
    creator(Id: ID): Creator
    creators(filter: CreatorFilter, first: Int, after: ID, last: Int, before: ID): CreatorConnection
    kit(id: ID!): Kit
    kits(filter: KitFilter, first: Int, after: ID, last: Int, before: ID): KitConnection
    lead(id: ID!): Lead
    leads(filter: LeadFilter, first: Int, after: ID, last: Int, before: ID): LeadConnection
    moneyCost(id: ID!): MoneyCost
    moneyCosts(filter: MoneyCostFilter, first: Int, after: ID, last: Int, before: ID): MoneyCostConnection
    moneyMove(id: ID!): MoneyMove
    moneyMoves(filter: MoneyMoveFilter, first: Int, after: ID, last: Int, before: ID): MoneyMoveConnection
    order(id: ID!): Order
    orders(filter: OrderFilter, first: Int, after: ID, last: Int, before: ID): OrderConnection
    place(id: ID!): Place
    places(filter: PlaceFilter, first: Int, after: ID, last: Int, before: ID): PlaceConnection!
    rentPaymentByMonth(id: ID!): RentPaymentByMonth
    rentPaymentByTraining(id: ID!): RentPaymentByTraining
    rentPaymentsByMonth(filter: RentPaymentByMonthFilter, first: Int, after: ID, last: Int, before: ID): RentPaymentByMonthConnection
    rentPaymentsByTraining(filter: RentPaymentByTrainingFilter, first: Int, after: ID, last: Int, before: ID): RentPaymentByTrainingConnection
    stadium(id: ID!): Stadium
    stadiums(filter: StadiumFilter, first: Int, after: ID, last: Int, before: ID): StadiumConnection
    staff(filter: StaffFilter, first: Int, after: ID, last: Int, before: ID): StaffConnection
    staffPerson(id: ID!): Staff
    student(id: ID!): Student
    studentVisit(id: ID!): StudentVisit
    studentVisits(filter: StudentVisitFilter, first: Int, after: ID, last: Int, before: ID): StudentVisitConnection
    students(filter: StudentFilter, first: Int, after: ID, last: Int, before: ID): StudentConnection
    task(id: ID!): Task
    nearestStudentBirthdays(filter: StudentFilter, first: Int, after: ID, last: Int, before: ID): StudentConnection
    nearestStaffBirthdays(filter: StaffFilter, first: Int, after: ID, last: Int, before: ID): StaffConnection
    unPayedStudents(filter: StudentFilter, first: Int, after: ID, last: Int, before: ID): StudentConnection
    currentTasks(filter: TaskFilter, first: Int, after: ID, last: Int, before: ID): TaskConnection
    timeTable(filter: TrainingFilter, first: Int, after: ID, last: Int, before: ID): TrainingConnection
    trainingsByDay(filter: TrainingFilter, first: Int, after: ID, last: Int, before: ID): TrainingConnection
    tasks(filter: TaskFilter, first: Int, after: ID, last: Int, before: ID): TaskConnection
    team(id: ID!): Team
    teamBalance(id: ID!): TeamBalance
    teamBalances(filter: TeamBalanceFilter, first: Int, after: ID, last: Int, before: ID): TeamBalanceConnection
    teams(filter: TeamFilter, first: Int, after: ID, last: Int, before: ID): TeamConnection
    training(id: ID!): Training
    trainingDay(id: ID!): TrainingDay
    trainingDays(filter: TrainingDayFilter, first: Int, after: ID, last: Int, before: ID): TrainingDayConnection
    trainings(filter: TrainingFilter, first: Int, after: ID, last: Int, before: ID): TrainingConnection
    user(id: ID!): User!
    users(filter: UserFilter, first: Int, after: ID, last: Int, before: ID): UserConnection
    userAll: [UserDto!]
    cartAll: [CartDto!]
    creatorAll: [CreatorDto!]
    kitAll: [KitDto!]
    leadAll: [LeadDto!]
    placeAll: [PlaceDto!]
    stadiumAll: [StadiumDto!]
    staffAll: [StaffDto!]
    studentAll: [StudentDto!]
    teamAll: [TeamDto!]
    trainingAll: [TrainingDto!]
}

type Mutation {
    register(input: RegisterInput!): AuthResponse!
    login(input: LoginInput!): AuthResponse!
    articleDelete(id: ID!): ArticlePayload!
    articlePublishUpdate(id: ID!): ArticlePayload!
    articleSave(articleInput: ArticleInput!): ArticlePayload!
    articleUpdate(articleInput: ArticleInputWithId!): ArticlePayload!
    cartDelete(id: ID!): CartPayload!
    cartPublishUpdate(id: ID!): CartPayload!
    cartSave(cartInput: CartInput!): CartPayload!
    cartUpdate(cartInput: CartInputWithId!): CartPayload!
    clubBalanceDelete(id: ID!): ClubBalancePayload!
    clubBalancePublishUpdate(id: ID!): ClubBalancePayload!
    clubBalanceSave(clubBalanceInput: ClubBalanceInput!): ClubBalancePayload!
    clubBalanceUpdate(clubBalanceInput: ClubBalanceInputWithId!): ClubBalancePayload!
    coachPaymentByMonthDelete(id: ID!): CoachPaymentByMonthPayload!
    coachPaymentByMonthPublishUpdate(id: ID!): CoachPaymentByMonthPayload!
    coachPaymentByMonthSave(coachPaymentByMonthInput: CoachPaymentByMonthInput!): CoachPaymentByMonthPayload!
    coachPaymentByMonthUpdate(coachPaymentByMonthInput: CoachPaymentByMonthInputWithId!): CoachPaymentByMonthPayload!
    coachPaymentByTeamDelete(id: ID!): CoachPaymentByTeamPayload!
    coachPaymentByTeamPublishUpdate(id: ID!): CoachPaymentByTeamPayload!
    coachPaymentByTeamSave(coachPaymentByTeamInput: CoachPaymentByTeamInput!): CoachPaymentByTeamPayload!
    coachPaymentByTeamUpdate(coachPaymentByTeamInput: CoachPaymentByTeamInputWithId!): CoachPaymentByTeamPayload!
    coachPaymentByTrainingDelete(id: ID!): CoachPaymentByTrainingPayload!
    coachPaymentByTrainingPublishUpdate(id: ID!): CoachPaymentByTrainingPayload!
    coachPaymentByTrainingSave(coachPaymentByTrainingInput: CoachPaymentByTrainingInput!): CoachPaymentByTrainingPayload!
    coachPaymentByTrainingUpdate(coachPaymentByTrainingInput: CoachPaymentByTrainingInputWithId!): CoachPaymentByTrainingPayload!
    creatorDelete(id: ID!): CreatorPayload!
    creatorPublishUpdate(id: ID!): CreatorPayload!
    creatorSave(creatorInput: CreatorInput!): CreatorPayload!
    creatorUpdate(creatorInput: CreatorInputWithId!): CreatorPayload!
    kitDelete(id: ID!): KitPayload!
    kitPublishUpdate(id: ID!): KitPayload!
    kitSave(kitInput: KitInput!): KitPayload!
    kitUpdate(kitInput: KitInputWithId!): KitPayload!
    leadDelete(id: ID!): LeadPayload!
    leadPublishUpdate(id: ID!): LeadPayload!
    leadSave(leadInput: LeadInput!): LeadPayload
    leadUpdate(leadInput: LeadInputWithId!): LeadPayload!
    moneyCostDelete(id: ID!): MoneyCostPayload!
    moneyCostPublishUpdate(id: ID!): MoneyCostPayload!
    moneyCostSave(moneyCostInput: MoneyCostInput!): MoneyCostPayload!
    moneyCostUpdate(moneyCostInput: MoneyCostInputWithId!): MoneyCostPayload!
    moneyMoveDelete(id: ID!): MoneyMovePayload!
    moneyMovePublishUpdate(id: ID!): MoneyMovePayload!
    moneyMoveSave(moneyMoveInput: MoneyMoveInput!): MoneyMovePayload!
    moneyMoveUpdate(moneyMoveInput: MoneyMoveInputWithId!): MoneyMovePayload!
    orderDelete(id: ID!): OrderPayload!
    orderPublishUpdate(id: ID!): OrderPayload!
    orderSave(orderInput: OrderInput!): OrderPayload!
    orderUpdate(orderInput: OrderInputWithId!): OrderPayload!
    placeDelete(id: ID!): PlacePayload!
    placePublishUpdate(id: ID!): PlacePayload!
    placeSave(placeInput: PlaceInput!): PlacePayload!
    placeUpdate(placeInput: PlaceInputWithId!): PlacePayload!
    refresh(phone: String!, token: String!): Token!
    rentPaymentByMonthDelete(id: ID!): RentPaymentByMonthPayload!
    rentPaymentByMonthPublishUpdate(id: ID!): RentPaymentByMonthPayload!
    rentPaymentByMonthSave(rentPaymentInput: RentPaymentByMonthInput!): RentPaymentByMonthPayload!
    rentPaymentByMonthUpdate(rentPaymentInput: RentPaymentByMonthInputWithId!): RentPaymentByMonthPayload!
    rentPaymentByTrainingDelete(id: ID!): RentPaymentByTrainingPayload!
    rentPaymentByTrainingPublishUpdate(id: ID!): RentPaymentByTrainingPayload!
    rentPaymentByTrainingSave(rentPaymentInput: RentPaymentByTrainingInput!): RentPaymentByTrainingPayload!
    rentPaymentByTrainingUpdate(rentPaymentInput: RentPaymentByTrainingInputWithId!): RentPaymentByTrainingPayload!
    stadiumDelete(id: ID!): StadiumPayload!
    stadiumPublishUpdate(id: ID!): StadiumPayload!
    stadiumSave(stadiumInput: StadiumInput!): StadiumPayload!
    stadiumUpdate(stadiumInput: StadiumInputWithId!): StadiumPayload!
    staffDelete(id: ID!): StaffPayload!
    staffPublishUpdate(id: ID!): StaffPayload!
    staffSave(staffInput: StaffInput!): StaffPayload!
    staffUpdate(staffInput: StaffInputWithId!): StaffPayload!
    studentVisitDelete(id: ID!): StudentVisitPayload!
    studentVisitPublishUpdate(id: ID!): StudentVisitPayload!
    studentVisitSave(studentVisitInput: StudentVisitInput!): StudentVisitPayload!
    studentVisitUpdate(studentVisitInput: StudentVisitInputWithId!): StudentVisitPayload!
    studentDelete(id: ID!): StudentPayload!
    studentPublishUpdate(id: ID!): StudentPayload!
    studentSave(studentInput: StudentInput!): StudentPayload!
    studentUpdate(studentInput: StudentInputWithId!): StudentPayload!
    taskDelete(id: ID!): TaskPayload!
    taskPublishUpdate(id: ID!): TaskPayload!
    taskSave(taskInput: TaskInput!): TaskPayload!
    taskUpdate(taskInput: TaskInputWithId!): TaskPayload!
    teamBalanceDelete(id: ID!): TeamBalancePayload!
    teamBalancePublishUpdate(id: ID!): TeamBalancePayload!
    teamBalanceSave(teamBalanceInput: TeamBalanceInput!): TeamBalancePayload!
    teamBalanceUpdate(teamBalanceInput: TeamBalanceInputWithId!): TeamBalancePayload!
    teamDelete(id: ID!): TeamPayload!
    teamPublishUpdate(id: ID!): TeamPayload!
    teamSave(teamInput: TeamInput!): TeamPayload!
    teamUpdate(teamInput: TeamInputWithId!): TeamPayload!
    trainingDayDelete(id: ID!): TrainingDayPayload!
    trainingDayPublishUpdate(id: ID!): TrainingDayPayload!
    trainingDaySave(trainingDayInput: TrainingDayInput!): TrainingDayPayload!
    trainingDayUpdate(trainingDayInput: TrainingDayInputWithId!): TrainingDayPayload!
    trainingDelete(id: ID!): TrainingPayload!
    trainingPublishUpdate(id: ID!): TrainingPayload!
    trainingSave(trainingInput: TrainingInput!): TrainingPayload!
    trainingUpdate(trainingInput: TrainingInputWithId!): TrainingPayload!
    userDelete(id: ID!): UserPayload!
    userPublishUpdate(id: ID!): UserPayload!
    userSave(userInput: UserInput!): UserPayload!
    userUpdate(userInput: UserInputWithId!): UserPayload!
}

type AuthResponse {
    authToken: AuthToken!
    user: User!
}

type AuthToken {
    accessToken: String!
    expiredAt: Time!
}


input LoginInput {
    phone: String!
    password: String!
}

input PlaceFilter {
    name: String
}

input ArticleFilter {
    title: String
}

input StadiumFilter {
    name: String
}

input CartFilter {
    name: String
}

input TrainingFilter {
    name: String
}

input OrderFilter {
    name: String
}

input MoneyMoveFilter {
    name: String
}

input RentPaymentByMonthFilter {
    name: String
}

input RentPaymentByTrainingFilter {
    name: String
}

input MoneyCostFilter {
    name: String
}

input RegisterInput {
    phone: String!
    password: String!
    confirmPassword: String!
    firstName: String!
    lastName: String!
}

input TeamBalanceFilter {
    name: String
}

input TeamFilter {
    name: String
}

input StudentFilter {
    name: String
}

input StaffFilter {
    name: String
}

input UserFilter {
    name: String
}

input TaskFilter {
    name: String
}

input ClubBalanceFilter {
    name: String
}

input CoachPaymentByMonthFilter {
    name: String
}

input CoachPaymentByTeamFilter {
    name: String
}

input CoachPaymentByTrainingFilter {
    name: String
}

input CreatorFilter {
    name: String
}

input LeadFilter {
    name: String
}

input KitFilter {
    name: String
}

input StudentVisitFilter {
    name: String
}

input TrainingDayFilter {
    name: String
}

type Place {
    address: String!
    description: String!
    id: ID!
    name: String!
    orderNumber: Int!
    published: Boolean!
}

type PlaceConnection {
    edges: [PlaceEdge!]!
    pageInfo: PageInfo!
}

type PlaceEdge {
    cursor: ID!
    node: Place
}

type PageInfo {
    startCursor: ID!
    endCursor: ID!
    hasNextPage: Boolean
}

type Article {
    author: User
    authorId: ID!
    description: String!
    fileName: String
    id: ID!
    published: Boolean!
    tags: [String!]
    title: String!
}

type ArticleConnection {
    edges: [ArticleEdge!]!
    pageInfo: PageInfo!
}

type ArticleEdge {
    cursor: ID!
    node: Article
}

type ArticlePayload {
    record: Article
    recordId: ID!
}

type Cart {
    id: ID!
    kitIds: [ID!]!
    published: Boolean!
    studentId: ID!
    studentItem: Student
    sum: Int!
}

type CartConnection {
    edges: [CartEdge!]!
    pageInfo: PageInfo
}

type CartEdge {
    cursor: ID!
    node: Cart
}

type CartPayload {
    record: Cart
    recordId: ID!
}

type ClubBalance {
    date:Time!
    id: ID!
    otherCosts: Int!
    published: Boolean!
    rent: Int!
    salary: Int!
    sum: Int!
    tickets: Int!
}

type ClubBalanceConnection {
    edges: [ClubBalanceEdge!]!
    pageInfo: PageInfo
}

type ClubBalanceEdge {
    cursor: ID!
    node: ClubBalance
}

type ClubBalancePayload {
    record: ClubBalance
    recordId: ID!
}

type CoachPaymentByMonth {
    coach: Staff
    coachId: ID!
    date:Time
    id: ID!
    published: Boolean!
    sum: Int!
}

type CoachPaymentByMonthConnection {
    edges: [CoachPaymentByMonthEdge!]!
    pageInfo: PageInfo
}

type CoachPaymentByMonthEdge {
    cursor: ID!
    node: CoachPaymentByMonth
}

type CoachPaymentByMonthPayload {
    record: CoachPaymentByMonth
    recordId: ID!
}

type CoachPaymentByTeam {
    coach: Staff
    coachId: ID!
    dateFinish:Time
    dateStart:Time
    id: ID!
    paymentRule: CoachPaymentRule
    published: Boolean!
    sum: Int
    teamId: ID
    teamItem: Team
}

type CoachPaymentByTeamConnection {
    edges: [CoachPaymentByTeamEdge!]!
    pageInfo: PageInfo
}

type CoachPaymentByTeamEdge {
    cursor: ID!
    node: CoachPaymentByTeam
}

type CoachPaymentByTeamPayload {
    record: CoachPaymentByTeam
    recordId: ID!
}

type CoachPaymentByTraining {
    coach: Staff
    coachId: ID!
    id: ID!
    published: Boolean!
    sum: Int
    trainingId: ID
    trainingItem: Training
}

type CoachPaymentByTrainingConnection {
    edges: [CoachPaymentByTrainingEdge!]!
    pageInfo: PageInfo
}

type CoachPaymentByTrainingEdge {
    cursor: ID!
    node: CoachPaymentByTraining
}

type CoachPaymentByTrainingPayload {
    record: CoachPaymentByTraining
    recordId: ID!
}

type Creator {
    id: ID!
    name: String!
    passportNum: String
    phone: String!
    published: Boolean!
    userId: ID
    userItem: User
}

type CreatorConnection {
    edges: [CreatorEdge!]!
    pageInfo: PageInfo
}

type CreatorEdge {
    cursor: ID!
    node: Creator
}

type CreatorPayload {
    record: Creator
    recordId: ID!
}

type Kit {
    fileName: String
    id: ID!
    name: String!
    number: Int
    price: Int!
    published: Boolean!
    quantity: Int
    size: String!
    title: String
}

type KitConnection {
    edges: [KitEdge!]!
    pageInfo: PageInfo
}

type KitEdge {
    cursor: ID!
    node: Kit
}

type KitPayload {
    record: Kit
    recordId: ID!
}

type Lead {
    description: String
    id: ID!
    name: String
    nextVisit: Training
    nextVisitId: ID
    phone: String!
    published: Boolean!
    source: LeadSource
    status: LeadStatus
    studentIds: [ID!]
    students: [Student!]
    teamId: ID
    teamItem: Team
    yearBorn: Int
}

type LeadConnection {
    edges: [LeadEdge!]!
    pageInfo: PageInfo
}

type LeadEdge {
    cursor: ID!
    node: Lead
}

type LeadPayload {
    record: Lead
    recordId: ID!
}

type MoneyCost {
    date:Time!
    description: String!
    id: ID!
    moneyForm: MoneyForm!
    published: Boolean!
    staff: Staff
    staffId: ID!
    sum: Int!
}

type MoneyCostConnection {
    edges: [MoneyCostEdge!]!
    pageInfo: PageInfo
}

type MoneyCostEdge {
    cursor: ID!
    node: MoneyCost
}

type MoneyCostPayload {
    record: MoneyCost
    recordId: ID!
}

type MoneyMove {
    dateFinish:Time
    datePayment:Time
    dateStart:Time
    description: String
    id: ID!
    moneyForm: MoneyForm
    owner: Staff
    ownerId: ID!
    published: Boolean!
    studentId: ID!
    studentItem: Student
    sum: Int
    userId: ID!
    userItem: User
}

type MoneyMoveConnection {
    edges: [MoneyMoveEdge!]!
    pageInfo: PageInfo
}

type MoneyMoveEdge {
    cursor: ID!
    node: MoneyMove
}

type MoneyMovePayload {
    record: MoneyMove
    recordId: ID!
}

type Order {
    cartId: ID!
    cartItem: Cart
    creatorId: ID!
    creatorItem: Creator
    fileName: String
    id: ID!
    orderStatus: OrderStatus!
    published: Boolean!
}

type OrderConnection {
    edges: [OrderEdge!]!
    pageInfo: PageInfo
}

type OrderEdge {
    cursor: ID!
    node: Order
}

type OrderPayload {
    record: Order
    recordId: ID!
}

type RentPaymentByMonth {
    description: String
    id: ID!
    month:Time!
    paymentDate:Time
    published: Boolean!
    stadiumId: ID!
    stadiumItem: Stadium
    sum: Int!
}

type RentPaymentByMonthConnection {
    edges: [RentPaymentByMonthEdge!]!
    pageInfo: PageInfo
}

type RentPaymentByMonthEdge {
    cursor: ID!
    node: RentPaymentByMonth
}

type RentPaymentByMonthPayload {
    record: RentPaymentByMonth
    recordId: ID!
}

type RentPaymentByTraining {
    description: String
    id: ID!
    published: Boolean!
    stadiumId: ID!
    stadiumItem: Stadium
    sum: Int!
    trainingIds: [ID!]!
    trainings: [Training!]
}

type RentPaymentByTrainingConnection {
    edges: [RentPaymentByTrainingEdge!]!
    pageInfo: PageInfo
}

type RentPaymentByTrainingEdge {
    cursor: ID!
    node: RentPaymentByTraining
}

type RentPaymentByTrainingPayload {
    record: RentPaymentByTraining
    recordId: ID!
}

type Stadium {
    id: ID!
    latitude: Float!
    longitude: Float!
    name: String!
    placeId: ID!
    place: Place
    published: Boolean!
}

type StadiumConnection {
    edges: [StadiumEdge!]!
    pageInfo: PageInfo
}

type StadiumEdge {
    cursor: ID!
    node: Stadium
}

type StadiumPayload {
    record: Stadium
    recordId: ID!
}

type Staff {
    birthday:Time
    department: Department!
    description: String
    fileName: String
    id: ID!
    name: String!
    orderNumber: Int!
    phoneNumber: String
    published: Boolean!
    userId: ID!
    user: User
    work: String!
}

type StaffConnection {
    edges: [StaffEdge!]!
    pageInfo: PageInfo
}

type StaffEdge {
    cursor: ID!
    node: Staff
}

type StaffPayload {
    record: Staff
    recordId: ID!
}

type Student {
    birthday:Time
    creatorIds: [ID!]!
    creators: [Creator!]
    id: ID!
    name: String!
    passportNum: String
    paymentSum: Int
    published: Boolean!
    teamIds: [ID!]!
    teams: [Team!]
}

type StudentConnection {
    edges: [StudentEdge!]!
    pageInfo: PageInfo
}

type StudentEdge {
    cursor: ID!
    node: Student
}

type StudentPayload {
    record: Student
    recordId: ID!
}

type StudentVisit {
    id: ID!
    payed: Boolean!
    published: Boolean!
    studentId: ID!
    studentItem: Student
    trainingId: ID!
    trainingItem: Training
    visitStatus: VisitStatus!
}

type StudentVisitConnection {
    edges: [StudentVisitEdge!]!
    pageInfo: PageInfo
}

type StudentVisitEdge {
    cursor: ID!
    node: StudentVisit
}

type StudentVisitPayload {
    record: StudentVisit
    recordId: ID!
}

type Task {
    author: User
    authorId: ID
    description: String
    endTime: Time
    id: ID!
    leadIds: [ID!]
    leads: [Lead!]
    priority: Priority
    published: Boolean!
    result: String
    startTime: Time
    studentIds: [ID!]
    students: [Student!]
    taskStatus: TaskStatus
    title: String!
    workerIds: [ID!]
    workers: [Staff]
}

type TaskConnection {
    edges: [TaskEdge!]!
    pageInfo: PageInfo
}

type TaskEdge {
    cursor: ID!
    node: Task
}

type TaskPayload {
    record: Task
    recordId: ID!
}

type Team {
    ages: [Age!]
    coachIds: [ID!]
    coaches: [Staff!]
    headCoach: Staff
    headCoachId: ID
    id: ID!
    name: String!
    placeId: ID!
    placeItem: Place
    published: Boolean!
    writable: Boolean!
}

type TeamBalance {
    date:Time!
    id: ID!
    published: Boolean!
    rent: Int!
    salary: Int!
    sum: Int!
    teamId: ID!
    teamItem: Team
    tickets: Int!
}

type TeamBalanceConnection {
    edges: [TeamBalanceEdge!]!
    pageInfo: PageInfo
}

type TeamBalanceEdge {
    cursor: ID!
    node: TeamBalance
}

type TeamBalancePayload {
    record: TeamBalance
    recordId: ID!
}

type TeamConnection {
    edges: [TeamEdge!]!
    pageInfo: PageInfo
}

type TeamEdge {
    cursor: ID!
    node: Team
}

type TeamPayload {
    record: Team
    recordId: ID!
}

type Token {
    accessToken: String!
    expiration: Time!
    refreshToken: String!
}

type Training {
    coachIds: [ID!]
    coaches: [Staff!]
    headCoach: Staff
    headCoachId: ID
    id: ID!
    published: Boolean!
    stadiumId: ID
    stadiumItem: Stadium
    teamId: ID!
    teamItem: Team
    time: Time
    visits: Int!
}

type TrainingConnection {
    edges: [TrainingEdge!]!
    pageInfo: PageInfo
}

type TrainingDay {
    day: DayOfWeek
    id: ID!
    published: Boolean!
    stadiumId: ID
    stadiumItem: Stadium
    teamId: ID!
    teamItem: Team
    time: Time
}

type TrainingDayConnection {
    edges: [TrainingDayEdge!]!
    pageInfo: PageInfo
}

type TrainingDayEdge {
    cursor: ID!
    node: TrainingDay
}

type TrainingDayPayload {
    record: TrainingDay
    recordId: ID!
}

type TrainingEdge {
    cursor: ID!
    node: Training
}

type TrainingPayload {
    record: Training
    recordId: ID!
}

type User {
    id: ID!
    phone: String!
    firstName: String!
    lastName: String!
    roles: [Role!]!
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo
}

type UserEdge {
    cursor: ID!
    node: User
}

type UserPayload {
    record: User
    recordId: ID!
}

enum Age {
    PRESCHOOL
    SCHOOL
}

enum CoachPaymentRule {
    BY_TEAM
    BY_TRAINING
}

enum DayOfWeek {
    FRIDAY
    MONDAY
    SATURDAY
    SUNDAY
    THURSDAY
    TUESDAY
    WEDNESDAY
}

enum Department {
    COACH
    HEAD
}

enum LeadSource {
    BROTHER
    FRIENDS
    GIS
    GOOGLE
    INSTAGRAM
    LIFT
    OTHER_PARENTS
    PAPER
    RETURNED
    TELEGRAM
    VKONTAKTE
    YANDEX
    YANDEX_MAP
}

enum LeadStatus {
    APPROVE_FIRST_TRAINING
    CANCEL_AFTER_APPROVE_FIRST_TRAINING
    CANCEL_AFTER_FIRST_TRAINING
    CANCEL_AFTER_WRITE
    CONTRACTED
    FIRST_TRAINING
    FIRST_TRAINING_ADD
    WANT_CONTRACT
    WRITE
}

enum MoneyForm {
    BANK_TRANSFER
    CARD_TRANSFER
    CASH
}

enum OrderStatus {
    CANCELED
    CREATED
    FINISHED
    IN_DELIVERY
    PAYED
    READY_TO_GET
}

enum Priority {
    HIGH
    HIGHEST
    LOW
    MIDDLE
}

enum Role {
    ADMIN
    COACH
    DIRECTOR
    ECONOMIST
    EDITOR
    USER
}

enum TaskStatus {
    CANCEL
    DONE
    NEW
    WORK
}

enum VisitStatus {
    ABSENT
    HOLIDAY
    ILL
    VISITED
}

input ArticleInput {
    description: String!
    fileName: String
    published: Boolean!
    tags: [String!]
    title: String!
}

input ArticleInputWithId {
    id: ID!
    input: ArticleInput!
}

type CartDto {
    id: ID!
    name: String!
}

input CartInput {
    kitIds: [ID!]!
    published: Boolean!
    studentId: ID!
    sum: Int!
}

input CartInputWithId {
    id: ID!
    input: CartInput!
}

input ClubBalanceInput {
    date:Time!
    otherCosts: Int!
    published: Boolean!
    rent: Int!
    salary: Int!
    tickets: Int!
}

input ClubBalanceInputWithId {
    id: ID!
    input: ClubBalanceInput!
}

input CoachPaymentByMonthInput {
    coachId: ID!
    date:Time!
    published: Boolean!
    sum: Int!
}

input CoachPaymentByMonthInputWithId {
    id: ID!
    input: CoachPaymentByMonthInput!
}

input CoachPaymentByTeamInput {
    coachId: ID!
    dateFinish:Time!
    dateStart:Time!
    paymentRule: CoachPaymentRule!
    published: Boolean!
    sum: Int!
    teamID: ID!
}

input CoachPaymentByTeamInputWithId {
    id: ID!
    input: CoachPaymentByTeamInput!
}

input CoachPaymentByTrainingInput {
    coachId: ID!
    published: Boolean!
    sum: Int!
    trainingID: ID!
}

input CoachPaymentByTrainingInputWithId {
    id: ID!
    input: CoachPaymentByTrainingInput!
}

type CreatorDto {
    id: ID!
    name: String!
}

input CreatorInput {
    name: String!
    passportNum: String
    phone: String!
    published: Boolean!
    userId: ID
}

input CreatorInputWithId {
    id: ID!
    input: CreatorInput!
}

type KitDto {
    id: ID!
    name: String!
}

input KitInput {
    fileName: String
    name: String!
    number: Int
    price: Int!
    published: Boolean!
    quantity: Int
    size: String!
    title: String
}

input KitInputWithId {
    id: ID!
    input: KitInput!
}

type LeadDto {
    id: ID!
    name: String!
}

input LeadInput {
    description: String
    name: String
    nextVisitId: ID
    phone: String!
    published: Boolean!
    source: LeadSource
    status: LeadStatus
    studentIds: [ID!]
    teamId: ID
    yearBorn: Int
}

input LeadInputWithId {
    id: ID!
    input: LeadInput!
}

input MoneyCostInput {
    date:Time!
    description: String!
    moneyForm: MoneyForm!
    published: Boolean!
    staffId: ID!
    sum: Int!
}

input MoneyCostInputWithId {
    id: ID!
    input: MoneyCostInput!
}

input MoneyMoveInput {
    dateFinish:Time!
    datePayment:Time!
    dateStart:Time!
    description: String
    moneyForm: MoneyForm!
    ownerId: ID!
    published: Boolean!
    studentId: ID!
    sum: Int!
    userId: ID!
}

input MoneyMoveInputWithId {
    id: ID!
    input: MoneyMoveInput!
}

input OrderInput {
    cartId: ID!
    creatorId: ID!
    fileName: String
    orderStatus: OrderStatus!
    published: Boolean!
}

input OrderInputWithId {
    id: ID!
    input: OrderInput!
}

type PlaceDto {
    id: ID!
    name: String!
}

type PlacePayload {
    place: Place!
    id: ID!
}

input PlaceInput {
    address: String!
    description: String!
    name: String!
    orderNumber: Int!
    published: Boolean!
}

input PlaceInputWithId {
    id: ID!
    input: PlaceInput!
}

input RentPaymentByMonthInput {
    description: String
    month:Time!
    paymentDate:Time!
    published: Boolean!
    stadiumId: ID!
    sum: Int!
}

input RentPaymentByMonthInputWithId {
    id: ID!
    input: RentPaymentByMonthInput!
}

input RentPaymentByTrainingInput {
    description: String
    published: Boolean!
    stadiumID: ID!
    sum: Int!
    trainingIds: [ID!]!
}

input RentPaymentByTrainingInputWithId {
    id: ID!
    input: RentPaymentByTrainingInput!
}

type StadiumDto {
    id: ID!
    name: String!
}

input StadiumInput {
    latitude: Float!
    longitude: Float!
    name: String!
    placeId: ID!
    published: Boolean!
}

input StadiumInputWithId {
    id: ID!
    input: StadiumInput!
}

type StaffDto {
    id: ID!
    name: String!
}

input StaffInput {
    birthday:Time
    department: Department!
    description: String
    fileName: String
    name: String!
    orderNumber: Int!
    phoneNumber: String
    published: Boolean!
    userId: ID
    work: String!
}

input StaffInputWithId {
    id: ID!
    input: StaffInput!
}

type StudentDto {
    id: ID!
    name: String!
}

input StudentInput {
    birthday:Time
    creatorIds: [ID!]!
    name: String!
    passportNum: String
    paymentSum: Int
    published: Boolean!
    teamIds: [ID!]!
}

input StudentInputWithId {
    id: ID!
    input: StudentInput!
}

input StudentVisitInput {
    payed: Boolean!
    published: Boolean!
    studentId: ID!
    trainingId: ID!
    visitStatus: VisitStatus!
}

input StudentVisitInputWithId {
    id: ID!
    input: StudentVisitInput!
}

input TaskInput {
    authorId: ID
    description: String
    endTime: Time
    leadIds: [ID!]
    priority: Priority
    published: Boolean!
    result: String
    startTime: Time
    studentIds: [ID!]
    taskStatus: TaskStatus
    title: String!
    workerIds: [ID!]
}

input TaskInputWithId {
    id: ID!
    input: TaskInput!
}

input TeamBalanceInput {
    date:Time!
    published: Boolean!
    rent: Int!
    salary: Int!
    teamId: ID!
    tickets: Int!
}

input TeamBalanceInputWithId {
    id: ID!
    input: TeamBalanceInput!
}

type TeamDto {
    id: ID!
    name: String!
}

input TeamInput {
    ages: [Age!]
    coachIds: [ID!]
    headCoachId: ID
    name: String!
    placeId: ID!
    published: Boolean!
    writable: Boolean!
}

input TeamInputWithId {
    id: ID!
    input: TeamInput!
}

input TrainingDayInput {
    day: DayOfWeek
    published: Boolean!
    stadiumId: ID
    teamId: ID!
    time: Time
}

input TrainingDayInputWithId {
    id: ID!
    input: TrainingDayInput!
}

type TrainingDto {
    id: ID!
    name: String!
}

input TrainingInput {
    coachIds: [ID!]
    headCoachId: ID
    published: Boolean!
    stadiumId: ID
    teamId: ID!
    time: Time!
    visits: Int!
}

input TrainingInputWithId {
    id: ID!
    input: TrainingInput!
}

type UserDto {
    id: ID!
    name: String!
}

input UserInput {
    name: String!
    password: String
    phone: String!
    published: Boolean!
    role: Role!
}

input UserInputWithId {
    id: ID!
    input: UserInput!
}
